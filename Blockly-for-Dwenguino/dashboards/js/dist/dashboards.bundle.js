(()=>{var __webpack_modules__={975:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(795);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(569);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(565);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(216);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(589);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./Blockly-for-Dwenguino/dashboards/scss/index.scss\nvar scss = __webpack_require__(437);\n;// CONCATENATED MODULE: ./Blockly-for-Dwenguino/dashboards/scss/index.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(scss/* default */.Z, options);\n\n\n\n\n       /* harmony default export */ const dashboards_scss = (scss/* default */.Z && scss/* default.locals */.Z.locals ? scss/* default.locals */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== "function" && b !== null)\r\n        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\r\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === "m") throw new TypeError("Private method is not writable");\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\r\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nfunction __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use \'in\' operator on non-object");\r\n    return typeof state === "function" ? receiver === state : state.has(receiver);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/css-directive.js\n/**\n * Directive for use in {@link css}.\n *\n * @public\n */\nclass CSSDirective {\n    /**\n     * Creates a CSS fragment to interpolate into the CSS document.\n     * @returns - the string to interpolate into CSS\n     */\n    createCSS() {\n        return "";\n    }\n    /**\n     * Creates a behavior to bind to the host element.\n     * @returns - the behavior to bind to the host element, or undefined.\n     */\n    createBehavior() {\n        return undefined;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/platform.js\n/**\n * A reference to globalThis, with support\n * for browsers that don\'t yet support the spec.\n * @public\n */\nconst $global = (function () {\n    if (typeof globalThis !== "undefined") {\n        // We\'re running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== "undefined") {\n        // We\'re running in NodeJS\n        return global;\n    }\n    if (typeof self !== "undefined") {\n        // We\'re running in a worker.\n        return self;\n    }\n    if (typeof window !== "undefined") {\n        // We\'re running in the browser\'s main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function("return this")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\nconst propConfig = {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n};\nif ($global.FAST === void 0) {\n    Reflect.defineProperty($global, "FAST", Object.assign({ value: Object.create(null) }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\nconst FAST = $global.FAST;\nif (FAST.getById === void 0) {\n    const storage = Object.create(null);\n    Reflect.defineProperty(FAST, "getById", Object.assign({ value(id, initialize) {\n            let found = storage[id];\n            if (found === void 0) {\n                found = initialize ? (storage[id] = initialize()) : null;\n            }\n            return found;\n        } }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nconst emptyArray = Object.freeze([]);\n/**\n * Creates a function capable of locating metadata associated with a type.\n * @returns A metadata locator function.\n * @internal\n */\nfunction createMetadataLocator() {\n    const metadataLookup = new WeakMap();\n    return function (target) {\n        let metadata = metadataLookup.get(target);\n        if (metadata === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (metadata === void 0 && currentTarget !== null) {\n                metadata = metadataLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            metadata = metadata === void 0 ? [] : metadata.slice(0);\n            metadataLookup.set(target, metadata);\n        }\n        return metadata;\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/dom.js\n\nconst updateQueue = $global.FAST.getById(1 /* updateQueue */, () => {\n    const tasks = [];\n    const pendingErrors = [];\n    function throwFirstError() {\n        if (pendingErrors.length) {\n            throw pendingErrors.shift();\n        }\n    }\n    function tryRunTask(task) {\n        try {\n            task.call();\n        }\n        catch (error) {\n            pendingErrors.push(error);\n            setTimeout(throwFirstError, 0);\n        }\n    }\n    function process() {\n        const capacity = 1024;\n        let index = 0;\n        while (index < tasks.length) {\n            tryRunTask(tasks[index]);\n            index++;\n            // Prevent leaking memory for long chains of recursive calls to `DOM.queueUpdate`.\n            // If we call `DOM.queueUpdate` within a task scheduled by `DOM.queueUpdate`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don\'t\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n            if (index > capacity) {\n                // Manually shift all values starting at the index back to the\n                // beginning of the queue.\n                for (let scan = 0, newLength = tasks.length - index; scan < newLength; scan++) {\n                    tasks[scan] = tasks[scan + index];\n                }\n                tasks.length -= index;\n                index = 0;\n            }\n        }\n        tasks.length = 0;\n    }\n    function enqueue(callable) {\n        if (tasks.length < 1) {\n            $global.requestAnimationFrame(process);\n        }\n        tasks.push(callable);\n    }\n    return Object.freeze({\n        enqueue,\n        process,\n    });\n});\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy("fast-html", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nconst _interpolationStart = `${marker}{`;\n/** @internal */\nconst _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nconst DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        "replace" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error("The HTML policy can only be set once.");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link HTMLDirective} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, ""));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}="${this.createInterpolationPlaceholder(index)}"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `\x3c!--${marker}:${index}--\x3e`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate: updateQueue.enqueue,\n    /**\n     * Immediately processes all work previously scheduled\n     * through queueUpdate.\n     * @remarks\n     * This also forces nextUpdate promises\n     * to resolve.\n     */\n    processUpdates: updateQueue.process,\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise(updateQueue.enqueue);\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, "")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/element-styles.js\n\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nclass ElementStyles {\n    constructor() {\n        this.targets = new WeakSet();\n    }\n    /** @internal */\n    addStylesTo(target) {\n        this.targets.add(target);\n    }\n    /** @internal */\n    removeStylesFrom(target) {\n        this.targets.delete(target);\n    }\n    /** @internal */\n    isAttachedTo(target) {\n        return this.targets.has(target);\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n}\n/**\n * Create ElementStyles from ComposableStyles.\n */\nElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => \n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nclass AdoptedStyleSheetsStyles extends ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.styleSheetCache = styleSheetCache;\n        this._styleSheets = void 0;\n        this.behaviors = reduceBehaviors(styles);\n    }\n    get styleSheets() {\n        if (this._styleSheets === void 0) {\n            const styles = this.styles;\n            const styleSheetCache = this.styleSheetCache;\n            this._styleSheets = reduceStyles(styles).map((x) => {\n                if (x instanceof CSSStyleSheet) {\n                    return x;\n                }\n                let sheet = styleSheetCache.get(x);\n                if (sheet === void 0) {\n                    sheet = new CSSStyleSheet();\n                    sheet.replaceSync(x);\n                    styleSheetCache.set(x, sheet);\n                }\n                return sheet;\n            });\n        }\n        return this._styleSheets;\n    }\n    addStylesTo(target) {\n        target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...this.styleSheets];\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        const sourceSheets = this.styleSheets;\n        target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sourceSheets.indexOf(x) === -1);\n        super.removeStylesFrom(target);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nclass StyleElementStyles extends ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        target = this.normalizeTarget(target);\n        for (let i = 0; i < styleSheets.length; i++) {\n            const element = document.createElement("style");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.append(element);\n        }\n        super.addStylesTo(target);\n    }\n    removeStylesFrom(target) {\n        target = this.normalizeTarget(target);\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n        super.removeStylesFrom(target);\n    }\n    isAttachedTo(target) {\n        return super.isAttachedTo(this.normalizeTarget(target));\n    }\n    normalizeTarget(target) {\n        return target === document ? document.body : target;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/styles/css.js\n\n\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = "";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== "") {\n                styles.push(cssString);\n                cssString = "";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== "") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nfunction css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends CSSDirective {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = "";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === "string") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nfunction cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nclass SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.spillover === void 0\n            ? this.sub1 === subscriber || this.sub2 === subscriber\n            : this.spillover.indexOf(subscriber) !== -1;\n    }\n    /**\n     * Subscribes to notification of changes in an object\'s state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.has(subscriber)) {\n                return;\n            }\n            if (this.sub1 === void 0) {\n                this.sub1 = subscriber;\n                return;\n            }\n            if (this.sub2 === void 0) {\n                this.sub2 = subscriber;\n                return;\n            }\n            this.spillover = [this.sub1, this.sub2, subscriber];\n            this.sub1 = void 0;\n            this.sub2 = void 0;\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index === -1) {\n                spillover.push(subscriber);\n            }\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object\'s state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        const spillover = this.spillover;\n        if (spillover === void 0) {\n            if (this.sub1 === subscriber) {\n                this.sub1 = void 0;\n            }\n            else if (this.sub2 === subscriber) {\n                this.sub2 = void 0;\n            }\n        }\n        else {\n            const index = spillover.indexOf(subscriber);\n            if (index !== -1) {\n                spillover.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const spillover = this.spillover;\n        const source = this.source;\n        if (spillover === void 0) {\n            const sub1 = this.sub1;\n            const sub2 = this.sub2;\n            if (sub1 !== void 0) {\n                sub1.handleChange(source, args);\n            }\n            if (sub2 !== void 0) {\n                sub2.handleChange(source, args);\n            }\n        }\n        else {\n            for (let i = 0, ii = spillover.length; i < ii; ++i) {\n                spillover[i].handleChange(source, args);\n            }\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nclass PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.sourceSubscribers = null;\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        var _a;\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n    }\n    /**\n     * Subscribes to notification of changes in an object\'s state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        var _a;\n        if (propertyToWatch) {\n            let subscribers = this.subscribers[propertyToWatch];\n            if (subscribers === void 0) {\n                this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n            }\n            subscribers.subscribe(subscriber);\n        }\n        else {\n            this.sourceSubscribers =\n                (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n            this.sourceSubscribers.subscribe(subscriber);\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object\'s state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        var _a;\n        if (propertyToUnwatch) {\n            const subscribers = this.subscribers[propertyToUnwatch];\n            if (subscribers !== void 0) {\n                subscribers.unsubscribe(subscriber);\n            }\n        }\n        else {\n            (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/observation/observable.js\n\n\n\n/**\n * Common Observable APIs.\n * @public\n */\nconst Observable = FAST.getById(2 /* observable */, () => {\n    const volatileRegex = /(:|&&|\\|\\||if)/;\n    const notifierLookup = new WeakMap();\n    const queueUpdate = DOM.queueUpdate;\n    let watcher = void 0;\n    let createArrayObserver = (array) => {\n        throw new Error("Must call enableArrayObservation before observing arrays.");\n    };\n    function getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    }\n    const getAccessors = createMetadataLocator();\n    class DefaultObservableAccessor {\n        constructor(name) {\n            this.name = name;\n            this.field = `_${name}`;\n            this.callback = `${name}Changed`;\n        }\n        getValue(source) {\n            if (watcher !== void 0) {\n                watcher.watch(source, this.name);\n            }\n            return source[this.field];\n        }\n        setValue(source, newValue) {\n            const field = this.field;\n            const oldValue = source[field];\n            if (oldValue !== newValue) {\n                source[field] = newValue;\n                const callback = source[this.callback];\n                if (typeof callback === "function") {\n                    callback.call(source, oldValue, newValue);\n                }\n                getNotifier(source).notify(this.name);\n            }\n        }\n    }\n    class BindingObserverImplementation extends SubscriberSet {\n        constructor(binding, initialSubscriber, isVolatileBinding = false) {\n            super(binding, initialSubscriber);\n            this.binding = binding;\n            this.isVolatileBinding = isVolatileBinding;\n            this.needsRefresh = true;\n            this.needsQueue = true;\n            this.first = this;\n            this.last = null;\n            this.propertySource = void 0;\n            this.propertyName = void 0;\n            this.notifier = void 0;\n            this.next = void 0;\n        }\n        observe(source, context) {\n            if (this.needsRefresh && this.last !== null) {\n                this.disconnect();\n            }\n            const previousWatcher = watcher;\n            watcher = this.needsRefresh ? this : void 0;\n            this.needsRefresh = this.isVolatileBinding;\n            const result = this.binding(source, context);\n            watcher = previousWatcher;\n            return result;\n        }\n        disconnect() {\n            if (this.last !== null) {\n                let current = this.first;\n                while (current !== void 0) {\n                    current.notifier.unsubscribe(this, current.propertyName);\n                    current = current.next;\n                }\n                this.last = null;\n                this.needsRefresh = this.needsQueue = true;\n            }\n        }\n        watch(propertySource, propertyName) {\n            const prev = this.last;\n            const notifier = getNotifier(propertySource);\n            const current = prev === null ? this.first : {};\n            current.propertySource = propertySource;\n            current.propertyName = propertyName;\n            current.notifier = notifier;\n            notifier.subscribe(this, propertyName);\n            if (prev !== null) {\n                if (!this.needsRefresh) {\n                    // Declaring the variable prior to assignment below circumvents\n                    // a bug in Angular\'s optimization process causing infinite recursion\n                    // of this watch() method. Details https://github.com/microsoft/fast/issues/4969\n                    let prevValue;\n                    watcher = void 0;\n                    /* eslint-disable-next-line */\n                    prevValue = prev.propertySource[prev.propertyName];\n                    /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n                    watcher = this;\n                    if (propertySource === prevValue) {\n                        this.needsRefresh = true;\n                    }\n                }\n                prev.next = current;\n            }\n            this.last = current;\n        }\n        handleChange() {\n            if (this.needsQueue) {\n                this.needsQueue = false;\n                queueUpdate(this);\n            }\n        }\n        call() {\n            if (this.last !== null) {\n                this.needsQueue = true;\n                this.notify(this);\n            }\n        }\n        records() {\n            let next = this.first;\n            return {\n                next: () => {\n                    const current = next;\n                    if (current === undefined) {\n                        return { value: void 0, done: true };\n                    }\n                    else {\n                        next = next.next;\n                        return {\n                            value: current,\n                            done: false,\n                        };\n                    }\n                },\n                [Symbol.iterator]: function () {\n                    return this;\n                },\n            };\n        }\n    }\n    return Object.freeze({\n        /**\n         * @internal\n         * @param factory - The factory used to create array observers.\n         */\n        setArrayObserverFactory(factory) {\n            createArrayObserver = factory;\n        },\n        /**\n         * Gets a notifier for an object or Array.\n         * @param source - The object or Array to get the notifier for.\n         */\n        getNotifier,\n        /**\n         * Records a property change for a source object.\n         * @param source - The object to record the change against.\n         * @param propertyName - The property to track as changed.\n         */\n        track(source, propertyName) {\n            if (watcher !== void 0) {\n                watcher.watch(source, propertyName);\n            }\n        },\n        /**\n         * Notifies watchers that the currently executing property getter or function is volatile\n         * with respect to its observable dependencies.\n         */\n        trackVolatile() {\n            if (watcher !== void 0) {\n                watcher.needsRefresh = true;\n            }\n        },\n        /**\n         * Notifies subscribers of a source object of changes.\n         * @param source - the object to notify of changes.\n         * @param args - The change args to pass to subscribers.\n         */\n        notify(source, args) {\n            getNotifier(source).notify(args);\n        },\n        /**\n         * Defines an observable property on an object or prototype.\n         * @param target - The target object to define the observable on.\n         * @param nameOrAccessor - The name of the property to define as observable;\n         * or a custom accessor that specifies the property name and accessor implementation.\n         */\n        defineProperty(target, nameOrAccessor) {\n            if (typeof nameOrAccessor === "string") {\n                nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n            }\n            getAccessors(target).push(nameOrAccessor);\n            Reflect.defineProperty(target, nameOrAccessor.name, {\n                enumerable: true,\n                get: function () {\n                    return nameOrAccessor.getValue(this);\n                },\n                set: function (newValue) {\n                    nameOrAccessor.setValue(this, newValue);\n                },\n            });\n        },\n        /**\n         * Finds all the observable accessors defined on the target,\n         * including its prototype chain.\n         * @param target - The target object to search for accessor on.\n         */\n        getAccessors,\n        /**\n         * Creates a {@link BindingObserver} that can watch the\n         * provided {@link Binding} for changes.\n         * @param binding - The binding to observe.\n         * @param initialSubscriber - An initial subscriber to changes in the binding value.\n         * @param isVolatileBinding - Indicates whether the binding\'s dependency list must be re-evaluated on every value evaluation.\n         */\n        binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n            return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n        },\n        /**\n         * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n         * on every evaluation of the value.\n         * @param binding - The binding to inspect.\n         */\n        isVolatileBinding(binding) {\n            return volatileRegex.test(binding.toString());\n        },\n    });\n});\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nfunction observable_observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nfunction observable_volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            Observable.trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nconst contextEvent = FAST.getById(3 /* contextEvent */, () => {\n    let current = null;\n    return {\n        get() {\n            return current;\n        },\n        set(event) {\n            current = event;\n        },\n    };\n});\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nclass ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return contextEvent.get();\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n    /**\n     * Sets the event for the current execution context.\n     * @param event - The event to set.\n     * @internal\n     */\n    static setEvent(event) {\n        contextEvent.set(event);\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, "index");\nObservable.defineProperty(ExecutionContext.prototype, "length");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nconst defaultExecutionContext = Object.seal(new ExecutionContext());\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/html-directive.js\n\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nclass HTMLDirective {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A {@link HTMLDirective} that targets a named attribute or property on a node.\n * @public\n */\nclass TargetedHTMLDirective extends HTMLDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * Creates a placeholder string based on the directive\'s index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nclass AttachedBehaviorHTMLDirective extends HTMLDirective {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive\'s index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`\'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/binding.js\n\n\n\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there\'s no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = "";\n    }\n    // If the value has a "create" method, then it\'s a template-like.\n    if (value.create) {\n        this.target.textContent = "";\n        let view = this.target.$fastView;\n        // If there\'s no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn\'t created\n            // from the same template as the new value, then we\n            // need to remove the old view if it\'s still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It\'s possible that the value is the same as the previous template\n        // and that there\'s actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it\'s currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === "") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there\'s no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nclass HTMLBindingDirective extends TargetedHTMLDirective {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.binding);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case ":":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === "innerHTML") {\n                    const binding = this.binding;\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case "?":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case "@":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === "class") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nclass BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        ExecutionContext.setEvent(event);\n        const result = this.binding(this.source, this.context);\n        ExecutionContext.setEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/compiler.js\n\n\nlet sharedContext = null;\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === "string") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = "";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new HTMLBindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== "") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new HTMLBindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(""), lastNode.nextSibling);\n            if (typeof currentPart === "string") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = " ";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nfunction compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (\n    // If the first node in a fragment is a marker, that means it\'s an unstable first node,\n    // because something like a when, repeat, etc. could add nodes before the marker.\n    // To mitigate this, we insert a stable first node. However, if we insert a node,\n    // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n    DOM.isMarker(fragment.firstChild) ||\n        // Or if there is only one node and a directive, it means the template\'s content\n        // is *only* the directive. In that case, HTMLView.dispose() misses any nodes inserted by\n        // the directive. Inserting a new node ensures proper disposal of nodes added by the directive.\n        (fragment.childNodes.length === 1 && directives.length)) {\n        fragment.insertBefore(document.createComment(""), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/view.js\n// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nclass HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view\'s DOM nodes to the referenced node.\n     * @param node - The parent node to append the view\'s DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view\'s DOM nodes before the referenced node.\n     * @param node - The node to insert the view\'s DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const end = this.lastChild;\n            if (node.previousSibling === end)\n                return;\n            const parentNode = node.parentNode;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view\'s DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view\'s behaviors to its binding source.\n     * @param source - The binding source for the view\'s binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view\'s behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/template.js\n\n\n\n\n\n\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nclass ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === "string") {\n                template = document.createElement("template");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === "TEMPLATE") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === "string") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n/* eslint-disable-next-line no-control-regex */\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F "\'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d"\'`<>=]*|"[^"]*|\'[^\']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nfunction html(strings, ...values) {\n    const directives = [];\n    let html = "";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === "function") {\n            value = new HTMLBindingDirective(value);\n        }\n        if (value instanceof TargetedHTMLDirective) {\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof HTMLDirective) {\n            // Since not all values are directives, we can\'t use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/when.js\n/**\n * A directive that enables basic conditional rendering in a template.\n * @param binding - The condition to test for rendering.\n * @param templateOrTemplateBinding - The template or a binding that gets\n * the template to render when the condition is true.\n * @public\n */\nfunction when(binding, templateOrTemplateBinding) {\n    const getTemplate = typeof templateOrTemplateBinding === "function"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return (source, context) => binding(source, context) ? getTemplate(source, context) : null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/attributes.js\n\n\n\n/**\n * Metadata used to configure a custom attribute\'s behavior.\n * @public\n */\nconst AttributeConfiguration = Object.freeze({\n    /**\n     * Locates all attribute configurations associated with a type.\n     */\n    locate: createMetadataLocator(),\n});\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nconst attributes_booleanConverter = {\n    toView(value) {\n        return value ? "true" : "false";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === "false" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nconst nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nclass AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = "reflect", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === "boolean" && converter === void 0) {\n            this.converter = attributes_booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === "fromView") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case "reflect":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case "boolean":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(AttributeConfiguration.locate(Owner));\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === "string") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nfunction attributes_attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        AttributeConfiguration.locate($target.constructor).push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/fast-definitions.js\n\n\n\n\nconst defaultShadowOptions = { mode: "open" };\nconst defaultElementOptions = {};\nconst fastRegistry = FAST.getById(4 /* elementRegistry */, () => {\n    const typeToDefinition = new Map();\n    return Object.freeze({\n        register(definition) {\n            if (typeToDefinition.has(definition.type)) {\n                return false;\n            }\n            typeToDefinition.set(definition.type, definition);\n            return true;\n        },\n        getByType(key) {\n            return typeToDefinition.get(key);\n        },\n    });\n});\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nclass FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === "string") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof ElementStyles\n                        ? nameOrConfig.styles\n                        : ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Indicates if this element has been defined in at least one registry.\n     */\n    get isDefined() {\n        return !!fastRegistry.getByType(this.type);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (fastRegistry.register(this)) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, "observedAttributes", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n}\n/**\n * Gets the element definition associated with the specified type.\n * @param type - The custom element type to retrieve the definition for.\n */\nFASTElementDefinition.forType = fastRegistry.getByType;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/controller.js\n\n\n\n\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n    cancelable: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nclass Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        this._isConnected = false;\n        /**\n         * This allows Observable.getNotifier(...) to return the Controller\n         * when the notifier for the Controller itself is being requested. The\n         * result is that the Observable system does not need to create a separate\n         * instance of Notifier for observables on the Controller. The component and\n         * the controller will now share the same notifier, removing one-object construct\n         * per web component instance.\n         */\n        this.$fastController = this;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === "closed") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we\'ll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Indicates whether or not the custom element has been\n     * connected to the document.\n     */\n    get isConnected() {\n        Observable.track(this, "isConnected");\n        return this._isConnected;\n    }\n    setIsConnected(value) {\n        this._isConnected = value;\n        Observable.notify(this, "isConnected");\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element. Providing an HTMLStyleElement will attach the element instance to the shadowRoot.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.append(styles);\n        }\n        else if (!styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.addStylesTo(target);\n            if (sourceBehaviors !== null) {\n                this.addBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Removes styles from this element. Providing an HTMLStyleElement will detach the element instance from the shadowRoot.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        if (styles instanceof HTMLStyleElement) {\n            target.removeChild(styles);\n        }\n        else if (styles.isAttachedTo(target)) {\n            const sourceBehaviors = styles.behaviors;\n            styles.removeStylesFrom(target);\n            if (sourceBehaviors !== null) {\n                this.removeBehaviors(sourceBehaviors);\n            }\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = new Map());\n        const length = behaviors.length;\n        const behaviorsToBind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                targetBehaviors.set(behavior, targetBehaviors.get(behavior) + 1);\n            }\n            else {\n                targetBehaviors.set(behavior, 1);\n                behaviorsToBind.push(behavior);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToBind.length; ++i) {\n                behaviorsToBind[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     * @param force - Forces unbinding of behaviors.\n     */\n    removeBehaviors(behaviors, force = false) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        const behaviorsToUnbind = [];\n        for (let i = 0; i < length; ++i) {\n            const behavior = behaviors[i];\n            if (targetBehaviors.has(behavior)) {\n                const count = targetBehaviors.get(behavior) - 1;\n                count === 0 || force\n                    ? targetBehaviors.delete(behavior) && behaviorsToUnbind.push(behavior)\n                    : targetBehaviors.set(behavior, count);\n            }\n        }\n        if (this._isConnected) {\n            const element = this.element;\n            for (let i = 0; i < behaviorsToUnbind.length; ++i) {\n                behaviorsToUnbind[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this._isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (const [behavior] of behaviors) {\n                behavior.bind(element, defaultExecutionContext);\n            }\n        }\n        this.setIsConnected(true);\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (!this._isConnected) {\n            return;\n        }\n        this.setIsConnected(false);\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (const [behavior] of behaviors) {\n                behavior.unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this._isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there\'s no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root\'s content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn\'t one, then that means\n        // we\'re doing a Light DOM render to the element\'s direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there\'s already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error("Missing FASTElement definition.");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/components/fast-element.js\n\n\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nconst FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nfunction customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js\n\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js\n\n\n\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString: utils_toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = utils_toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest(\'undefined\');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest(\'ArrayBuffer\');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== \'undefined\') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest(\'string\');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest(\'function\');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest(\'number\');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === \'object\';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== \'object\') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest(\'Date\');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest(\'File\');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest(\'Blob\');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest(\'FileList\');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = \'[object FormData]\';\n  return thing && (\n    (typeof FormData === \'function\' && thing instanceof FormData) ||\n    utils_toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest(\'URLSearchParams\');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \'\');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If \'obj\' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don\'t bother if no value provided\n  if (obj === null || typeof obj === \'undefined\') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== \'object\') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== "undefined") return globalThis;\n  return typeof self !== "undefined" ? self : (typeof window !== \'undefined\' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, \'super\', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== \'undefined\' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest(\'HTMLFormElement\');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest(\'RegExp\');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && [\'arguments\', \'caller\', \'callee\'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if (\'writable\' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error(\'Can not rewrite read-only method \\\'\' + name + \'\\\'\');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!(\'toJSON\' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\n/* harmony default export */ const utils = ({\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty: utils_hasOwnProperty,\n  hasOwnProp: utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  toJSONObject\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js\n\n\n\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, \'ECONNABORTED\').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = \'AxiosError\';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst AxiosError_prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  \'ERR_BAD_OPTION_VALUE\',\n  \'ERR_BAD_OPTION\',\n  \'ECONNABORTED\',\n  \'ETIMEDOUT\',\n  \'ERR_NETWORK\',\n  \'ERR_FR_TOO_MANY_REDIRECTS\',\n  \'ERR_DEPRECATED\',\n  \'ERR_BAD_RESPONSE\',\n  \'ERR_BAD_REQUEST\',\n  \'ERR_CANCELED\',\n  \'ERR_NOT_SUPPORT\',\n  \'ERR_INVALID_URL\'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(AxiosError_prototype, \'isAxiosError\', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(AxiosError_prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== \'isAxiosError\';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\n/* harmony default export */ const core_AxiosError = (AxiosError);\n\n// EXTERNAL MODULE: ./node_modules/form-data/lib/browser.js\nvar browser = __webpack_require__(230);\n;// CONCATENATED MODULE: ./node_modules/axios/lib/env/classes/FormData.js\n\n/* harmony default export */ const classes_FormData = (browser);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js\n\n\n\n\n\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, \'[]\') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? \'[\' + token + \']\' : token;\n  }).join(dots ? \'.\' : \'\');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it\'s a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliant(thing) {\n  return thing && utils.isFunction(thing.append) && thing[Symbol.toStringTag] === \'FormData\' && thing[Symbol.iterator];\n}\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'target must be an object\');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (classes_FormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== \'undefined\' && Blob;\n  const useBlob = _Blob && isSpecCompliant(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError(\'visitor must be a function\');\n  }\n\n  function convertValue(value) {\n    if (value === null) return \'\';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new core_AxiosError(\'Blob is not supported. Use a Buffer instead.\');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === \'function\' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === \'object\') {\n      if (utils.endsWith(key, \'{}\')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        (utils.isFileList(value) || utils.endsWith(key, \'[]\') && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + \'[]\'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error(\'Circular reference detected in \' + path.join(\'.\'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError(\'data must be an object\');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\n/* harmony default export */ const helpers_toFormData = (toFormData);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js\n\n\n\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    \'!\': \'%21\',\n    "\'": \'%27\',\n    \'(\': \'%28\',\n    \')\': \'%29\',\n    \'~\': \'%7E\',\n    \'%20\': \'+\',\n    \'%00\': \'\\x00\'\n  };\n  return encodeURIComponent(str).replace(/[!\'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && helpers_toFormData(params, this, options);\n}\n\nconst AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;\n\nAxiosURLSearchParams_prototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nAxiosURLSearchParams_prototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + \'=\' + _encode(pair[1]);\n  }, \'\').join(\'&\');\n};\n\n/* harmony default export */ const helpers_AxiosURLSearchParams = (AxiosURLSearchParams);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js\n\n\n\n\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction buildURL_encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, \':\').\n    replace(/%24/g, \'$\').\n    replace(/%2C/gi, \',\').\n    replace(/%20/g, \'+\').\n    replace(/%5B/gi, \'[\').\n    replace(/%5D/gi, \']\');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || buildURL_encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new helpers_AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf("#");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf(\'?\') === -1 ? \'?\' : \'&\') + serializedParams;\n  }\n\n  return url;\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js\n\n\n\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\n/* harmony default export */ const core_InterceptorManager = (InterceptorManager);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/transitional.js\n\n\n/* harmony default export */ const defaults_transitional = ({\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\n\n\n\n/* harmony default export */ const classes_URLSearchParams = (typeof URLSearchParams !== \'undefined\' ? URLSearchParams : helpers_AxiosURLSearchParams);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/FormData.js\n\n\n/* harmony default export */ const browser_classes_FormData = (FormData);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/index.js\n\n\n\n/**\n * Determine if we\'re running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> \'ReactNative\'\n * nativescript\n *  navigator.product -> \'NativeScript\' or \'NS\'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== \'undefined\' && (\n    (product = navigator.product) === \'ReactNative\' ||\n    product === \'NativeScript\' ||\n    product === \'NS\')\n  ) {\n    return false;\n  }\n\n  return typeof window !== \'undefined\' && typeof document !== \'undefined\';\n})();\n\n/**\n * Determine if we\'re running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== \'undefined\' && typeof document !== \'undefined\'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== \'undefined\' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === \'function\'\n  );\n})();\n\n\n/* harmony default export */ const platform_browser = ({\n  isBrowser: true,\n  classes: {\n    URLSearchParams: classes_URLSearchParams,\n    FormData: browser_classes_FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: [\'http\', \'https\', \'file\', \'blob\', \'url\', \'data\']\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js\n\n\n\n\n\n\nfunction toURLEncodedForm(data, options) {\n  return helpers_toFormData(data, new platform_browser.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform_browser.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString(\'base64\'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js\n\n\n\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `[\'foo\', \'x\', \'y\', \'z\']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === \'[]\' ? \'\' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\n/* harmony default export */ const helpers_formDataToJSON = (formDataToJSON);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_CONTENT_TYPE = {\n  \'Content-Type\': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== \'SyntaxError\') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: defaults_transitional,\n\n  adapter: [\'xhr\', \'http\'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || \'\';\n    const hasJSONContentType = contentType.indexOf(\'application/json\') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType(\'application/x-www-form-urlencoded;charset=utf-8\', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf(\'application/x-www-form-urlencoded\') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf(\'multipart/form-data\') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return helpers_toFormData(\n          isFileList ? {\'files[]\': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType(\'application/json\', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === \'json\';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === \'SyntaxError\') {\n            throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: \'XSRF-TOKEN\',\n  xsrfHeaderName: \'X-XSRF-TOKEN\',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform_browser.classes.FormData,\n    Blob: platform_browser.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      \'Accept\': \'application/json, text/plain, */*\'\n    }\n  }\n};\n\nutils.forEach([\'delete\', \'get\', \'head\'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach([\'post\', \'put\', \'patch\'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\n/* harmony default export */ const lib_defaults = (defaults);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js\n\n\n\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  \'age\', \'authorization\', \'content-length\', \'content-type\', \'etag\',\n  \'expires\', \'from\', \'host\', \'if-modified-since\', \'if-unmodified-since\',\n  \'last-modified\', \'location\', \'max-forwards\', \'proxy-authorization\',\n  \'referer\', \'retry-after\', \'user-agent\'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\n/* harmony default export */ const parseHeaders = (rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split(\'\\n\').forEach(function parser(line) {\n    i = line.indexOf(\':\');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === \'set-cookie\') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + \', \' + val : val;\n    }\n  });\n\n  return parsed;\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosHeaders.js\n\n\n\n\n\nconst $internals = Symbol(\'internals\');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(\' \' + header);\n\n  [\'get\', \'set\', \'has\'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error(\'header name must be a non-empty string\');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError(\'parser must be boolean|regexp|function\');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear() {\n    return Object.keys(this).forEach(this.delete.bind(this));\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(\', \') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + \': \' + value).join(\'\\n\');\n  }\n\n  get [Symbol.toStringTag]() {\n    return \'AxiosHeaders\';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor([\'Content-Type\', \'Content-Length\', \'Accept\', \'Accept-Encoding\', \'User-Agent\']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\n/* harmony default export */ const core_AxiosHeaders = (AxiosHeaders);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js\n\n\n\n\n\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || lib_defaults;\n  const context = response || config;\n  const headers = core_AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js\n\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js\n\n\n\n\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  core_AxiosError.call(this, message == null ? \'canceled\' : message, core_AxiosError.ERR_CANCELED, config, request);\n  this.name = \'CanceledError\';\n}\n\nutils.inherits(CanceledError, core_AxiosError, {\n  __CANCEL__: true\n});\n\n/* harmony default export */ const cancel_CanceledError = (CanceledError);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/null.js\n// eslint-disable-next-line strict\n/* harmony default export */ const helpers_null = (null);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js\n\n\n\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new core_AxiosError(\n      \'Request failed with status code \' + response.status,\n      [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js\n\n\n\n\n\n/* harmony default export */ const cookies = (platform_browser.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + \'=\' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push(\'expires=\' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push(\'path=\' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push(\'domain=\' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push(\'secure\');\n        }\n\n        document.cookie = cookie.join(\'; \');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp(\'(^|;\\\\s*)(\' + name + \')=([^;]*)\'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, \'\', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })());\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAbsoluteURL.js\n\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js\n\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, \'\') + \'/\' + relativeURL.replace(/^\\/+/, \'\')\n    : baseURL;\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js\n\n\n\n\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js\n\n\n\n\n\n/* harmony default export */ const isURLSameOrigin = (platform_browser.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement(\'a\');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it\'s components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute(\'href\', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute(\'href\', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \'\') : \'\',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \'\') : \'\',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \'\') : \'\',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === \'/\') ?\n          urlParsingNode.pathname :\n          \'/\' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })());\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js\n\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || \'\';\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js\n\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\n/* harmony default export */ const helpers_speedometer = (speedometer);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = helpers_speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? \'download\' : \'upload\'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== \'undefined\';\n\n/* harmony default export */ const xhr = (isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = core_AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener(\'abort\', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && (platform_browser.isStandardBrowserEnv || platform_browser.isStandardBrowserWebWorkerEnv)) {\n      requestHeaders.setContentType(false); // Let the browser set it\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || \'\';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \'\';\n      requestHeaders.set(\'Authorization\', \'Basic \' + btoa(username + \':\' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = core_AxiosHeaders.from(\n        \'getAllResponseHeaders\' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === \'text\' || responseType === \'json\' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if (\'onloadend\' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn\'t get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it\'s a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\'file:\') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next \'tick\'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new core_AxiosError(\'Request aborted\', core_AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it\'s a network error\n      reject(new core_AxiosError(\'Network Error\', core_AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? \'timeout of \' + config.timeout + \'ms exceeded\' : \'timeout exceeded\';\n      const transitional = config.transitional || defaults_transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new core_AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we\'re in a web worker, or react-native.\n    if (platform_browser.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if (\'setRequestHeader\' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== \'json\') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === \'function\') {\n      request.addEventListener(\'progress\', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === \'function\' && request.upload) {\n      request.upload.addEventListener(\'progress\', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\'abort\', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform_browser.protocols.indexOf(protocol) === -1) {\n      reject(new core_AxiosError(\'Unsupported protocol \' + protocol + \':\', core_AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/adapters.js\n\n\n\n\n\nconst knownAdapters = {\n  http: helpers_null,\n  xhr: xhr\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, \'name\', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, \'adapterName\', {value});\n  }\n});\n\n/* harmony default export */ const adapters = ({\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new core_AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          \'ERR_NOT_SUPPORT\'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter \'${nameOrAdapter}\' is not available in the build` :\n          `Unknown adapter \'${nameOrAdapter}\'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError(\'adapter is not a function\');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js\n\n\n\n\n\n\n\n\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new cancel_CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = core_AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if ([\'post\', \'put\', \'patch\'].indexOf(config.method) !== -1) {\n    config.headers.setContentType(\'application/x-www-form-urlencoded\', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = core_AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = core_AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js\n\n\n\n\n\nconst headersToObject = (thing) => thing instanceof core_AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js\nconst VERSION = "1.2.3";\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js\n\n\n\n\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n[\'object\', \'boolean\', \'number\', \'function\', \'string\', \'symbol\'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || \'a\' + (i < 1 ? \'n \' : \' \') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return \'[Axios v\' + VERSION + \'] Transitional option \\\'\' + opt + \'\\\'\' + desc + (message ? \'. \' + message : \'\');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new core_AxiosError(\n        formatMessage(opt, \' has been removed\' + (version ? \' in \' + version : \'\')),\n        core_AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          \' has been deprecated since v\' + version + \' and will be removed in the near future\'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object\'s properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== \'object\') {\n    throw new core_AxiosError(\'options must be an object\', core_AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new core_AxiosError(\'option \' + opt + \' must be \' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new core_AxiosError(\'Unknown option \' + opt, core_AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\n/* harmony default export */ const validator = ({\n  assertOptions,\n  validators\n});\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/core/Axios.js\n\n\n\n\n\n\n\n\n\n\n\nconst Axios_validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new core_InterceptorManager(),\n      response: new core_InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios(\'example/url\'[, config]) a la fetch API\n    if (typeof configOrUrl === \'string\') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),\n        clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: Axios_validators.function,\n        serialize: Axios_validators.function\n      }, true);\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || \'get\').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      [\'delete\', \'get\', \'head\', \'post\', \'put\', \'patch\', \'common\'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = core_AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === \'function\' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach([\'delete\', \'get\', \'head\', \'options\'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach([\'post\', \'put\', \'patch\'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          \'Content-Type\': \'multipart/form-data\'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + \'Form\'] = generateHTTPMethod(true);\n});\n\n/* harmony default export */ const core_Axios = (Axios);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js\n\n\n\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== \'function\') {\n      throw new TypeError(\'executor must be a function.\');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new cancel_CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\n/* harmony default export */ const cancel_CancelToken = (CancelToken);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js\n\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js\n\n\n\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/HttpStatusCode.js\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\n/* harmony default export */ const helpers_HttpStatusCode = (HttpStatusCode);\n\n;// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new core_Axios(defaultConfig);\n  const instance = bind(core_Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, core_Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(lib_defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = core_Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = cancel_CanceledError;\naxios.CancelToken = cancel_CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = helpers_toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = core_AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = core_AxiosHeaders;\n\naxios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.HttpStatusCode = helpers_HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\n/* harmony default export */ const lib_axios = (axios);\n\n;// CONCATENATED MODULE: ./Blockly-for-Dwenguino/dashboards/js/src/components/name_tag.ts\n\n\n\nconst elementStyle = css`\n  :host {\n    display: inline-block;\n    contain: content;\n    color: white;\n    background: var(--fill-color);\n    border-radius: var(--border-radius);\n    min-width: 325px;\n    text-align: center;\n    box-shadow: 0 0 calc(var(--depth) * 1px) rgba(0,0,0,.5);\n  }\n\n  :host([hidden]) { \n    display: none;\n  }\n\n  .header {\n    margin: 16px 0;\n    position: relative;\n  }\n\n  h3 {\n    font-weight: bold;\n    font-family: \'Source Sans Pro\';\n    letter-spacing: 4px;\n    font-size: 32px;\n    margin: 0;\n    padding: 0;\n  }\n\n  h4 {\n    font-family: sans-serif;\n    font-size: 18px;\n    margin: 0;\n    padding: 0;\n  }\n\n  .body {\n    background: white;\n    color: black;\n    padding: 32px 8px;\n    font-size: 42px;\n    font-family: cursive;\n  }\n\n  .footer {\n    height: 16px;\n    background: var(--fill-color);\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n  }\n`;\nconst numberConverter = {\n  toView(value) {\n    return value.toString();\n  },\n  fromView(value) {\n    if (Number.isNaN(Number(value))) {\n      return 1;\n    } else {\n      return Number(value);\n    }\n  }\n};\nconst nameTagTemplate = html`\n  <div class="header">\n    <slot name="avatar"></slot>\n    <h3>${x => x.greeting.toUpperCase()}</h3>\n    <h4>my name is</h4>\n  </div>\n  \n  <div class="body">\n    <slot></slot>\n  </div>\n\n  <button @click="${x => x.handleButtonClick()}">Greet</button>\n  <h3>You have greeted me ${name_tag => name_tag.numberOfGreets} times, thank you!</h3>\n\n\n  ${when(elem => !elem.loggedIn, html`\n    <a href="https://github.com/login/oauth/authorize?client_id=1a0bffd9565f3e1c7c47&redirect_uri=http://localhost:12032/oauth/redirect"><button id="loginbutton" type="primary"\n      className="btn"\n      size="lg">\n        Login\n    </button></a>\n  `)}\n\n  ${when(elem => elem.loggedIn, html`\n  Yay, you have been logged in.\n  `)}\n  \n  <div class="footer"></div>\n`;\nlet NameTag = class NameTag extends FASTElement {\n  constructor() {\n    super();\n    this.greeting = \'Hello\';\n    this.numberOfGreets = 0;\n    this.loggedIn = false;\n    this.user = null;\n    const token = new URLSearchParams(window.location.search).get("access_token");\n    lib_axios.get(`https://api.github.com/user`, {\n      headers: {\n        Authorization: "token " + token\n      }\n    }).then(res => {\n      this.user = res.data;\n      this.loggedIn = true;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  handleButtonClick() {\n    this.numberOfGreets += 1;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    console.log("name-tag is now connected to the DOM");\n  }\n  // optional method called when user is changed\n  userChanged(oldUser, newUser) {\n    console.log(newUser);\n  }\n  // optional method \n  greetingChanged() {\n    console.log(this.greeting);\n    //this.shadowRoot!.innerHTML = this.greeting;\n  }\n\n  numberOfGreetsChanged(oldValue, newValue) {\n    console.log(this.numberOfGreets);\n  }\n};\n__decorate([attributes_attr, __metadata("design:type", String)], NameTag.prototype, "greeting", void 0);\n__decorate([attributes_attr({\n  converter: numberConverter\n}), __metadata("design:type", Number)], NameTag.prototype, "numberOfGreets", void 0);\n__decorate([attributes_attr, __metadata("design:type", Boolean)], NameTag.prototype, "loggedIn", void 0);\n__decorate([observable_observable, __metadata("design:type", Object)], NameTag.prototype, "user", void 0);\nNameTag = __decorate([customElement({\n  name: \'name-tag\',\n  template: nameTagTemplate,\n  styles: elementStyle\n}), __metadata("design:paramtypes", [])], NameTag);\n\n;// CONCATENATED MODULE: ./Blockly-for-Dwenguino/dashboards/js/src/components/login_component.ts\n\n\nconst login_component_elementStyle = css`\n  \n`;\nconst loginTemplate = html`\n\n\n  ${when(elem => !elem.loggedIn, html`\n    <a href="/oauth/login?platform=leerId${x => x.originalRequestInfo}"><button id="loginbutton" type="primary"\n      className="btn"\n      size="lg">\n        Login\n    </button></a>\n  `)}\n\n  ${when(elem => elem.loggedIn, html`\n    <span>${x => x.username}</span\n  `)}\n  \n  <slot></slot>\n`;\nlet LoginComponent = class LoginComponent extends FASTElement {\n  constructor() {\n    var _a;\n    super();\n    this.loggedIn = false;\n    this.sessionToken = "";\n    this.username = "";\n    this.originalRequestInfo = "";\n    fetch("/user/isLoggedIn").then(response => __awaiter(this, void 0, void 0, function* () {\n      if (response.status == 200) {\n        this.loggedIn = true;\n        this.username = yield response.text();\n      } else {\n        this.loggedIn = false;\n      }\n    })).catch(e => {\n      console.log(e);\n    });\n    const params = new URLSearchParams(window.location.search);\n    let reqInfo = (_a = params.get("originalRequestInfo")) === null || _a === void 0 ? void 0 : _a.toString();\n    if (reqInfo) {\n      this.originalRequestInfo = `&originalRequestInfo=${reqInfo}`;\n    }\n  }\n  // optional method called when user is changed\n  loggedInChanged(oldValue, newValue) {\n    console.log(newValue);\n  }\n};\n__decorate([attributes_attr, __metadata("design:type", Boolean)], LoginComponent.prototype, "loggedIn", void 0);\n__decorate([attributes_attr, __metadata("design:type", String)], LoginComponent.prototype, "sessionToken", void 0);\n__decorate([attributes_attr, __metadata("design:type", String)], LoginComponent.prototype, "username", void 0);\n__decorate([attributes_attr, __metadata("design:type", String)], LoginComponent.prototype, "originalRequestInfo", void 0);\nLoginComponent = __decorate([customElement({\n  name: \'login-component\',\n  template: loginTemplate,\n  styles: login_component_elementStyle\n}), __metadata("design:paramtypes", [])], LoginComponent);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar tslib_es6_extendStatics = function(d, b) {\r\n    tslib_es6_extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return tslib_es6_extendStatics(d, b);\r\n};\r\n\r\nfunction tslib_es6_extends(d, b) {\r\n    tslib_es6_extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar tslib_es6_assign = function() {\r\n    tslib_es6_assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return tslib_es6_assign.apply(this, arguments);\r\n}\r\n\r\nfunction tslib_es6_rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction tslib_es6_decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction tslib_es6_param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction tslib_es6_metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction tslib_es6_awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction tslib_es6_generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction tslib_es6_createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction tslib_es6_exportStar(m, exports) {\r\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction tslib_es6_values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction tslib_es6_read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction tslib_es6_spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(tslib_es6_read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction tslib_es6_spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction tslib_es6_await(v) {\r\n    return this instanceof tslib_es6_await ? (this.v = v, this) : new tslib_es6_await(v);\r\n}\r\n\r\nfunction tslib_es6_asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof tslib_es6_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction tslib_es6_asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: tslib_es6_await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction tslib_es6_asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof tslib_es6_values === "function" ? tslib_es6_values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction tslib_es6_makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction tslib_es6_importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction tslib_es6_importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction tslib_es6_classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to get private field on non-instance");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction tslib_es6_classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to set private field on non-instance");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/di/di.js\n/**\n * Big thanks to https://github.com/fkleuver and the https://github.com/aurelia/aurelia project\n * for the bulk of this code and many of the associated tests.\n */\n\n// Tiny polyfill for TypeScript\'s Reflect metadata API.\nconst metadataByTarget = new Map();\nif (!("metadata" in Reflect)) {\n    Reflect.metadata = function (key, value) {\n        return function (target) {\n            Reflect.defineMetadata(key, value, target);\n        };\n    };\n    Reflect.defineMetadata = function (key, value, target) {\n        let metadata = metadataByTarget.get(target);\n        if (metadata === void 0) {\n            metadataByTarget.set(target, (metadata = new Map()));\n        }\n        metadata.set(key, value);\n    };\n    Reflect.getOwnMetadata = function (key, target) {\n        const metadata = metadataByTarget.get(target);\n        if (metadata !== void 0) {\n            return metadata.get(key);\n        }\n        return void 0;\n    };\n}\n/**\n * A utility class used that constructs and registers resolvers for a dependency\n * injection container. Supports a standard set of object lifetimes.\n * @public\n */\nclass ResolverBuilder {\n    /**\n     *\n     * @param container - The container to create resolvers for.\n     * @param key - The key to register resolvers under.\n     */\n    constructor(container, key) {\n        this.container = container;\n        this.key = key;\n    }\n    /**\n     * Creates a resolver for an existing object instance.\n     * @param value - The instance to resolve.\n     * @returns The resolver.\n     */\n    instance(value) {\n        return this.registerResolver(0 /* instance */, value);\n    }\n    /**\n     * Creates a resolver that enforces a singleton lifetime.\n     * @param value - The type to create and cache the singleton for.\n     * @returns The resolver.\n     */\n    singleton(value) {\n        return this.registerResolver(1 /* singleton */, value);\n    }\n    /**\n     * Creates a resolver that creates a new instance for every dependency request.\n     * @param value - The type to create instances of.\n     * @returns - The resolver.\n     */\n    transient(value) {\n        return this.registerResolver(2 /* transient */, value);\n    }\n    /**\n     * Creates a resolver that invokes a callback function for every dependency resolution\n     * request, allowing custom logic to return the dependency.\n     * @param value - The callback to call during resolution.\n     * @returns The resolver.\n     */\n    callback(value) {\n        return this.registerResolver(3 /* callback */, value);\n    }\n    /**\n     * Creates a resolver that invokes a callback function the first time that a dependency\n     * resolution is requested. The returned value is then cached and provided for all\n     * subsequent requests.\n     * @param value - The callback to call during the first resolution.\n     * @returns The resolver.\n     */\n    cachedCallback(value) {\n        return this.registerResolver(3 /* callback */, cacheCallbackResult(value));\n    }\n    /**\n     * Aliases the current key to a different key.\n     * @param destinationKey - The key to point the alias to.\n     * @returns The resolver.\n     */\n    aliasTo(destinationKey) {\n        return this.registerResolver(5 /* alias */, destinationKey);\n    }\n    registerResolver(strategy, state) {\n        const { container, key } = this;\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        this.container = this.key = (void 0);\n        return container.registerResolver(key, new ResolverImpl(key, strategy, state));\n    }\n}\nfunction cloneArrayWithPossibleProps(source) {\n    const clone = source.slice();\n    const keys = Object.keys(source);\n    const len = keys.length;\n    let key;\n    for (let i = 0; i < len; ++i) {\n        key = keys[i];\n        if (!isArrayIndex(key)) {\n            clone[key] = source[key];\n        }\n    }\n    return clone;\n}\n/**\n * A set of default resolvers useful in configuring a container.\n * @public\n */\nconst DefaultResolver = Object.freeze({\n    /**\n     * Disables auto-registration and throws for all un-registered dependencies.\n     * @param key - The key to create the resolver for.\n     */\n    none(key) {\n        throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`);\n    },\n    /**\n     * Provides default singleton resolution behavior during auto-registration.\n     * @param key - The key to create the resolver for.\n     * @returns The resolver.\n     */\n    singleton(key) {\n        return new ResolverImpl(key, 1 /* singleton */, key);\n    },\n    /**\n     * Provides default transient resolution behavior during auto-registration.\n     * @param key - The key to create the resolver for.\n     * @returns The resolver.\n     */\n    transient(key) {\n        return new ResolverImpl(key, 2 /* transient */, key);\n    },\n});\n/**\n * Configuration for a dependency injection container.\n * @public\n */\nconst ContainerConfiguration = Object.freeze({\n    /**\n     * The default configuration used when creating a DOM-disconnected container.\n     * @remarks\n     * The default creates a root container, with no parent container. It does not handle\n     * owner requests and it uses singleton resolution behavior for auto-registration.\n     */\n    default: Object.freeze({\n        parentLocator: () => null,\n        responsibleForOwnerRequests: false,\n        defaultResolver: DefaultResolver.singleton,\n    }),\n});\nconst dependencyLookup = new Map();\nfunction getParamTypes(key) {\n    return (Type) => {\n        return Reflect.getOwnMetadata(key, Type);\n    };\n}\nlet rootDOMContainer = null;\n/**\n * The gateway to dependency injection APIs.\n * @public\n */\nconst DI = Object.freeze({\n    /**\n     * Creates a new dependency injection container.\n     * @param config - The configuration for the container.\n     * @returns A newly created dependency injection container.\n     */\n    createContainer(config) {\n        return new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config));\n    },\n    /**\n     * Finds the dependency injection container responsible for providing dependencies\n     * to the specified node.\n     * @param node - The node to find the responsible container for.\n     * @returns The container responsible for providing dependencies to the node.\n     * @remarks\n     * This will be the same as the parent container if the specified node\n     * does not itself host a container configured with responsibleForOwnerRequests.\n     */\n    findResponsibleContainer(node) {\n        const owned = node.$$container$$;\n        if (owned && owned.responsibleForOwnerRequests) {\n            return owned;\n        }\n        return DI.findParentContainer(node);\n    },\n    /**\n     * Find the dependency injection container up the DOM tree from this node.\n     * @param node - The node to find the parent container for.\n     * @returns The parent container of this node.\n     * @remarks\n     * This will be the same as the responsible container if the specified node\n     * does not itself host a container configured with responsibleForOwnerRequests.\n     */\n    findParentContainer(node) {\n        const event = new CustomEvent(DILocateParentEventType, {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            detail: { container: void 0 },\n        });\n        node.dispatchEvent(event);\n        return event.detail.container || DI.getOrCreateDOMContainer();\n    },\n    /**\n     * Returns a dependency injection container if one is explicitly owned by the specified\n     * node. If one is not owned, then a new container is created and assigned to the node.\n     * @param node - The node to find or create the container for.\n     * @param config - The configuration for the container if one needs to be created.\n     * @returns The located or created container.\n     * @remarks\n     * This API does not search for a responsible or parent container. It looks only for a container\n     * directly defined on the specified node and creates one at that location if one does not\n     * already exist.\n     */\n    getOrCreateDOMContainer(node, config) {\n        if (!node) {\n            return (rootDOMContainer ||\n                (rootDOMContainer = new ContainerImpl(null, Object.assign({}, ContainerConfiguration.default, config, {\n                    parentLocator: () => null,\n                }))));\n        }\n        return (node.$$container$$ ||\n            new ContainerImpl(node, Object.assign({}, ContainerConfiguration.default, config, {\n                parentLocator: DI.findParentContainer,\n            })));\n    },\n    /**\n     * Gets the "design:paramtypes" metadata for the specified type.\n     * @param Type - The type to get the metadata for.\n     * @returns The metadata array or undefined if no metadata is found.\n     */\n    getDesignParamtypes: getParamTypes("design:paramtypes"),\n    /**\n     * Gets the "di:paramtypes" metadata for the specified type.\n     * @param Type - The type to get the metadata for.\n     * @returns The metadata array or undefined if no metadata is found.\n     */\n    getAnnotationParamtypes: getParamTypes("di:paramtypes"),\n    /**\n     *\n     * @param Type - Gets the "di:paramtypes" metadata for the specified type. If none is found,\n     * an empty metadata array is created and added.\n     * @returns The metadata array.\n     */\n    getOrCreateAnnotationParamTypes(Type) {\n        let annotationParamtypes = this.getAnnotationParamtypes(Type);\n        if (annotationParamtypes === void 0) {\n            Reflect.defineMetadata("di:paramtypes", (annotationParamtypes = []), Type);\n        }\n        return annotationParamtypes;\n    },\n    /**\n     * Gets the dependency keys representing what is needed to instantiate the specified type.\n     * @param Type - The type to get the dependencies for.\n     * @returns An array of dependency keys.\n     */\n    getDependencies(Type) {\n        // Note: Every detail of this getDependencies method is pretty deliberate at the moment, and probably not yet 100% tested from every possible angle,\n        // so be careful with making changes here as it can have a huge impact on complex end user apps.\n        // Preferably, only make changes to the dependency resolution process via a RFC.\n        let dependencies = dependencyLookup.get(Type);\n        if (dependencies === void 0) {\n            // Type.length is the number of constructor parameters. If this is 0, it could mean the class has an empty constructor\n            // but it could also mean the class has no constructor at all (in which case it inherits the constructor from the prototype).\n            // Non-zero constructor length + no paramtypes means emitDecoratorMetadata is off, or the class has no decorator.\n            // We\'re not doing anything with the above right now, but it\'s good to keep in mind for any future issues.\n            const inject = Type.inject;\n            if (inject === void 0) {\n                // design:paramtypes is set by tsc when emitDecoratorMetadata is enabled.\n                const designParamtypes = DI.getDesignParamtypes(Type);\n                // di:paramtypes is set by the parameter decorator from DI.createInterface or by @inject\n                const annotationParamtypes = DI.getAnnotationParamtypes(Type);\n                if (designParamtypes === void 0) {\n                    if (annotationParamtypes === void 0) {\n                        // Only go up the prototype if neither static inject nor any of the paramtypes is defined, as\n                        // there is no sound way to merge a type\'s deps with its prototype\'s deps\n                        const Proto = Object.getPrototypeOf(Type);\n                        if (typeof Proto === "function" && Proto !== Function.prototype) {\n                            dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));\n                        }\n                        else {\n                            dependencies = [];\n                        }\n                    }\n                    else {\n                        // No design:paramtypes so just use the di:paramtypes\n                        dependencies = cloneArrayWithPossibleProps(annotationParamtypes);\n                    }\n                }\n                else if (annotationParamtypes === void 0) {\n                    // No di:paramtypes so just use the design:paramtypes\n                    dependencies = cloneArrayWithPossibleProps(designParamtypes);\n                }\n                else {\n                    // We\'ve got both, so merge them (in case of conflict on same index, di:paramtypes take precedence)\n                    dependencies = cloneArrayWithPossibleProps(designParamtypes);\n                    let len = annotationParamtypes.length;\n                    let auAnnotationParamtype;\n                    for (let i = 0; i < len; ++i) {\n                        auAnnotationParamtype = annotationParamtypes[i];\n                        if (auAnnotationParamtype !== void 0) {\n                            dependencies[i] = auAnnotationParamtype;\n                        }\n                    }\n                    const keys = Object.keys(annotationParamtypes);\n                    len = keys.length;\n                    let key;\n                    for (let i = 0; i < len; ++i) {\n                        key = keys[i];\n                        if (!isArrayIndex(key)) {\n                            dependencies[key] = annotationParamtypes[key];\n                        }\n                    }\n                }\n            }\n            else {\n                // Ignore paramtypes if we have static inject\n                dependencies = cloneArrayWithPossibleProps(inject);\n            }\n            dependencyLookup.set(Type, dependencies);\n        }\n        return dependencies;\n    },\n    /**\n     * Defines a property on a web component class. The value of this property will\n     * be resolved from the dependency injection container responsible for the element\n     * instance, based on where it is connected in the DOM.\n     * @param target - The target to define the property on.\n     * @param propertyName - The name of the property to define.\n     * @param key - The dependency injection key.\n     * @param respectConnection - Indicates whether or not to update the property value if the\n     * hosting component is disconnected and then re-connected at a different location in the DOM.\n     * @remarks\n     * The respectConnection option is only applicable to elements that descend from FASTElement.\n     */\n    defineProperty(target, propertyName, key, respectConnection = false) {\n        const diPropertyKey = `$di_${propertyName}`;\n        Reflect.defineProperty(target, propertyName, {\n            get: function () {\n                let value = this[diPropertyKey];\n                if (value === void 0) {\n                    const container = this instanceof HTMLElement\n                        ? DI.findResponsibleContainer(this)\n                        : DI.getOrCreateDOMContainer();\n                    value = container.get(key);\n                    this[diPropertyKey] = value;\n                    if (respectConnection && this instanceof FASTElement) {\n                        const notifier = this.$fastController;\n                        const handleChange = () => {\n                            const newContainer = DI.findResponsibleContainer(this);\n                            const newValue = newContainer.get(key);\n                            const oldValue = this[diPropertyKey];\n                            if (newValue !== oldValue) {\n                                this[diPropertyKey] = value;\n                                notifier.notify(propertyName);\n                            }\n                        };\n                        notifier.subscribe({ handleChange }, "isConnected");\n                    }\n                }\n                return value;\n            },\n        });\n    },\n    /**\n     * Creates a dependency injection key.\n     * @param nameConfigOrCallback - A friendly name for the key or a lambda that configures a\n     * default resolution for the dependency.\n     * @param configuror - If a friendly name was provided for the first parameter, then an optional\n     * lambda that configures a default resolution for the dependency can be provided second.\n     * @returns The created key.\n     * @remarks\n     * The created key can be used as a property decorator or constructor parameter decorator,\n     * in addition to its standard use in an inject array or through direct container APIs.\n     */\n    createInterface(nameConfigOrCallback, configuror) {\n        const configure = typeof nameConfigOrCallback === "function"\n            ? nameConfigOrCallback\n            : configuror;\n        const friendlyName = typeof nameConfigOrCallback === "string"\n            ? nameConfigOrCallback\n            : nameConfigOrCallback && "friendlyName" in nameConfigOrCallback\n                ? nameConfigOrCallback.friendlyName || defaultFriendlyName\n                : defaultFriendlyName;\n        const respectConnection = typeof nameConfigOrCallback === "string"\n            ? false\n            : nameConfigOrCallback && "respectConnection" in nameConfigOrCallback\n                ? nameConfigOrCallback.respectConnection || false\n                : false;\n        const Interface = function (target, property, index) {\n            if (target == null || new.target !== undefined) {\n                throw new Error(`No registration for interface: \'${Interface.friendlyName}\'`);\n            }\n            if (property) {\n                DI.defineProperty(target, property, Interface, respectConnection);\n            }\n            else {\n                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);\n                annotationParamtypes[index] = Interface;\n            }\n        };\n        Interface.$isInterface = true;\n        Interface.friendlyName = friendlyName == null ? "(anonymous)" : friendlyName;\n        if (configure != null) {\n            Interface.register = function (container, key) {\n                return configure(new ResolverBuilder(container, key !== null && key !== void 0 ? key : Interface));\n            };\n        }\n        Interface.toString = function toString() {\n            return `InterfaceSymbol<${Interface.friendlyName}>`;\n        };\n        return Interface;\n    },\n    /**\n     * A decorator that specifies what to inject into its target.\n     * @param dependencies - The dependencies to inject.\n     * @returns The decorator to be applied to the target class.\n     * @remarks\n     * The decorator can be used to decorate a class, listing all of the classes dependencies.\n     * Or it can be used to decorate a constructor paramter, indicating what to inject for that\n     * parameter.\n     * Or it can be used for a web component property, indicating what that property should resolve to.\n     */\n    inject(...dependencies) {\n        return function (target, key, descriptor) {\n            if (typeof descriptor === "number") {\n                // It\'s a parameter decorator.\n                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);\n                const dep = dependencies[0];\n                if (dep !== void 0) {\n                    annotationParamtypes[descriptor] = dep;\n                }\n            }\n            else if (key) {\n                DI.defineProperty(target, key, dependencies[0]);\n            }\n            else {\n                const annotationParamtypes = descriptor\n                    ? DI.getOrCreateAnnotationParamTypes(descriptor.value)\n                    : DI.getOrCreateAnnotationParamTypes(target);\n                let dep;\n                for (let i = 0; i < dependencies.length; ++i) {\n                    dep = dependencies[i];\n                    if (dep !== void 0) {\n                        annotationParamtypes[i] = dep;\n                    }\n                }\n            }\n        };\n    },\n    /**\n     * Registers the `target` class as a transient dependency; each time the dependency is resolved\n     * a new instance will be created.\n     *\n     * @param target - The class / constructor function to register as transient.\n     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n     *\n     * @example\n     * On an existing class\n     * ```ts\n     * class Foo { }\n     * DI.transient(Foo);\n     * ```\n     *\n     * @example\n     * Inline declaration\n     *\n     * ```ts\n     * const Foo = DI.transient(class { });\n     * // Foo is now strongly typed with register\n     * Foo.register(container);\n     * ```\n     *\n     * @public\n     */\n    transient(target) {\n        target.register = function register(container) {\n            const registration = Registration.transient(target, target);\n            return registration.register(container);\n        };\n        target.registerInRequestor = false;\n        return target;\n    },\n    /**\n     * Registers the `target` class as a singleton dependency; the class will only be created once. Each\n     * consecutive time the dependency is resolved, the same instance will be returned.\n     *\n     * @param target - The class / constructor function to register as a singleton.\n     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n     * @example\n     * On an existing class\n     * ```ts\n     * class Foo { }\n     * DI.singleton(Foo);\n     * ```\n     *\n     * @example\n     * Inline declaration\n     * ```ts\n     * const Foo = DI.singleton(class { });\n     * // Foo is now strongly typed with register\n     * Foo.register(container);\n     * ```\n     *\n     * @public\n     */\n    singleton(target, options = defaultSingletonOptions) {\n        target.register = function register(container) {\n            const registration = Registration.singleton(target, target);\n            return registration.register(container);\n        };\n        target.registerInRequestor = options.scoped;\n        return target;\n    },\n});\n/**\n * The interface key that resolves the dependency injection container itself.\n * @public\n */\nconst Container = DI.createInterface("Container");\n/**\n * The interface key that resolves the service locator itself.\n * @public\n */\nconst ServiceLocator = (/* unused pure expression or super */ null && (Container));\nfunction createResolver(getter) {\n    return function (key) {\n        const resolver = function (target, property, descriptor) {\n            DI.inject(resolver)(target, property, descriptor);\n        };\n        resolver.$isResolver = true;\n        resolver.resolve = function (handler, requestor) {\n            return getter(key, handler, requestor);\n        };\n        return resolver;\n    };\n}\n/**\n * A decorator that specifies what to inject into its target.\n * @param dependencies - The dependencies to inject.\n * @returns The decorator to be applied to the target class.\n * @remarks\n * The decorator can be used to decorate a class, listing all of the classes dependencies.\n * Or it can be used to decorate a constructor paramter, indicating what to inject for that\n * parameter.\n * Or it can be used for a web component property, indicating what that property should resolve to.\n *\n * @public\n */\nconst inject = DI.inject;\nfunction transientDecorator(target) {\n    return DI.transient(target);\n}\nfunction di_transient(target) {\n    return target == null ? transientDecorator : transientDecorator(target);\n}\nconst defaultSingletonOptions = { scoped: false };\nfunction singletonDecorator(target) {\n    return DI.singleton(target);\n}\n/**\n * @public\n */\nfunction singleton(targetOrOptions) {\n    if (typeof targetOrOptions === "function") {\n        return DI.singleton(targetOrOptions);\n    }\n    return function ($target) {\n        return DI.singleton($target, targetOrOptions);\n    };\n}\nfunction createAllResolver(getter) {\n    return function (key, searchAncestors) {\n        searchAncestors = !!searchAncestors;\n        const resolver = function (target, property, descriptor) {\n            DI.inject(resolver)(target, property, descriptor);\n        };\n        resolver.$isResolver = true;\n        resolver.resolve = function (handler, requestor) {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return getter(key, handler, requestor, searchAncestors);\n        };\n        return resolver;\n    };\n}\n/**\n * A decorator and DI resolver that will resolve an array of all dependencies\n * registered with the specified key.\n * @param key - The key to resolve all dependencies for.\n * @param searchAncestors - [optional] Indicates whether to search ancestor containers.\n * @public\n */\nconst di_all = createAllResolver((key, handler, requestor, searchAncestors) => requestor.getAll(key, searchAncestors));\n/**\n * A decorator that lazily injects a dependency depending on whether the `Key` is present at the time of function call.\n *\n * @example\n * You need to make your argument a function that returns the type, for example\n * ```ts\n * class Foo {\n *   constructor( @lazy(\'random\') public random: () => number )\n * }\n * const foo = container.get(Foo); // instanceof Foo\n * foo.random(); // throws\n * ```\n * would throw an exception because you haven\'t registered `\'random\'` before calling the method.\n * @example\n * This, would give you a new \'Math.random()\' number each time.\n * ```ts\n * class Foo {\n *   constructor( @lazy(\'random\') public random: () => random )\n * }\n * container.register(Registration.callback(\'random\', Math.random ));\n * container.get(Foo).random(); // some random number\n * container.get(Foo).random(); // another random number\n * ```\n *\n * `@lazy` does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a\n * `singleton`, `transient` would also behave as you would expect, providing you a new instance each time.\n *\n * @param key - The key to lazily resolve.\n * see {@link DI.createInterface} on interactions with interfaces\n *\n * @public\n */\nconst lazy = createResolver((key, handler, requestor) => {\n    return () => requestor.get(key);\n});\n/**\n * A decorator that allows you to optionally inject a dependency depending on whether the [[`Key`]] is present, for example:\n * @example\n * ```ts\n * class Foo {\n *   constructor( @inject(\'mystring\') public str: string = \'somestring\' )\n * }\n * container.get(Foo); // throws\n * ```\n * would fail\n *\n * @example\n * ```ts\n * class Foo {\n *   constructor( @optional(\'mystring\') public str: string = \'somestring\' )\n * }\n * container.get(Foo).str // somestring\n * ```\n * if you use it without a default it will inject `undefined`, so remember to mark your input type as\n * possibly `undefined`!\n *\n * @param key - The key to optionally resolve.\n * see {@link DI.createInterface} on interactions with interfaces\n *\n * @public\n */\nconst optional = createResolver((key, handler, requestor) => {\n    if (requestor.has(key, true)) {\n        return requestor.get(key);\n    }\n    else {\n        return undefined;\n    }\n});\n/**\n * A decorator that tells the container not to try to inject a dependency.\n *\n * @public\n */\nfunction ignore(target, property, descriptor) {\n    DI.inject(ignore)(target, property, descriptor);\n}\n// Hack: casting below used to prevent TS from generate a namespace which can\'t be commented\n// and results in documentation validation errors.\nignore.$isResolver = true;\nignore.resolve = () => undefined;\n/**\n * A decorator that indicates that a new instance should be injected scoped to the\n * container that requested the instance.\n * @param key - The dependency key for the new instance.\n * @remarks\n * This creates a resolver with an instance strategy pointing to the new instance, effectively\n * making this a singleton, scoped to the container or DOM\'s subtree.\n *\n * @public\n */\nconst newInstanceForScope = createResolver((key, handler, requestor) => {\n    const instance = createNewInstance(key, handler);\n    const resolver = new ResolverImpl(key, 0 /* instance */, instance);\n    requestor.registerResolver(key, resolver);\n    return instance;\n});\n/**\n * A decorator that indicates that a new instance should be injected.\n * @param key - The dependency key for the new instance.\n * @remarks\n * The instance is not internally cached with a resolver as newInstanceForScope does.\n *\n * @public\n */\nconst newInstanceOf = createResolver((key, handler, _requestor) => createNewInstance(key, handler));\nfunction createNewInstance(key, handler) {\n    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n    return handler.getFactory(key).construct(handler);\n}\n/** @internal */\nclass ResolverImpl {\n    constructor(key, strategy, state) {\n        this.key = key;\n        this.strategy = strategy;\n        this.state = state;\n        this.resolving = false;\n    }\n    get $isResolver() {\n        return true;\n    }\n    register(container) {\n        return container.registerResolver(this.key, this);\n    }\n    resolve(handler, requestor) {\n        switch (this.strategy) {\n            case 0 /* instance */:\n                return this.state;\n            case 1 /* singleton */: {\n                if (this.resolving) {\n                    throw new Error(`Cyclic dependency found: ${this.state.name}`);\n                }\n                this.resolving = true;\n                this.state = handler\n                    .getFactory(this.state)\n                    .construct(requestor);\n                this.strategy = 0 /* instance */;\n                this.resolving = false;\n                return this.state;\n            }\n            case 2 /* transient */: {\n                // Always create transients from the requesting container\n                const factory = handler.getFactory(this.state);\n                if (factory === null) {\n                    throw new Error(`Resolver for ${String(this.key)} returned a null factory`);\n                }\n                return factory.construct(requestor);\n            }\n            case 3 /* callback */:\n                return this.state(handler, requestor, this);\n            case 4 /* array */:\n                return this.state[0].resolve(handler, requestor);\n            case 5 /* alias */:\n                return requestor.get(this.state);\n            default:\n                throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`);\n        }\n    }\n    getFactory(container) {\n        var _a, _b, _c;\n        switch (this.strategy) {\n            case 1 /* singleton */:\n            case 2 /* transient */:\n                return container.getFactory(this.state);\n            case 5 /* alias */:\n                return (_c = (_b = (_a = container.getResolver(this.state)) === null || _a === void 0 ? void 0 : _a.getFactory) === null || _b === void 0 ? void 0 : _b.call(_a, container)) !== null && _c !== void 0 ? _c : null;\n            default:\n                return null;\n        }\n    }\n}\nfunction containerGetKey(d) {\n    return this.get(d);\n}\nfunction transformInstance(inst, transform) {\n    return transform(inst);\n}\n/** @internal */\nclass FactoryImpl {\n    constructor(Type, dependencies) {\n        this.Type = Type;\n        this.dependencies = dependencies;\n        this.transformers = null;\n    }\n    construct(container, dynamicDependencies) {\n        let instance;\n        if (dynamicDependencies === void 0) {\n            instance = new this.Type(...this.dependencies.map(containerGetKey, container));\n        }\n        else {\n            instance = new this.Type(...this.dependencies.map(containerGetKey, container), ...dynamicDependencies);\n        }\n        if (this.transformers == null) {\n            return instance;\n        }\n        return this.transformers.reduce(transformInstance, instance);\n    }\n    registerTransformer(transformer) {\n        (this.transformers || (this.transformers = [])).push(transformer);\n    }\n}\nconst containerResolver = {\n    $isResolver: true,\n    resolve(handler, requestor) {\n        return requestor;\n    },\n};\nfunction isRegistry(obj) {\n    return typeof obj.register === "function";\n}\nfunction isSelfRegistry(obj) {\n    return isRegistry(obj) && typeof obj.registerInRequestor === "boolean";\n}\nfunction isRegisterInRequester(obj) {\n    return isSelfRegistry(obj) && obj.registerInRequestor;\n}\nfunction isClass(obj) {\n    return obj.prototype !== void 0;\n}\nconst InstrinsicTypeNames = new Set([\n    "Array",\n    "ArrayBuffer",\n    "Boolean",\n    "DataView",\n    "Date",\n    "Error",\n    "EvalError",\n    "Float32Array",\n    "Float64Array",\n    "Function",\n    "Int8Array",\n    "Int16Array",\n    "Int32Array",\n    "Map",\n    "Number",\n    "Object",\n    "Promise",\n    "RangeError",\n    "ReferenceError",\n    "RegExp",\n    "Set",\n    "SharedArrayBuffer",\n    "String",\n    "SyntaxError",\n    "TypeError",\n    "Uint8Array",\n    "Uint8ClampedArray",\n    "Uint16Array",\n    "Uint32Array",\n    "URIError",\n    "WeakMap",\n    "WeakSet",\n]);\nconst DILocateParentEventType = "__DI_LOCATE_PARENT__";\nconst factories = new Map();\n/**\n * @internal\n */\nclass ContainerImpl {\n    constructor(owner, config) {\n        this.owner = owner;\n        this.config = config;\n        this._parent = void 0;\n        this.registerDepth = 0;\n        this.context = null;\n        if (owner !== null) {\n            owner.$$container$$ = this;\n        }\n        this.resolvers = new Map();\n        this.resolvers.set(Container, containerResolver);\n        if (owner instanceof Node) {\n            owner.addEventListener(DILocateParentEventType, (e) => {\n                if (e.composedPath()[0] !== this.owner) {\n                    e.detail.container = this;\n                    e.stopImmediatePropagation();\n                }\n            });\n        }\n    }\n    get parent() {\n        if (this._parent === void 0) {\n            this._parent = this.config.parentLocator(this.owner);\n        }\n        return this._parent;\n    }\n    get depth() {\n        return this.parent === null ? 0 : this.parent.depth + 1;\n    }\n    get responsibleForOwnerRequests() {\n        return this.config.responsibleForOwnerRequests;\n    }\n    registerWithContext(context, ...params) {\n        this.context = context;\n        this.register(...params);\n        this.context = null;\n        return this;\n    }\n    register(...params) {\n        if (++this.registerDepth === 100) {\n            throw new Error("Unable to autoregister dependency");\n            // Most likely cause is trying to register a plain object that does not have a\n            // register method and is not a class constructor\n        }\n        let current;\n        let keys;\n        let value;\n        let j;\n        let jj;\n        const context = this.context;\n        for (let i = 0, ii = params.length; i < ii; ++i) {\n            current = params[i];\n            if (!di_isObject(current)) {\n                continue;\n            }\n            if (isRegistry(current)) {\n                current.register(this, context);\n            }\n            else if (isClass(current)) {\n                Registration.singleton(current, current).register(this);\n            }\n            else {\n                keys = Object.keys(current);\n                j = 0;\n                jj = keys.length;\n                for (; j < jj; ++j) {\n                    value = current[keys[j]];\n                    if (!di_isObject(value)) {\n                        continue;\n                    }\n                    // note: we could remove this if-branch and call this.register directly\n                    // - the extra check is just a perf tweak to create fewer unnecessary arrays by the spread operator\n                    if (isRegistry(value)) {\n                        value.register(this, context);\n                    }\n                    else {\n                        this.register(value);\n                    }\n                }\n            }\n        }\n        --this.registerDepth;\n        return this;\n    }\n    registerResolver(key, resolver) {\n        validateKey(key);\n        const resolvers = this.resolvers;\n        const result = resolvers.get(key);\n        if (result == null) {\n            resolvers.set(key, resolver);\n        }\n        else if (result instanceof ResolverImpl &&\n            result.strategy === 4 /* array */) {\n            result.state.push(resolver);\n        }\n        else {\n            resolvers.set(key, new ResolverImpl(key, 4 /* array */, [result, resolver]));\n        }\n        return resolver;\n    }\n    registerTransformer(key, transformer) {\n        const resolver = this.getResolver(key);\n        if (resolver == null) {\n            return false;\n        }\n        if (resolver.getFactory) {\n            const factory = resolver.getFactory(this);\n            if (factory == null) {\n                return false;\n            }\n            // This type cast is a bit of a hacky one, necessary due to the duplicity of IResolverLike.\n            // Problem is that that interface\'s type arg can be of type Key, but the getFactory method only works on\n            // type Constructable. So the return type of that optional method has this additional constraint, which\n            // seems to confuse the type checker.\n            factory.registerTransformer(transformer);\n            return true;\n        }\n        return false;\n    }\n    getResolver(key, autoRegister = true) {\n        validateKey(key);\n        if (key.resolve !== void 0) {\n            return key;\n        }\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        let current = this;\n        let resolver;\n        while (current != null) {\n            resolver = current.resolvers.get(key);\n            if (resolver == null) {\n                if (current.parent == null) {\n                    const handler = isRegisterInRequester(key)\n                        ? this\n                        : current;\n                    return autoRegister ? this.jitRegister(key, handler) : null;\n                }\n                current = current.parent;\n            }\n            else {\n                return resolver;\n            }\n        }\n        return null;\n    }\n    has(key, searchAncestors = false) {\n        return this.resolvers.has(key)\n            ? true\n            : searchAncestors && this.parent != null\n                ? this.parent.has(key, true)\n                : false;\n    }\n    get(key) {\n        validateKey(key);\n        if (key.$isResolver) {\n            return key.resolve(this, this);\n        }\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        let current = this;\n        let resolver;\n        while (current != null) {\n            resolver = current.resolvers.get(key);\n            if (resolver == null) {\n                if (current.parent == null) {\n                    const handler = isRegisterInRequester(key)\n                        ? this\n                        : current;\n                    resolver = this.jitRegister(key, handler);\n                    return resolver.resolve(current, this);\n                }\n                current = current.parent;\n            }\n            else {\n                return resolver.resolve(current, this);\n            }\n        }\n        throw new Error(`Unable to resolve key: ${key}`);\n    }\n    getAll(key, searchAncestors = false) {\n        validateKey(key);\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        const requestor = this;\n        let current = requestor;\n        let resolver;\n        if (searchAncestors) {\n            let resolutions = emptyArray;\n            while (current != null) {\n                resolver = current.resolvers.get(key);\n                if (resolver != null) {\n                    resolutions = resolutions.concat(\n                    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n                    buildAllResponse(resolver, current, requestor));\n                }\n                current = current.parent;\n            }\n            return resolutions;\n        }\n        else {\n            while (current != null) {\n                resolver = current.resolvers.get(key);\n                if (resolver == null) {\n                    current = current.parent;\n                    if (current == null) {\n                        return emptyArray;\n                    }\n                }\n                else {\n                    return buildAllResponse(resolver, current, requestor);\n                }\n            }\n        }\n        return emptyArray;\n    }\n    getFactory(Type) {\n        let factory = factories.get(Type);\n        if (factory === void 0) {\n            if (isNativeFunction(Type)) {\n                throw new Error(`${Type.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);\n            }\n            factories.set(Type, (factory = new FactoryImpl(Type, DI.getDependencies(Type))));\n        }\n        return factory;\n    }\n    registerFactory(key, factory) {\n        factories.set(key, factory);\n    }\n    createChild(config) {\n        return new ContainerImpl(null, Object.assign({}, this.config, config, { parentLocator: () => this }));\n    }\n    jitRegister(keyAsValue, handler) {\n        if (typeof keyAsValue !== "function") {\n            throw new Error(`Attempted to jitRegister something that is not a constructor: \'${keyAsValue}\'. Did you forget to register this dependency?`);\n        }\n        if (InstrinsicTypeNames.has(keyAsValue.name)) {\n            throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);\n        }\n        if (isRegistry(keyAsValue)) {\n            const registrationResolver = keyAsValue.register(handler);\n            if (!(registrationResolver instanceof Object) ||\n                registrationResolver.resolve == null) {\n                const newResolver = handler.resolvers.get(keyAsValue);\n                if (newResolver != void 0) {\n                    return newResolver;\n                }\n                throw new Error("A valid resolver was not returned from the static register method");\n            }\n            return registrationResolver;\n        }\n        else if (keyAsValue.$isInterface) {\n            throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);\n        }\n        else {\n            const resolver = this.config.defaultResolver(keyAsValue, handler);\n            handler.resolvers.set(keyAsValue, resolver);\n            return resolver;\n        }\n    }\n}\nconst cache = new WeakMap();\nfunction cacheCallbackResult(fun) {\n    return function (handler, requestor, resolver) {\n        if (cache.has(resolver)) {\n            return cache.get(resolver);\n        }\n        const t = fun(handler, requestor, resolver);\n        cache.set(resolver, t);\n        return t;\n    };\n}\n/**\n * You can use the resulting Registration of any of the factory methods\n * to register with the container.\n *\n * @example\n * ```\n * class Foo {}\n * const container = DI.createContainer();\n * container.register(Registration.instance(Foo, new Foo()));\n * container.get(Foo);\n * ```\n *\n * @public\n */\nconst Registration = Object.freeze({\n    /**\n     * Allows you to pass an instance.\n     * Every time you request this {@link Key} you will get this instance back.\n     *\n     * @example\n     * ```\n     * Registration.instance(Foo, new Foo()));\n     * ```\n     *\n     * @param key - The key to register the instance under.\n     * @param value - The instance to return when the key is requested.\n     */\n    instance(key, value) {\n        return new ResolverImpl(key, 0 /* instance */, value);\n    },\n    /**\n     * Creates an instance from the class.\n     * Every time you request this {@link Key} you will get the same one back.\n     *\n     * @example\n     * ```\n     * Registration.singleton(Foo, Foo);\n     * ```\n     *\n     * @param key - The key to register the singleton under.\n     * @param value - The class to instantiate as a singleton when first requested.\n     */\n    singleton(key, value) {\n        return new ResolverImpl(key, 1 /* singleton */, value);\n    },\n    /**\n     * Creates an instance from a class.\n     * Every time you request this {@link Key} you will get a new instance.\n     *\n     * @example\n     * ```\n     * Registration.instance(Foo, Foo);\n     * ```\n     *\n     * @param key - The key to register the instance type under.\n     * @param value - The class to instantiate each time the key is requested.\n     */\n    transient(key, value) {\n        return new ResolverImpl(key, 2 /* transient */, value);\n    },\n    /**\n     * Delegates to a callback function to provide the dependency.\n     * Every time you request this {@link Key} the callback will be invoked to provide\n     * the dependency.\n     *\n     * @example\n     * ```\n     * Registration.callback(Foo, () => new Foo());\n     * Registration.callback(Bar, (c: Container) => new Bar(c.get(Foo)));\n     * ```\n     *\n     * @param key - The key to register the callback for.\n     * @param callback - The function that is expected to return the dependency.\n     */\n    callback(key, callback) {\n        return new ResolverImpl(key, 3 /* callback */, callback);\n    },\n    /**\n     * Delegates to a callback function to provide the dependency and then caches the\n     * dependency for future requests.\n     *\n     * @example\n     * ```\n     * Registration.cachedCallback(Foo, () => new Foo());\n     * Registration.cachedCallback(Bar, (c: Container) => new Bar(c.get(Foo)));\n     * ```\n     *\n     * @param key - The key to register the callback for.\n     * @param callback - The function that is expected to return the dependency.\n     * @remarks\n     * If you pass the same Registration to another container, the same cached value will be used.\n     * Should all references to the resolver returned be removed, the cache will expire.\n     */\n    cachedCallback(key, callback) {\n        return new ResolverImpl(key, 3 /* callback */, cacheCallbackResult(callback));\n    },\n    /**\n     * Creates an alternate {@link Key} to retrieve an instance by.\n     *\n     * @example\n     * ```\n     * Register.singleton(Foo, Foo)\n     * Register.aliasTo(Foo, MyFoos);\n     *\n     * container.getAll(MyFoos) // contains an instance of Foo\n     * ```\n     *\n     * @param originalKey - The original key that has been registered.\n     * @param aliasKey - The alias to the original key.\n     */\n    aliasTo(originalKey, aliasKey) {\n        return new ResolverImpl(aliasKey, 5 /* alias */, originalKey);\n    },\n});\n/** @internal */\nfunction validateKey(key) {\n    if (key === null || key === void 0) {\n        throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?");\n    }\n}\nfunction buildAllResponse(resolver, handler, requestor) {\n    if (resolver instanceof ResolverImpl &&\n        resolver.strategy === 4 /* array */) {\n        const state = resolver.state;\n        let i = state.length;\n        const results = new Array(i);\n        while (i--) {\n            results[i] = state[i].resolve(handler, requestor);\n        }\n        return results;\n    }\n    return [resolver.resolve(handler, requestor)];\n}\nconst defaultFriendlyName = "(anonymous)";\nfunction di_isObject(value) {\n    return (typeof value === "object" && value !== null) || typeof value === "function";\n}\n/**\n * Determine whether the value is a native function.\n *\n * @param fn - The function to check.\n * @returns `true` is the function is a native function, otherwise `false`\n */\nconst isNativeFunction = (function () {\n    const lookup = new WeakMap();\n    let isNative = false;\n    let sourceText = "";\n    let i = 0;\n    return function (fn) {\n        isNative = lookup.get(fn);\n        if (isNative === void 0) {\n            sourceText = fn.toString();\n            i = sourceText.length;\n            // http://www.ecma-international.org/ecma-262/#prod-NativeFunction\n            isNative =\n                // 29 is the length of \'function () { [native code] }\' which is the smallest length of a native function string\n                i >= 29 &&\n                    // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it\'s 56, in Edge it\'s 61.\n                    i <= 100 &&\n                    // This whole heuristic *could* be tricked by a comment. Do we need to care about that?\n                    sourceText.charCodeAt(i - 1) === 0x7d && // }\n                    // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.\n                    sourceText.charCodeAt(i - 2) <= 0x20 && // whitespace\n                    sourceText.charCodeAt(i - 3) === 0x5d && // ]\n                    sourceText.charCodeAt(i - 4) === 0x65 && // e\n                    sourceText.charCodeAt(i - 5) === 0x64 && // d\n                    sourceText.charCodeAt(i - 6) === 0x6f && // o\n                    sourceText.charCodeAt(i - 7) === 0x63 && // c\n                    sourceText.charCodeAt(i - 8) === 0x20 && //\n                    sourceText.charCodeAt(i - 9) === 0x65 && // e\n                    sourceText.charCodeAt(i - 10) === 0x76 && // v\n                    sourceText.charCodeAt(i - 11) === 0x69 && // i\n                    sourceText.charCodeAt(i - 12) === 0x74 && // t\n                    sourceText.charCodeAt(i - 13) === 0x61 && // a\n                    sourceText.charCodeAt(i - 14) === 0x6e && // n\n                    sourceText.charCodeAt(i - 15) === 0x58; // [\n            lookup.set(fn, isNative);\n        }\n        return isNative;\n    };\n})();\nconst isNumericLookup = {};\nfunction isArrayIndex(value) {\n    switch (typeof value) {\n        case "number":\n            return value >= 0 && (value | 0) === value;\n        case "string": {\n            const result = isNumericLookup[value];\n            if (result !== void 0) {\n                return result;\n            }\n            const length = value.length;\n            if (length === 0) {\n                return (isNumericLookup[value] = false);\n            }\n            let ch = 0;\n            for (let i = 0; i < length; ++i) {\n                ch = value.charCodeAt(i);\n                if ((i === 0 && ch === 0x30 && length > 1) /* must not start with 0 */ ||\n                    ch < 0x30 /* 0 */ ||\n                    ch > 0x39 /* 9 */) {\n                    return (isNumericLookup[value] = false);\n                }\n            }\n            return (isNumericLookup[value] = true);\n        }\n        default:\n            return false;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-system/component-presentation.js\n\n\nfunction presentationKeyFromTag(tagName) {\n    return `${tagName.toLowerCase()}:presentation`;\n}\nconst presentationRegistry = new Map();\n/**\n * An API gateway to component presentation features.\n * @public\n */\nconst ComponentPresentation = Object.freeze({\n    /**\n     * Defines a component presentation for an element.\n     * @param tagName - The element name to define the presentation for.\n     * @param presentation - The presentation that will be applied to matching elements.\n     * @param container - The dependency injection container to register the configuration in.\n     * @public\n     */\n    define(tagName, presentation, container) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === void 0) {\n            presentationRegistry.set(key, presentation);\n        }\n        else {\n            // false indicates that we have more than one presentation\n            // registered for a tagName and we must resolve through DI\n            presentationRegistry.set(key, false);\n        }\n        container.register(Registration.instance(key, presentation));\n    },\n    /**\n     * Finds a component presentation for the specified element name,\n     * searching the DOM hierarchy starting from the provided element.\n     * @param tagName - The name of the element to locate the presentation for.\n     * @param element - The element to begin the search from.\n     * @returns The component presentation or null if none is found.\n     * @public\n     */\n    forTag(tagName, element) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === false) {\n            const container = DI.findResponsibleContainer(element);\n            return container.get(key);\n        }\n        return existing || null;\n    },\n});\n/**\n * The default implementation of ComponentPresentation, used by FoundationElement.\n * @public\n */\nclass DefaultComponentPresentation {\n    /**\n     * Creates an instance of DefaultComponentPresentation.\n     * @param template - The template to apply to the element.\n     * @param styles - The styles to apply to the element.\n     * @public\n     */\n    constructor(template, styles) {\n        this.template = template || null;\n        this.styles =\n            styles === void 0\n                ? null\n                : Array.isArray(styles)\n                    ? ElementStyles.create(styles)\n                    : styles instanceof ElementStyles\n                        ? styles\n                        : ElementStyles.create([styles]);\n    }\n    /**\n     * Applies the presentation details to the specified element.\n     * @param element - The element to apply the presentation details to.\n     * @public\n     */\n    applyTo(element) {\n        const controller = element.$fastController;\n        if (controller.template === null) {\n            controller.template = this.template;\n        }\n        if (controller.styles === null) {\n            controller.styles = this.styles;\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/foundation-element/foundation-element.js\n\n\n\n/**\n * Defines a foundation element class that:\n * 1. Connects the element to its ComponentPresentation\n * 2. Allows resolving the element template from the instance or ComponentPresentation\n * 3. Allows resolving the element styles from the instance or ComponentPresentation\n *\n * @public\n */\nclass FoundationElement extends FASTElement {\n    constructor() {\n        super(...arguments);\n        this._presentation = void 0;\n    }\n    /**\n     * A property which resolves the ComponentPresentation instance\n     * for the current component.\n     * @public\n     */\n    get $presentation() {\n        if (this._presentation === void 0) {\n            this._presentation = ComponentPresentation.forTag(this.tagName, this);\n        }\n        return this._presentation;\n    }\n    templateChanged() {\n        if (this.template !== undefined) {\n            this.$fastController.template = this.template;\n        }\n    }\n    stylesChanged() {\n        if (this.styles !== undefined) {\n            this.$fastController.styles = this.styles;\n        }\n    }\n    /**\n     * The connected callback for this FASTElement.\n     * @remarks\n     * This method is invoked by the platform whenever this FoundationElement\n     * becomes connected to the document.\n     * @public\n     */\n    connectedCallback() {\n        if (this.$presentation !== null) {\n            this.$presentation.applyTo(this);\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Defines an element registry function with a set of element definition defaults.\n     * @param elementDefinition - The definition of the element to create the registry\n     * function for.\n     * @public\n     */\n    static compose(elementDefinition) {\n        return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement\n            ? class extends FoundationElement {\n            }\n            : this, elementDefinition, overrideDefinition);\n    }\n}\ntslib_es6_decorate([\n    observable_observable\n], FoundationElement.prototype, "template", void 0);\ntslib_es6_decorate([\n    observable_observable\n], FoundationElement.prototype, "styles", void 0);\nfunction resolveOption(option, context, definition) {\n    if (typeof option === "function") {\n        return option(context, definition);\n    }\n    return option;\n}\n/**\n * Registry capable of defining presentation properties for a DOM Container hierarchy.\n *\n * @internal\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nclass FoundationElementRegistry {\n    constructor(type, elementDefinition, overrideDefinition) {\n        this.type = type;\n        this.elementDefinition = elementDefinition;\n        this.overrideDefinition = overrideDefinition;\n        this.definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);\n    }\n    register(container, context) {\n        const definition = this.definition;\n        const overrideDefinition = this.overrideDefinition;\n        const prefix = definition.prefix || context.elementPrefix;\n        const name = `${prefix}-${definition.baseName}`;\n        context.tryDefineElement({\n            name,\n            type: this.type,\n            baseClass: this.elementDefinition.baseClass,\n            callback: x => {\n                const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x, definition), resolveOption(definition.styles, x, definition));\n                x.definePresentation(presentation);\n                let shadowOptions = resolveOption(definition.shadowOptions, x, definition);\n                if (x.shadowRootMode) {\n                    // If the design system has overridden the shadow root mode, we need special handling.\n                    if (shadowOptions) {\n                        // If there are shadow options present in the definition, then\n                        // either the component itself has specified an option or the\n                        // registry function has overridden it.\n                        if (!overrideDefinition.shadowOptions) {\n                            // There were shadow options provided by the component and not overridden by\n                            // the registry.\n                            shadowOptions.mode = x.shadowRootMode;\n                        }\n                    }\n                    else if (shadowOptions !== null) {\n                        // If the component author did not provide shadow options,\n                        // and did not null them out (light dom opt-in) then they\n                        // were relying on the FASTElement default. So, if the\n                        // design system provides a mode, we need to create the options\n                        // to override the default.\n                        shadowOptions = { mode: x.shadowRootMode };\n                    }\n                }\n                x.defineElement({\n                    elementOptions: resolveOption(definition.elementOptions, x, definition),\n                    shadowOptions,\n                    attributes: resolveOption(definition.attributes, x, definition),\n                });\n            },\n        });\n    }\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/composed-parent.js\n/**\n * Retrieves the "composed parent" element of a node, ignoring DOM tree boundaries.\n * When the parent of a node is a shadow-root, it will return the host\n * element of the shadow root. Otherwise it will return the parent node or null if\n * no parent node exists.\n * @param element - The element for which to retrieve the composed parent\n *\n * @public\n */\nfunction composedParent(element) {\n    const parentNode = element.parentElement;\n    if (parentNode) {\n        return parentNode;\n    }\n    else {\n        const rootNode = element.getRootNode();\n        if (rootNode.host instanceof HTMLElement) {\n            // this is shadow-root\n            return rootNode.host;\n        }\n    }\n    return null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/composed-contains.js\n\n/**\n * Determines if the reference element contains the test element in a "composed" DOM tree that\n * ignores shadow DOM boundaries.\n *\n * Returns true of the test element is a descendent of the reference, or exist in\n * a shadow DOM that is a logical descendent of the reference. Otherwise returns false.\n * @param reference - The element to test for containment against.\n * @param test - The element being tested for containment.\n *\n * @public\n */\nfunction composedContains(reference, test) {\n    let current = test;\n    while (current !== null) {\n        if (current === reference) {\n            return true;\n        }\n        current = composedParent(current);\n    }\n    return false;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-token/custom-property-manager.js\n\n\nconst defaultElement = document.createElement("div");\nfunction isFastElement(element) {\n    return element instanceof FASTElement;\n}\nclass QueuedStyleSheetTarget {\n    setProperty(name, value) {\n        DOM.queueUpdate(() => this.target.setProperty(name, value));\n    }\n    removeProperty(name) {\n        DOM.queueUpdate(() => this.target.removeProperty(name));\n    }\n}\n/**\n * Handles setting properties for a FASTElement using Constructable Stylesheets\n */\nclass ConstructableStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor(source) {\n        super();\n        const sheet = new CSSStyleSheet();\n        this.target = sheet.cssRules[sheet.insertRule(":host{}")].style;\n        source.$fastController.addStyles(ElementStyles.create([sheet]));\n    }\n}\nclass DocumentStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor() {\n        super();\n        const sheet = new CSSStyleSheet();\n        this.target = sheet.cssRules[sheet.insertRule(":root{}")].style;\n        document.adoptedStyleSheets = [\n            ...document.adoptedStyleSheets,\n            sheet,\n        ];\n    }\n}\nclass HeadStyleElementStyleSheetTarget extends QueuedStyleSheetTarget {\n    constructor() {\n        super();\n        this.style = document.createElement("style");\n        document.head.appendChild(this.style);\n        const { sheet } = this.style;\n        // Because the HTMLStyleElement has been appended,\n        // there shouldn\'t exist a case where `sheet` is null,\n        // but if-check it just in case.\n        if (sheet) {\n            // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it\'s CSSOM implementation,\n            // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.\n            const index = sheet.insertRule(":root{}", sheet.cssRules.length);\n            this.target = sheet.cssRules[index].style;\n        }\n    }\n}\n/**\n * Handles setting properties for a FASTElement using an HTMLStyleElement\n */\nclass StyleElementStyleSheetTarget {\n    constructor(target) {\n        this.store = new Map();\n        this.target = null;\n        const controller = target.$fastController;\n        this.style = document.createElement("style");\n        controller.addStyles(this.style);\n        Observable.getNotifier(controller).subscribe(this, "isConnected");\n        this.handleChange(controller, "isConnected");\n    }\n    targetChanged() {\n        if (this.target !== null) {\n            for (const [key, value] of this.store.entries()) {\n                this.target.setProperty(key, value);\n            }\n        }\n    }\n    setProperty(name, value) {\n        this.store.set(name, value);\n        DOM.queueUpdate(() => {\n            if (this.target !== null) {\n                this.target.setProperty(name, value);\n            }\n        });\n    }\n    removeProperty(name) {\n        this.store.delete(name);\n        DOM.queueUpdate(() => {\n            if (this.target !== null) {\n                this.target.removeProperty(name);\n            }\n        });\n    }\n    handleChange(source, key) {\n        // HTMLStyleElement.sheet is null if the element isn\'t connected to the DOM,\n        // so this method reacts to changes in DOM connection for the element hosting\n        // the HTMLStyleElement.\n        //\n        // All rules applied via the CSSOM also get cleared when the element disconnects,\n        // so we need to add a new rule each time and populate it with the stored properties\n        const { sheet } = this.style;\n        if (sheet) {\n            // Safari will throw if we try to use the return result of insertRule()\n            // to index the rule inline, so store as a const prior to indexing.\n            // https://github.com/jsdom/jsdom uses https://github.com/NV/CSSOM for it\'s CSSOM implementation,\n            // which implements the DOM Level 2 spec for CSSStyleSheet where insertRule() requires an index argument.\n            const index = sheet.insertRule(":host{}", sheet.cssRules.length);\n            this.target = sheet.cssRules[index].style;\n        }\n        else {\n            this.target = null;\n        }\n    }\n}\ntslib_es6_decorate([\n    observable_observable\n], StyleElementStyleSheetTarget.prototype, "target", void 0);\n/**\n * Handles setting properties for a normal HTMLElement\n */\nclass ElementStyleSheetTarget {\n    constructor(source) {\n        this.target = source.style;\n    }\n    setProperty(name, value) {\n        DOM.queueUpdate(() => this.target.setProperty(name, value));\n    }\n    removeProperty(name) {\n        DOM.queueUpdate(() => this.target.removeProperty(name));\n    }\n}\n/**\n * Controls emission for default values. This control is capable\n * of emitting to multiple {@link PropertyTarget | PropertyTargets},\n * and only emits if it has at least one root.\n *\n * @internal\n */\nclass RootStyleSheetTarget {\n    setProperty(name, value) {\n        RootStyleSheetTarget.properties[name] = value;\n        for (const target of RootStyleSheetTarget.roots.values()) {\n            PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).setProperty(name, value);\n        }\n    }\n    removeProperty(name) {\n        delete RootStyleSheetTarget.properties[name];\n        for (const target of RootStyleSheetTarget.roots.values()) {\n            PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(target)).removeProperty(name);\n        }\n    }\n    static registerRoot(root) {\n        const { roots } = RootStyleSheetTarget;\n        if (!roots.has(root)) {\n            roots.add(root);\n            const target = PropertyTargetManager.getOrCreate(this.normalizeRoot(root));\n            for (const key in RootStyleSheetTarget.properties) {\n                target.setProperty(key, RootStyleSheetTarget.properties[key]);\n            }\n        }\n    }\n    static unregisterRoot(root) {\n        const { roots } = RootStyleSheetTarget;\n        if (roots.has(root)) {\n            roots.delete(root);\n            const target = PropertyTargetManager.getOrCreate(RootStyleSheetTarget.normalizeRoot(root));\n            for (const key in RootStyleSheetTarget.properties) {\n                target.removeProperty(key);\n            }\n        }\n    }\n    /**\n     * Returns the document when provided the default element,\n     * otherwise is a no-op\n     * @param root - the root to normalize\n     */\n    static normalizeRoot(root) {\n        return root === defaultElement ? document : root;\n    }\n}\nRootStyleSheetTarget.roots = new Set();\nRootStyleSheetTarget.properties = {};\n// Caches PropertyTarget instances\nconst propertyTargetCache = new WeakMap();\n// Use Constructable StyleSheets for FAST elements when supported, otherwise use\n// HTMLStyleElement instances\nconst propertyTargetCtor = DOM.supportsAdoptedStyleSheets\n    ? ConstructableStyleSheetTarget\n    : StyleElementStyleSheetTarget;\n/**\n * Manages creation and caching of PropertyTarget instances.\n *\n * @internal\n */\nconst PropertyTargetManager = Object.freeze({\n    getOrCreate(source) {\n        if (propertyTargetCache.has(source)) {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return propertyTargetCache.get(source);\n        }\n        let target;\n        if (source === defaultElement) {\n            target = new RootStyleSheetTarget();\n        }\n        else if (source instanceof Document) {\n            target = DOM.supportsAdoptedStyleSheets\n                ? new DocumentStyleSheetTarget()\n                : new HeadStyleElementStyleSheetTarget();\n        }\n        else if (isFastElement(source)) {\n            target = new propertyTargetCtor(source);\n        }\n        else {\n            target = new ElementStyleSheetTarget(source);\n        }\n        propertyTargetCache.set(source, target);\n        return target;\n    },\n});\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-token/design-token.js\n\n\n\n\n\n\n/**\n * Implementation of {@link (DesignToken:interface)}\n */\nclass DesignTokenImpl extends CSSDirective {\n    constructor(configuration) {\n        super();\n        this.subscribers = new WeakMap();\n        this._appliedTo = new Set();\n        this.name = configuration.name;\n        if (configuration.cssCustomPropertyName !== null) {\n            this.cssCustomProperty = `--${configuration.cssCustomPropertyName}`;\n            this.cssVar = `var(${this.cssCustomProperty})`;\n        }\n        this.id = DesignTokenImpl.uniqueId();\n        DesignTokenImpl.tokensById.set(this.id, this);\n    }\n    get appliedTo() {\n        return [...this._appliedTo];\n    }\n    static from(nameOrConfig) {\n        return new DesignTokenImpl({\n            name: typeof nameOrConfig === "string" ? nameOrConfig : nameOrConfig.name,\n            cssCustomPropertyName: typeof nameOrConfig === "string"\n                ? nameOrConfig\n                : nameOrConfig.cssCustomPropertyName === void 0\n                    ? nameOrConfig.name\n                    : nameOrConfig.cssCustomPropertyName,\n        });\n    }\n    static isCSSDesignToken(token) {\n        return typeof token.cssCustomProperty === "string";\n    }\n    static isDerivedDesignTokenValue(value) {\n        return typeof value === "function";\n    }\n    /**\n     * Gets a token by ID. Returns undefined if the token was not found.\n     * @param id - The ID of the token\n     * @returns\n     */\n    static getTokenById(id) {\n        return DesignTokenImpl.tokensById.get(id);\n    }\n    getOrCreateSubscriberSet(target = this) {\n        return (this.subscribers.get(target) ||\n            (this.subscribers.set(target, new Set()) && this.subscribers.get(target)));\n    }\n    createCSS() {\n        return this.cssVar || "";\n    }\n    getValueFor(element) {\n        const value = DesignTokenNode.getOrCreate(element).get(this);\n        if (value !== undefined) {\n            return value;\n        }\n        throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${element} or an ancestor of ${element}.`);\n    }\n    setValueFor(element, value) {\n        this._appliedTo.add(element);\n        if (value instanceof DesignTokenImpl) {\n            value = this.alias(value);\n        }\n        DesignTokenNode.getOrCreate(element).set(this, value);\n        return this;\n    }\n    deleteValueFor(element) {\n        this._appliedTo.delete(element);\n        if (DesignTokenNode.existsFor(element)) {\n            DesignTokenNode.getOrCreate(element).delete(this);\n        }\n        return this;\n    }\n    withDefault(value) {\n        this.setValueFor(defaultElement, value);\n        return this;\n    }\n    subscribe(subscriber, target) {\n        const subscriberSet = this.getOrCreateSubscriberSet(target);\n        if (target && !DesignTokenNode.existsFor(target)) {\n            DesignTokenNode.getOrCreate(target);\n        }\n        if (!subscriberSet.has(subscriber)) {\n            subscriberSet.add(subscriber);\n        }\n    }\n    unsubscribe(subscriber, target) {\n        const list = this.subscribers.get(target || this);\n        if (list && list.has(subscriber)) {\n            list.delete(subscriber);\n        }\n    }\n    /**\n     * Notifies subscribers that the value for an element has changed.\n     * @param element - The element to emit a notification for\n     */\n    notify(element) {\n        const record = Object.freeze({ token: this, target: element });\n        if (this.subscribers.has(this)) {\n            this.subscribers.get(this).forEach(sub => sub.handleChange(record));\n        }\n        if (this.subscribers.has(element)) {\n            this.subscribers.get(element).forEach(sub => sub.handleChange(record));\n        }\n    }\n    /**\n     * Alias the token to the provided token.\n     * @param token - the token to alias to\n     */\n    alias(token) {\n        return ((target) => token.getValueFor(target));\n    }\n}\nDesignTokenImpl.uniqueId = (() => {\n    let id = 0;\n    return () => {\n        id++;\n        return id.toString(16);\n    };\n})();\n/**\n * Token storage by token ID\n */\nDesignTokenImpl.tokensById = new Map();\nclass CustomPropertyReflector {\n    startReflection(token, target) {\n        token.subscribe(this, target);\n        this.handleChange({ token, target });\n    }\n    stopReflection(token, target) {\n        token.unsubscribe(this, target);\n        this.remove(token, target);\n    }\n    handleChange(record) {\n        const { token, target } = record;\n        this.add(token, target);\n    }\n    add(token, target) {\n        PropertyTargetManager.getOrCreate(target).setProperty(token.cssCustomProperty, this.resolveCSSValue(DesignTokenNode.getOrCreate(target).get(token)));\n    }\n    remove(token, target) {\n        PropertyTargetManager.getOrCreate(target).removeProperty(token.cssCustomProperty);\n    }\n    resolveCSSValue(value) {\n        return value && typeof value.createCSS === "function" ? value.createCSS() : value;\n    }\n}\n/**\n * A light wrapper around BindingObserver to handle value caching and\n * token notification\n */\nclass DesignTokenBindingObserver {\n    constructor(source, token, node) {\n        this.source = source;\n        this.token = token;\n        this.node = node;\n        this.dependencies = new Set();\n        this.observer = Observable.binding(source, this, false);\n        // This is a little bit hacky because it\'s using internal APIs of BindingObserverImpl.\n        // BindingObserverImpl queues updates to batch it\'s notifications which doesn\'t work for this\n        // scenario because the DesignToken.getValueFor API is not async. Without this, using DesignToken.getValueFor()\n        // after DesignToken.setValueFor() when setting a dependency of the value being retrieved can return a stale\n        // value. Assigning .handleChange to .call forces immediate invocation of this classes handleChange() method,\n        // allowing resolution of values synchronously.\n        // TODO: https://github.com/microsoft/fast/issues/5110\n        this.observer.handleChange = this.observer.call;\n        this.handleChange();\n    }\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * @internal\n     */\n    handleChange() {\n        this.node.store.set(this.token, this.observer.observe(this.node.target, defaultExecutionContext));\n    }\n}\n/**\n * Stores resolved token/value pairs and notifies on changes\n */\nclass Store {\n    constructor() {\n        this.values = new Map();\n    }\n    set(token, value) {\n        if (this.values.get(token) !== value) {\n            this.values.set(token, value);\n            Observable.getNotifier(this).notify(token.id);\n        }\n    }\n    get(token) {\n        Observable.track(this, token.id);\n        return this.values.get(token);\n    }\n    delete(token) {\n        this.values.delete(token);\n    }\n    all() {\n        return this.values.entries();\n    }\n}\nconst nodeCache = new WeakMap();\nconst childToParent = new WeakMap();\n/**\n * A node responsible for setting and getting token values,\n * emitting values to CSS custom properties, and maintaining\n * inheritance structures.\n */\nclass DesignTokenNode {\n    constructor(target) {\n        this.target = target;\n        /**\n         * Stores all resolved token values for a node\n         */\n        this.store = new Store();\n        /**\n         * All children assigned to the node\n         */\n        this.children = [];\n        /**\n         * All values explicitly assigned to the node in their raw form\n         */\n        this.assignedValues = new Map();\n        /**\n         * Tokens currently being reflected to CSS custom properties\n         */\n        this.reflecting = new Set();\n        /**\n         * Binding observers for assigned and inherited derived values.\n         */\n        this.bindingObservers = new Map();\n        /**\n         * Emits notifications to token when token values\n         * change the DesignTokenNode\n         */\n        this.tokenValueChangeHandler = {\n            handleChange: (source, arg) => {\n                const token = DesignTokenImpl.getTokenById(arg);\n                if (token) {\n                    // Notify any token subscribers\n                    token.notify(this.target);\n                    if (DesignTokenImpl.isCSSDesignToken(token)) {\n                        const parent = this.parent;\n                        const reflecting = this.isReflecting(token);\n                        if (parent) {\n                            const parentValue = parent.get(token);\n                            const sourceValue = source.get(token);\n                            if (parentValue !== sourceValue && !reflecting) {\n                                this.reflectToCSS(token);\n                            }\n                            else if (parentValue === sourceValue && reflecting) {\n                                this.stopReflectToCSS(token);\n                            }\n                        }\n                        else if (!reflecting) {\n                            this.reflectToCSS(token);\n                        }\n                    }\n                }\n            },\n        };\n        nodeCache.set(target, this);\n        // Map store change notifications to token change notifications\n        Observable.getNotifier(this.store).subscribe(this.tokenValueChangeHandler);\n        if (target instanceof FASTElement) {\n            target.$fastController.addBehaviors([this]);\n        }\n        else if (target.isConnected) {\n            this.bind();\n        }\n    }\n    /**\n     * Returns a DesignTokenNode for an element.\n     * Creates a new instance if one does not already exist for a node,\n     * otherwise returns the cached instance\n     *\n     * @param target - The HTML element to retrieve a DesignTokenNode for\n     */\n    static getOrCreate(target) {\n        return nodeCache.get(target) || new DesignTokenNode(target);\n    }\n    /**\n     * Determines if a DesignTokenNode has been created for a target\n     * @param target - The element to test\n     */\n    static existsFor(target) {\n        return nodeCache.has(target);\n    }\n    /**\n     * Searches for and return the nearest parent DesignTokenNode.\n     * Null is returned if no node is found or the node provided is for a default element.\n     */\n    static findParent(node) {\n        if (!(defaultElement === node.target)) {\n            let parent = composedParent(node.target);\n            while (parent !== null) {\n                if (nodeCache.has(parent)) {\n                    return nodeCache.get(parent);\n                }\n                parent = composedParent(parent);\n            }\n            return DesignTokenNode.getOrCreate(defaultElement);\n        }\n        return null;\n    }\n    /**\n     * Finds the closest node with a value explicitly assigned for a token, otherwise null.\n     * @param token - The token to look for\n     * @param start - The node to start looking for value assignment\n     * @returns\n     */\n    static findClosestAssignedNode(token, start) {\n        let current = start;\n        do {\n            if (current.has(token)) {\n                return current;\n            }\n            current = current.parent\n                ? current.parent\n                : current.target !== defaultElement\n                    ? DesignTokenNode.getOrCreate(defaultElement)\n                    : null;\n        } while (current !== null);\n        return null;\n    }\n    /**\n     * The parent DesignTokenNode, or null.\n     */\n    get parent() {\n        return childToParent.get(this) || null;\n    }\n    /**\n     * Checks if a token has been assigned an explicit value the node.\n     * @param token - the token to check.\n     */\n    has(token) {\n        return this.assignedValues.has(token);\n    }\n    /**\n     * Gets the value of a token for a node\n     * @param token - The token to retrieve the value for\n     * @returns\n     */\n    get(token) {\n        const value = this.store.get(token);\n        if (value !== undefined) {\n            return value;\n        }\n        const raw = this.getRaw(token);\n        if (raw !== undefined) {\n            this.hydrate(token, raw);\n            return this.get(token);\n        }\n    }\n    /**\n     * Retrieves the raw assigned value of a token from the nearest assigned node.\n     * @param token - The token to retrieve a raw value for\n     * @returns\n     */\n    getRaw(token) {\n        var _a;\n        if (this.assignedValues.has(token)) {\n            return this.assignedValues.get(token);\n        }\n        return (_a = DesignTokenNode.findClosestAssignedNode(token, this)) === null || _a === void 0 ? void 0 : _a.getRaw(token);\n    }\n    /**\n     * Sets a token to a value for a node\n     * @param token - The token to set\n     * @param value - The value to set the token to\n     */\n    set(token, value) {\n        if (DesignTokenImpl.isDerivedDesignTokenValue(this.assignedValues.get(token))) {\n            this.tearDownBindingObserver(token);\n        }\n        this.assignedValues.set(token, value);\n        if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {\n            this.setupBindingObserver(token, value);\n        }\n        else {\n            this.store.set(token, value);\n        }\n    }\n    /**\n     * Deletes a token value for the node.\n     * @param token - The token to delete the value for\n     */\n    delete(token) {\n        this.assignedValues.delete(token);\n        this.tearDownBindingObserver(token);\n        const upstream = this.getRaw(token);\n        if (upstream) {\n            this.hydrate(token, upstream);\n        }\n        else {\n            this.store.delete(token);\n        }\n    }\n    /**\n     * Invoked when the DesignTokenNode.target is attached to the document\n     */\n    bind() {\n        const parent = DesignTokenNode.findParent(this);\n        if (parent) {\n            parent.appendChild(this);\n        }\n        for (const key of this.assignedValues.keys()) {\n            key.notify(this.target);\n        }\n    }\n    /**\n     * Invoked when the DesignTokenNode.target is detached from the document\n     */\n    unbind() {\n        if (this.parent) {\n            const parent = childToParent.get(this);\n            parent.removeChild(this);\n        }\n    }\n    /**\n     * Appends a child to a parent DesignTokenNode.\n     * @param child - The child to append to the node\n     */\n    appendChild(child) {\n        if (child.parent) {\n            childToParent.get(child).removeChild(child);\n        }\n        const reParent = this.children.filter(x => child.contains(x));\n        childToParent.set(child, this);\n        this.children.push(child);\n        reParent.forEach(x => child.appendChild(x));\n        Observable.getNotifier(this.store).subscribe(child);\n        // How can we not notify *every* subscriber?\n        for (const [token, value] of this.store.all()) {\n            child.hydrate(token, this.bindingObservers.has(token) ? this.getRaw(token) : value);\n        }\n    }\n    /**\n     * Removes a child from a node.\n     * @param child - The child to remove.\n     */\n    removeChild(child) {\n        const childIndex = this.children.indexOf(child);\n        if (childIndex !== -1) {\n            this.children.splice(childIndex, 1);\n        }\n        Observable.getNotifier(this.store).unsubscribe(child);\n        return child.parent === this ? childToParent.delete(child) : false;\n    }\n    /**\n     * Tests whether a provided node is contained by\n     * the calling node.\n     * @param test - The node to test\n     */\n    contains(test) {\n        return composedContains(this.target, test.target);\n    }\n    /**\n     * Instructs the node to reflect a design token for the provided token.\n     * @param token - The design token to reflect\n     */\n    reflectToCSS(token) {\n        if (!this.isReflecting(token)) {\n            this.reflecting.add(token);\n            DesignTokenNode.cssCustomPropertyReflector.startReflection(token, this.target);\n        }\n    }\n    /**\n     * Stops reflecting a DesignToken to CSS\n     * @param token - The design token to stop reflecting\n     */\n    stopReflectToCSS(token) {\n        if (this.isReflecting(token)) {\n            this.reflecting.delete(token);\n            DesignTokenNode.cssCustomPropertyReflector.stopReflection(token, this.target);\n        }\n    }\n    /**\n     * Determines if a token is being reflected to CSS for a node.\n     * @param token - The token to check for reflection\n     * @returns\n     */\n    isReflecting(token) {\n        return this.reflecting.has(token);\n    }\n    /**\n     * Handle changes to upstream tokens\n     * @param source - The parent DesignTokenNode\n     * @param property - The token ID that changed\n     */\n    handleChange(source, property) {\n        const token = DesignTokenImpl.getTokenById(property);\n        if (!token) {\n            return;\n        }\n        this.hydrate(token, this.getRaw(token));\n    }\n    /**\n     * Hydrates a token with a DesignTokenValue, making retrieval available.\n     * @param token - The token to hydrate\n     * @param value - The value to hydrate\n     */\n    hydrate(token, value) {\n        if (!this.has(token)) {\n            const observer = this.bindingObservers.get(token);\n            if (DesignTokenImpl.isDerivedDesignTokenValue(value)) {\n                if (observer) {\n                    // If the binding source doesn\'t match, we need\n                    // to update the binding\n                    if (observer.source !== value) {\n                        this.tearDownBindingObserver(token);\n                        this.setupBindingObserver(token, value);\n                    }\n                }\n                else {\n                    this.setupBindingObserver(token, value);\n                }\n            }\n            else {\n                if (observer) {\n                    this.tearDownBindingObserver(token);\n                }\n                this.store.set(token, value);\n            }\n        }\n    }\n    /**\n     * Sets up a binding observer for a derived token value that notifies token\n     * subscribers on change.\n     *\n     * @param token - The token to notify when the binding updates\n     * @param source - The binding source\n     */\n    setupBindingObserver(token, source) {\n        const binding = new DesignTokenBindingObserver(source, token, this);\n        this.bindingObservers.set(token, binding);\n        return binding;\n    }\n    /**\n     * Tear down a binding observer for a token.\n     */\n    tearDownBindingObserver(token) {\n        if (this.bindingObservers.has(token)) {\n            this.bindingObservers.get(token).disconnect();\n            this.bindingObservers.delete(token);\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Responsible for reflecting tokens to CSS custom properties\n */\nDesignTokenNode.cssCustomPropertyReflector = new CustomPropertyReflector();\ntslib_es6_decorate([\n    observable_observable\n], DesignTokenNode.prototype, "children", void 0);\nfunction create(nameOrConfig) {\n    return DesignTokenImpl.from(nameOrConfig);\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n/**\n * Factory object for creating {@link (DesignToken:interface)} instances.\n * @public\n */\nconst DesignToken = Object.freeze({\n    create,\n    /**\n     * Informs DesignToken that an HTMLElement for which tokens have\n     * been set has been connected to the document.\n     *\n     * The browser does not provide a reliable mechanism to observe an HTMLElement\'s connectedness\n     * in all scenarios, so invoking this method manually is necessary when:\n     *\n     * 1. Token values are set for an HTMLElement.\n     * 2. The HTMLElement does not inherit from FASTElement.\n     * 3. The HTMLElement is not connected to the document when token values are set.\n     *\n     * @param element - The element to notify\n     * @returns - true if notification was successful, otherwise false.\n     */\n    notifyConnection(element) {\n        if (!element.isConnected || !DesignTokenNode.existsFor(element)) {\n            return false;\n        }\n        DesignTokenNode.getOrCreate(element).bind();\n        return true;\n    },\n    /**\n     * Informs DesignToken that an HTMLElement for which tokens have\n     * been set has been disconnected to the document.\n     *\n     * The browser does not provide a reliable mechanism to observe an HTMLElement\'s connectedness\n     * in all scenarios, so invoking this method manually is necessary when:\n     *\n     * 1. Token values are set for an HTMLElement.\n     * 2. The HTMLElement does not inherit from FASTElement.\n     *\n     * @param element - The element to notify\n     * @returns - true if notification was successful, otherwise false.\n     */\n    notifyDisconnection(element) {\n        if (element.isConnected || !DesignTokenNode.existsFor(element)) {\n            return false;\n        }\n        DesignTokenNode.getOrCreate(element).unbind();\n        return true;\n    },\n    /**\n     * Registers and element or document as a DesignToken root.\n     * {@link CSSDesignToken | CSSDesignTokens} with default values assigned via\n     * {@link (DesignToken:interface).withDefault} will emit CSS custom properties to all\n     * registered roots.\n     * @param target - The root to register\n     */\n    registerRoot(target = defaultElement) {\n        RootStyleSheetTarget.registerRoot(target);\n    },\n    /**\n     * Unregister an element or document as a DesignToken root.\n     * @param target - The root to deregister\n     */\n    unregisterRoot(target = defaultElement) {\n        RootStyleSheetTarget.unregisterRoot(target);\n    },\n});\n/* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/design-system/design-system.js\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Indicates what to do with an ambiguous (duplicate) element.\n * @public\n */\nconst ElementDisambiguation = Object.freeze({\n    /**\n     * Skip defining the element but still call the provided callback passed\n     * to DesignSystemRegistrationContext.tryDefineElement\n     */\n    definitionCallbackOnly: null,\n    /**\n     * Ignore the duplicate element entirely.\n     */\n    ignoreDuplicate: Symbol(),\n});\nconst elementTypesByTag = new Map();\nconst elementTagsByType = new Map();\nlet rootDesignSystem = null;\nconst designSystemKey = DI.createInterface(x => x.cachedCallback(handler => {\n    if (rootDesignSystem === null) {\n        rootDesignSystem = new DefaultDesignSystem(null, handler);\n    }\n    return rootDesignSystem;\n}));\n/**\n * An API gateway to design system features.\n * @public\n */\nconst DesignSystem = Object.freeze({\n    /**\n     * Returns the HTML element name that the type is defined as.\n     * @param type - The type to lookup.\n     * @public\n     */\n    tagFor(type) {\n        return elementTagsByType.get(type);\n    },\n    /**\n     * Searches the DOM hierarchy for the design system that is responsible\n     * for the provided element.\n     * @param element - The element to locate the design system for.\n     * @returns The located design system.\n     * @public\n     */\n    responsibleFor(element) {\n        const owned = element.$$designSystem$$;\n        if (owned) {\n            return owned;\n        }\n        const container = DI.findResponsibleContainer(element);\n        return container.get(designSystemKey);\n    },\n    /**\n     * Gets the DesignSystem if one is explicitly defined on the provided element;\n     * otherwise creates a design system defined directly on the element.\n     * @param element - The element to get or create a design system for.\n     * @returns The design system.\n     * @public\n     */\n    getOrCreate(node) {\n        if (!node) {\n            if (rootDesignSystem === null) {\n                rootDesignSystem = DI.getOrCreateDOMContainer().get(designSystemKey);\n            }\n            return rootDesignSystem;\n        }\n        const owned = node.$$designSystem$$;\n        if (owned) {\n            return owned;\n        }\n        const container = DI.getOrCreateDOMContainer(node);\n        if (container.has(designSystemKey, false)) {\n            return container.get(designSystemKey);\n        }\n        else {\n            const system = new DefaultDesignSystem(node, container);\n            container.register(Registration.instance(designSystemKey, system));\n            return system;\n        }\n    },\n});\nfunction extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback) {\n    if (typeof params === "string") {\n        return {\n            name: params,\n            type: elementDefinitionType,\n            callback: elementDefinitionCallback,\n        };\n    }\n    else {\n        return params;\n    }\n}\nclass DefaultDesignSystem {\n    constructor(owner, container) {\n        this.owner = owner;\n        this.container = container;\n        this.designTokensInitialized = false;\n        this.prefix = "fast";\n        this.shadowRootMode = undefined;\n        this.disambiguate = () => ElementDisambiguation.definitionCallbackOnly;\n        if (owner !== null) {\n            owner.$$designSystem$$ = this;\n        }\n    }\n    withPrefix(prefix) {\n        this.prefix = prefix;\n        return this;\n    }\n    withShadowRootMode(mode) {\n        this.shadowRootMode = mode;\n        return this;\n    }\n    withElementDisambiguation(callback) {\n        this.disambiguate = callback;\n        return this;\n    }\n    withDesignTokenRoot(root) {\n        this.designTokenRoot = root;\n        return this;\n    }\n    register(...registrations) {\n        const container = this.container;\n        const elementDefinitionEntries = [];\n        const disambiguate = this.disambiguate;\n        const shadowRootMode = this.shadowRootMode;\n        const context = {\n            elementPrefix: this.prefix,\n            tryDefineElement(params, elementDefinitionType, elementDefinitionCallback) {\n                const extractedParams = extractTryDefineElementParams(params, elementDefinitionType, elementDefinitionCallback);\n                const { name, callback, baseClass } = extractedParams;\n                let { type } = extractedParams;\n                let elementName = name;\n                let typeFoundByName = elementTypesByTag.get(elementName);\n                let needsDefine = true;\n                while (typeFoundByName) {\n                    const result = disambiguate(elementName, type, typeFoundByName);\n                    switch (result) {\n                        case ElementDisambiguation.ignoreDuplicate:\n                            return;\n                        case ElementDisambiguation.definitionCallbackOnly:\n                            needsDefine = false;\n                            typeFoundByName = void 0;\n                            break;\n                        default:\n                            elementName = result;\n                            typeFoundByName = elementTypesByTag.get(elementName);\n                            break;\n                    }\n                }\n                if (needsDefine) {\n                    if (elementTagsByType.has(type) || type === FoundationElement) {\n                        type = class extends type {\n                        };\n                    }\n                    elementTypesByTag.set(elementName, type);\n                    elementTagsByType.set(type, elementName);\n                    if (baseClass) {\n                        elementTagsByType.set(baseClass, elementName);\n                    }\n                }\n                elementDefinitionEntries.push(new ElementDefinitionEntry(container, elementName, type, shadowRootMode, callback, needsDefine));\n            },\n        };\n        if (!this.designTokensInitialized) {\n            this.designTokensInitialized = true;\n            if (this.designTokenRoot !== null) {\n                DesignToken.registerRoot(this.designTokenRoot);\n            }\n        }\n        container.registerWithContext(context, ...registrations);\n        for (const entry of elementDefinitionEntries) {\n            entry.callback(entry);\n            if (entry.willDefine && entry.definition !== null) {\n                entry.definition.define();\n            }\n        }\n        return this;\n    }\n}\nclass ElementDefinitionEntry {\n    constructor(container, name, type, shadowRootMode, callback, willDefine) {\n        this.container = container;\n        this.name = name;\n        this.type = type;\n        this.shadowRootMode = shadowRootMode;\n        this.callback = callback;\n        this.willDefine = willDefine;\n        this.definition = null;\n    }\n    definePresentation(presentation) {\n        ComponentPresentation.define(this.name, presentation, this.container);\n    }\n    defineElement(definition) {\n        this.definition = new FASTElementDefinition(this.type, Object.assign(Object.assign({}, definition), { name: this.name }));\n    }\n    tagFor(type) {\n        return DesignSystem.tagFor(type);\n    }\n}\n/* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/fast-design-system.js\n\n/**\n * Provides a design system for the specified element either by returning one that was\n * already created for that element or creating one.\n * @param element - The element to root the design system at. By default, this is the body.\n * @returns A FAST Design System\n * @public\n */\nfunction provideFASTDesignSystem(element) {\n    return DesignSystem.getOrCreate(element).withPrefix("fast");\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar tslib_tslib_es6_extendStatics = function(d, b) {\r\n    tslib_tslib_es6_extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return tslib_tslib_es6_extendStatics(d, b);\r\n};\r\n\r\nfunction tslib_tslib_es6_extends(d, b) {\r\n    tslib_tslib_es6_extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar tslib_tslib_es6_assign = function() {\r\n    tslib_tslib_es6_assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return tslib_tslib_es6_assign.apply(this, arguments);\r\n}\r\n\r\nfunction tslib_tslib_es6_rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction tslib_tslib_es6_decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction tslib_tslib_es6_param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction tslib_tslib_es6_metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction tslib_tslib_es6_awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction tslib_tslib_es6_generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction tslib_tslib_es6_createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction tslib_tslib_es6_exportStar(m, exports) {\r\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction tslib_tslib_es6_values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction tslib_tslib_es6_read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction tslib_tslib_es6_spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(tslib_tslib_es6_read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction tslib_tslib_es6_spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction tslib_tslib_es6_await(v) {\r\n    return this instanceof tslib_tslib_es6_await ? (this.v = v, this) : new tslib_tslib_es6_await(v);\r\n}\r\n\r\nfunction tslib_tslib_es6_asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof tslib_tslib_es6_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction tslib_tslib_es6_asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: tslib_tslib_es6_await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction tslib_tslib_es6_asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof tslib_tslib_es6_values === "function" ? tslib_tslib_es6_values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction tslib_tslib_es6_makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction tslib_tslib_es6_importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction tslib_tslib_es6_importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction tslib_tslib_es6_classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to get private field on non-instance");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction tslib_tslib_es6_classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to set private field on non-instance");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/patterns/aria-global.js\n\n\n/**\n * Some states and properties are applicable to all host language elements regardless of whether a role is applied.\n * The following global states and properties are supported by all roles and by all base markup elements.\n * {@link https://www.w3.org/TR/wai-aria-1.1/#global_states}\n *\n * This is intended to be used as a mixin. Be sure you extend FASTElement.\n *\n * @public\n */\nclass ARIAGlobalStatesAndProperties {\n}\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-atomic" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaAtomic", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-busy" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaBusy", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-controls" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaControls", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-current" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaCurrent", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-describedby" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDescribedby", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-details" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDetails", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-disabled" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaDisabled", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-errormessage" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaErrormessage", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-flowto" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaFlowto", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-haspopup" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaHaspopup", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-hidden" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaHidden", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-invalid" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaInvalid", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-keyshortcuts" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaKeyshortcuts", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-label" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLabel", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-labelledby" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLabelledby", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-live" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaLive", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-owns" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaOwns", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-relevant" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaRelevant", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-roledescription" })\n], ARIAGlobalStatesAndProperties.prototype, "ariaRoledescription", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/ref.js\n\n/**\n * The runtime behavior for template references.\n * @public\n */\nclass RefBehavior {\n    /**\n     * Creates an instance of RefBehavior.\n     * @param target - The element to reference.\n     * @param propertyName - The name of the property to assign the reference to.\n     */\n    constructor(target, propertyName) {\n        this.target = target;\n        this.propertyName = propertyName;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        source[this.propertyName] = this.target;\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    unbind() { }\n}\n/**\n * A directive that observes the updates a property with a reference to the element.\n * @param propertyName - The name of the property to assign the reference to.\n * @public\n */\nfunction ref(propertyName) {\n    return new AttachedBehaviorHTMLDirective("fast-ref", RefBehavior, propertyName);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/patterns/start-end.js\n\n/**\n * A mixin class implementing start and end elements.\n * These are generally used to decorate text elements with icons or other visual indicators.\n * @public\n */\nclass StartEnd {\n    handleStartContentChange() {\n        this.startContainer.classList.toggle("start", this.start.assignedNodes().length > 0);\n    }\n    handleEndContentChange() {\n        this.endContainer.classList.toggle("end", this.end.assignedNodes().length > 0);\n    }\n}\n/**\n * The template for the end element.\n * For use with {@link StartEnd}\n *\n * @public\n */\nconst endSlotTemplate = (context, definition) => html `\n    <span\n        part="end"\n        ${ref("endContainer")}\n        class=${x => (definition.end ? "end" : void 0)}\n    >\n        <slot name="end" ${ref("end")} @slotchange="${x => x.handleEndContentChange()}">\n            ${definition.end || ""}\n        </slot>\n    </span>\n`;\n/**\n * The template for the start element.\n * For use with {@link StartEnd}\n *\n * @public\n */\nconst startSlotTemplate = (context, definition) => html `\n    <span\n        part="start"\n        ${ref("startContainer")}\n        class="${x => (definition.start ? "start" : void 0)}"\n    >\n        <slot\n            name="start"\n            ${ref("start")}\n            @slotchange="${x => x.handleStartContentChange()}"\n        >\n            ${definition.start || ""}\n        </slot>\n    </span>\n`;\n/**\n * The template for the end element.\n * For use with {@link StartEnd}\n *\n * @public\n * @deprecated - use endSlotTemplate\n */\nconst endTemplate = html `\n    <span part="end" ${ref("endContainer")}>\n        <slot\n            name="end"\n            ${ref("end")}\n            @slotchange="${x => x.handleEndContentChange()}"\n        ></slot>\n    </span>\n`;\n/**\n * The template for the start element.\n * For use with {@link StartEnd}\n *\n * @public\n * @deprecated - use startSlotTemplate\n */\nconst startTemplate = html `\n    <span part="start" ${ref("startContainer")}>\n        <slot\n            name="start"\n            ${ref("start")}\n            @slotchange="${x => x.handleStartContentChange()}"\n        ></slot>\n    </span>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/apply-mixins.js\n\n/**\n * Apply mixins to a constructor.\n * Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.\n * @public\n */\nfunction applyMixins(derivedCtor, ...baseCtors) {\n    const derivedAttributes = AttributeConfiguration.locate(derivedCtor);\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            if (name !== "constructor") {\n                Object.defineProperty(derivedCtor.prototype, name, \n                /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n                Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n            }\n        });\n        const baseAttributes = AttributeConfiguration.locate(baseCtor);\n        baseAttributes.forEach(x => derivedAttributes.push(x));\n    });\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/key-codes.js\n/**\n * Key Code values\n * @deprecated - KeyCodes are deprecated, use individual string key exports\n */\nvar KeyCodes;\n(function (KeyCodes) {\n    KeyCodes[KeyCodes["alt"] = 18] = "alt";\n    KeyCodes[KeyCodes["arrowDown"] = 40] = "arrowDown";\n    KeyCodes[KeyCodes["arrowLeft"] = 37] = "arrowLeft";\n    KeyCodes[KeyCodes["arrowRight"] = 39] = "arrowRight";\n    KeyCodes[KeyCodes["arrowUp"] = 38] = "arrowUp";\n    KeyCodes[KeyCodes["back"] = 8] = "back";\n    KeyCodes[KeyCodes["backSlash"] = 220] = "backSlash";\n    KeyCodes[KeyCodes["break"] = 19] = "break";\n    KeyCodes[KeyCodes["capsLock"] = 20] = "capsLock";\n    KeyCodes[KeyCodes["closeBracket"] = 221] = "closeBracket";\n    KeyCodes[KeyCodes["colon"] = 186] = "colon";\n    KeyCodes[KeyCodes["colon2"] = 59] = "colon2";\n    KeyCodes[KeyCodes["comma"] = 188] = "comma";\n    KeyCodes[KeyCodes["ctrl"] = 17] = "ctrl";\n    KeyCodes[KeyCodes["delete"] = 46] = "delete";\n    KeyCodes[KeyCodes["end"] = 35] = "end";\n    KeyCodes[KeyCodes["enter"] = 13] = "enter";\n    KeyCodes[KeyCodes["equals"] = 187] = "equals";\n    KeyCodes[KeyCodes["equals2"] = 61] = "equals2";\n    KeyCodes[KeyCodes["equals3"] = 107] = "equals3";\n    KeyCodes[KeyCodes["escape"] = 27] = "escape";\n    KeyCodes[KeyCodes["forwardSlash"] = 191] = "forwardSlash";\n    KeyCodes[KeyCodes["function1"] = 112] = "function1";\n    KeyCodes[KeyCodes["function10"] = 121] = "function10";\n    KeyCodes[KeyCodes["function11"] = 122] = "function11";\n    KeyCodes[KeyCodes["function12"] = 123] = "function12";\n    KeyCodes[KeyCodes["function2"] = 113] = "function2";\n    KeyCodes[KeyCodes["function3"] = 114] = "function3";\n    KeyCodes[KeyCodes["function4"] = 115] = "function4";\n    KeyCodes[KeyCodes["function5"] = 116] = "function5";\n    KeyCodes[KeyCodes["function6"] = 117] = "function6";\n    KeyCodes[KeyCodes["function7"] = 118] = "function7";\n    KeyCodes[KeyCodes["function8"] = 119] = "function8";\n    KeyCodes[KeyCodes["function9"] = 120] = "function9";\n    KeyCodes[KeyCodes["home"] = 36] = "home";\n    KeyCodes[KeyCodes["insert"] = 45] = "insert";\n    KeyCodes[KeyCodes["menu"] = 93] = "menu";\n    KeyCodes[KeyCodes["minus"] = 189] = "minus";\n    KeyCodes[KeyCodes["minus2"] = 109] = "minus2";\n    KeyCodes[KeyCodes["numLock"] = 144] = "numLock";\n    KeyCodes[KeyCodes["numPad0"] = 96] = "numPad0";\n    KeyCodes[KeyCodes["numPad1"] = 97] = "numPad1";\n    KeyCodes[KeyCodes["numPad2"] = 98] = "numPad2";\n    KeyCodes[KeyCodes["numPad3"] = 99] = "numPad3";\n    KeyCodes[KeyCodes["numPad4"] = 100] = "numPad4";\n    KeyCodes[KeyCodes["numPad5"] = 101] = "numPad5";\n    KeyCodes[KeyCodes["numPad6"] = 102] = "numPad6";\n    KeyCodes[KeyCodes["numPad7"] = 103] = "numPad7";\n    KeyCodes[KeyCodes["numPad8"] = 104] = "numPad8";\n    KeyCodes[KeyCodes["numPad9"] = 105] = "numPad9";\n    KeyCodes[KeyCodes["numPadDivide"] = 111] = "numPadDivide";\n    KeyCodes[KeyCodes["numPadDot"] = 110] = "numPadDot";\n    KeyCodes[KeyCodes["numPadMinus"] = 109] = "numPadMinus";\n    KeyCodes[KeyCodes["numPadMultiply"] = 106] = "numPadMultiply";\n    KeyCodes[KeyCodes["numPadPlus"] = 107] = "numPadPlus";\n    KeyCodes[KeyCodes["openBracket"] = 219] = "openBracket";\n    KeyCodes[KeyCodes["pageDown"] = 34] = "pageDown";\n    KeyCodes[KeyCodes["pageUp"] = 33] = "pageUp";\n    KeyCodes[KeyCodes["period"] = 190] = "period";\n    KeyCodes[KeyCodes["print"] = 44] = "print";\n    KeyCodes[KeyCodes["quote"] = 222] = "quote";\n    KeyCodes[KeyCodes["scrollLock"] = 145] = "scrollLock";\n    KeyCodes[KeyCodes["shift"] = 16] = "shift";\n    KeyCodes[KeyCodes["space"] = 32] = "space";\n    KeyCodes[KeyCodes["tab"] = 9] = "tab";\n    KeyCodes[KeyCodes["tilde"] = 192] = "tilde";\n    KeyCodes[KeyCodes["windowsLeft"] = 91] = "windowsLeft";\n    KeyCodes[KeyCodes["windowsOpera"] = 219] = "windowsOpera";\n    KeyCodes[KeyCodes["windowsRight"] = 92] = "windowsRight";\n})(KeyCodes || (KeyCodes = {}));\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeAlt = 18;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowDown = 40;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowLeft = 37;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowRight = 39;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeArrowUp = 38;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBack = 8;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBackSlash = 220;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeBreak = 19;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCapsLock = 20;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCloseBracket = 221;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeColon = 186;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeColon2 = 59; // Opera and Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeComma = 188;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeCtrl = 17;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeDelete = 46;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEnd = 35;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEnter = 13;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals = 187;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals2 = 61; // Opera\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEquals3 = 107; // Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeEscape = 27;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeForwardSlash = 191;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction1 = 112;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction10 = 121;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction11 = 122;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction12 = 123;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction2 = 113;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction3 = 114;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction4 = 115;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction5 = 116;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction6 = 117;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction7 = 118;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction8 = 119;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeFunction9 = 120;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeHome = 36;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeInsert = 45;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMenu = 93;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMinus = 189;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeMinus2 = 109; // Opera and Firefox\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumLock = 144;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad0 = 96;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad1 = 97;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad2 = 98;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad3 = 99;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad4 = 100;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad5 = 101;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad6 = 102;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad7 = 103;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad8 = 104;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPad9 = 105;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadDivide = 111;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadDot = 110;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadMinus = 109;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadMultiply = 106;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeNumPadPlus = 107;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeOpenBracket = 219;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePageDown = 34;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePageUp = 33;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePeriod = 190;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodePrint = 44;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeQuote = 222;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeScrollLock = 145;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeShift = 16;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeSpace = 32;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeTab = 9;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeTilde = 192;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsLeft = 91;\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsOpera = 219; // Opera\n/**\n * @deprecated - KeyCodes are deprecated, use string key exports\n */\nconst keyCodeWindowsRight = 92;\n/**\n * String values for use with KeyboardEvent.key\n */\nconst keyArrowDown = "ArrowDown";\nconst keyArrowLeft = "ArrowLeft";\nconst keyArrowRight = "ArrowRight";\nconst keyArrowUp = "ArrowUp";\nconst keyEnter = "Enter";\nconst keyEscape = "Escape";\nconst keyHome = "Home";\nconst keyEnd = "End";\nconst keyFunction2 = "F2";\nconst keyPageDown = "PageDown";\nconst keyPageUp = "PageUp";\nconst keySpace = " ";\nconst keyTab = "Tab";\nconst keyBackspace = "Backspace";\nconst keyDelete = "Delete";\nconst ArrowKeys = {\n    ArrowDown: keyArrowDown,\n    ArrowLeft: keyArrowLeft,\n    ArrowRight: keyArrowRight,\n    ArrowUp: keyArrowUp,\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/form-associated/form-associated.js\n\n\nconst proxySlotName = "form-associated-proxy";\nconst ElementInternalsKey = "ElementInternals";\n/**\n * @alpha\n */\nconst supportsElementInternals = ElementInternalsKey in window &&\n    "setFormValue" in window[ElementInternalsKey].prototype;\nconst InternalsMap = new WeakMap();\n/**\n * Base function for providing Custom Element Form Association.\n *\n * @alpha\n */\nfunction FormAssociated(BaseCtor) {\n    const C = class extends BaseCtor {\n        constructor(...args) {\n            super(...args);\n            /**\n             * Track whether the value has been changed from the initial value\n             */\n            this.dirtyValue = false;\n            /**\n             * Sets the element\'s disabled state. A disabled element will not be included during form submission.\n             *\n             * @remarks\n             * HTML Attribute: disabled\n             */\n            this.disabled = false;\n            /**\n             * These are events that are still fired by the proxy\n             * element based on user / programmatic interaction.\n             *\n             * The proxy implementation should be transparent to\n             * the app author, so block these events from emitting.\n             */\n            this.proxyEventsToBlock = ["change", "click"];\n            this.proxyInitialized = false;\n            this.required = false;\n            this.initialValue = this.initialValue || "";\n            if (!this.elementInternals) {\n                // When elementInternals is not supported, formResetCallback is\n                // bound to an event listener, so ensure the handler\'s `this`\n                // context is correct.\n                this.formResetCallback = this.formResetCallback.bind(this);\n            }\n        }\n        /**\n         * Must evaluate to true to enable elementInternals.\n         * Feature detects API support and resolve respectively\n         *\n         * @internal\n         */\n        static get formAssociated() {\n            return supportsElementInternals;\n        }\n        /**\n         * Returns the validity state of the element\n         *\n         * @alpha\n         */\n        get validity() {\n            return this.elementInternals\n                ? this.elementInternals.validity\n                : this.proxy.validity;\n        }\n        /**\n         * Retrieve a reference to the associated form.\n         * Returns null if not associated to any form.\n         *\n         * @alpha\n         */\n        get form() {\n            return this.elementInternals ? this.elementInternals.form : this.proxy.form;\n        }\n        /**\n         * Retrieve the localized validation message,\n         * or custom validation message if set.\n         *\n         * @alpha\n         */\n        get validationMessage() {\n            return this.elementInternals\n                ? this.elementInternals.validationMessage\n                : this.proxy.validationMessage;\n        }\n        /**\n         * Whether the element will be validated when the\n         * form is submitted\n         */\n        get willValidate() {\n            return this.elementInternals\n                ? this.elementInternals.willValidate\n                : this.proxy.willValidate;\n        }\n        /**\n         * A reference to all associated label elements\n         */\n        get labels() {\n            if (this.elementInternals) {\n                return Object.freeze(Array.from(this.elementInternals.labels));\n            }\n            else if (this.proxy instanceof HTMLElement &&\n                this.proxy.ownerDocument &&\n                this.id) {\n                // Labels associated by wrapping the element: <label><custom-element></custom-element></label>\n                const parentLabels = this.proxy.labels;\n                // Labels associated using the `for` attribute\n                const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for=\'${this.id}\']`));\n                const labels = parentLabels\n                    ? forLabels.concat(Array.from(parentLabels))\n                    : forLabels;\n                return Object.freeze(labels);\n            }\n            else {\n                return emptyArray;\n            }\n        }\n        /**\n         * Invoked when the `value` property changes\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `valueChanged` method\n         * They must be sure to invoke `super.valueChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        valueChanged(previous, next) {\n            this.dirtyValue = true;\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.value = this.value;\n            }\n            this.currentValue = this.value;\n            this.setFormValue(this.value);\n            this.validate();\n        }\n        currentValueChanged() {\n            this.value = this.currentValue;\n        }\n        /**\n         * Invoked when the `initialValue` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `initialValueChanged` method\n         * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        initialValueChanged(previous, next) {\n            // If the value is clean and the component is connected to the DOM\n            // then set value equal to the attribute value.\n            if (!this.dirtyValue) {\n                this.value = this.initialValue;\n                this.dirtyValue = false;\n            }\n        }\n        /**\n         * Invoked when the `disabled` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `disabledChanged` method\n         * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        disabledChanged(previous, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.disabled = this.disabled;\n            }\n            DOM.queueUpdate(() => this.classList.toggle("disabled", this.disabled));\n        }\n        /**\n         * Invoked when the `name` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `nameChanged` method\n         * They must be sure to invoke `super.nameChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        nameChanged(previous, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.name = this.name;\n            }\n        }\n        /**\n         * Invoked when the `required` property changes\n         *\n         * @param previous - the previous value\n         * @param next - the new value\n         *\n         * @remarks\n         * If elements extending `FormAssociated` implement a `requiredChanged` method\n         * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure\n         * proper functioning of `FormAssociated`\n         */\n        requiredChanged(prev, next) {\n            if (this.proxy instanceof HTMLElement) {\n                this.proxy.required = this.required;\n            }\n            DOM.queueUpdate(() => this.classList.toggle("required", this.required));\n            this.validate();\n        }\n        /**\n         * The element internals object. Will only exist\n         * in browsers supporting the attachInternals API\n         */\n        get elementInternals() {\n            if (!supportsElementInternals) {\n                return null;\n            }\n            let internals = InternalsMap.get(this);\n            if (!internals) {\n                internals = this.attachInternals();\n                InternalsMap.set(this, internals);\n            }\n            return internals;\n        }\n        /**\n         * @internal\n         */\n        connectedCallback() {\n            super.connectedCallback();\n            this.addEventListener("keypress", this._keypressHandler);\n            if (!this.value) {\n                this.value = this.initialValue;\n                this.dirtyValue = false;\n            }\n            if (!this.elementInternals) {\n                this.attachProxy();\n                if (this.form) {\n                    this.form.addEventListener("reset", this.formResetCallback);\n                }\n            }\n        }\n        /**\n         * @internal\n         */\n        disconnectedCallback() {\n            this.proxyEventsToBlock.forEach(name => this.proxy.removeEventListener(name, this.stopPropagation));\n            if (!this.elementInternals && this.form) {\n                this.form.removeEventListener("reset", this.formResetCallback);\n            }\n        }\n        /**\n         * Return the current validity of the element.\n         */\n        checkValidity() {\n            return this.elementInternals\n                ? this.elementInternals.checkValidity()\n                : this.proxy.checkValidity();\n        }\n        /**\n         * Return the current validity of the element.\n         * If false, fires an invalid event at the element.\n         */\n        reportValidity() {\n            return this.elementInternals\n                ? this.elementInternals.reportValidity()\n                : this.proxy.reportValidity();\n        }\n        /**\n         * Set the validity of the control. In cases when the elementInternals object is not\n         * available (and the proxy element is used to report validity), this function will\n         * do nothing unless a message is provided, at which point the setCustomValidity method\n         * of the proxy element will be invoked with the provided message.\n         * @param flags - Validity flags\n         * @param message - Optional message to supply\n         * @param anchor - Optional element used by UA to display an interactive validation UI\n         */\n        setValidity(flags, message, anchor) {\n            if (this.elementInternals) {\n                this.elementInternals.setValidity(flags, message, anchor);\n            }\n            else if (typeof message === "string") {\n                this.proxy.setCustomValidity(message);\n            }\n        }\n        /**\n         * Invoked when a connected component\'s form or fieldset has its disabled\n         * state changed.\n         * @param disabled - the disabled value of the form / fieldset\n         */\n        formDisabledCallback(disabled) {\n            this.disabled = disabled;\n        }\n        formResetCallback() {\n            this.value = this.initialValue;\n            this.dirtyValue = false;\n        }\n        /**\n         * Attach the proxy element to the DOM\n         */\n        attachProxy() {\n            var _a;\n            if (!this.proxyInitialized) {\n                this.proxyInitialized = true;\n                this.proxy.style.display = "none";\n                this.proxyEventsToBlock.forEach(name => this.proxy.addEventListener(name, this.stopPropagation));\n                // These are typically mapped to the proxy during\n                // property change callbacks, but during initialization\n                // on the initial call of the callback, the proxy is\n                // still undefined. We should find a better way to address this.\n                this.proxy.disabled = this.disabled;\n                this.proxy.required = this.required;\n                if (typeof this.name === "string") {\n                    this.proxy.name = this.name;\n                }\n                if (typeof this.value === "string") {\n                    this.proxy.value = this.value;\n                }\n                this.proxy.setAttribute("slot", proxySlotName);\n                this.proxySlot = document.createElement("slot");\n                this.proxySlot.setAttribute("name", proxySlotName);\n            }\n            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);\n            this.appendChild(this.proxy);\n        }\n        /**\n         * Detach the proxy element from the DOM\n         */\n        detachProxy() {\n            var _a;\n            this.removeChild(this.proxy);\n            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);\n        }\n        /** {@inheritDoc (FormAssociated:interface).validate} */\n        validate(anchor) {\n            if (this.proxy instanceof HTMLElement) {\n                this.setValidity(this.proxy.validity, this.proxy.validationMessage, anchor);\n            }\n        }\n        /**\n         * Associates the provided value (and optional state) with the parent form.\n         * @param value - The value to set\n         * @param state - The state object provided to during session restores and when autofilling.\n         */\n        setFormValue(value, state) {\n            if (this.elementInternals) {\n                this.elementInternals.setFormValue(value, state || value);\n            }\n        }\n        _keypressHandler(e) {\n            switch (e.key) {\n                case keyEnter:\n                    if (this.form instanceof HTMLFormElement) {\n                        // Implicit submission\n                        const defaultButton = this.form.querySelector("[type=submit]");\n                        defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();\n                    }\n                    break;\n            }\n        }\n        /**\n         * Used to stop propagation of proxy element events\n         * @param e - Event object\n         */\n        stopPropagation(e) {\n            e.stopPropagation();\n        }\n    };\n    attributes_attr({ mode: "boolean" })(C.prototype, "disabled");\n    attributes_attr({ mode: "fromView", attribute: "value" })(C.prototype, "initialValue");\n    attributes_attr({ attribute: "current-value" })(C.prototype, "currentValue");\n    attributes_attr(C.prototype, "name");\n    attributes_attr({ mode: "boolean" })(C.prototype, "required");\n    observable_observable(C.prototype, "value");\n    return C;\n}\n/**\n * @alpha\n */\nfunction CheckableFormAssociated(BaseCtor) {\n    class C extends FormAssociated(BaseCtor) {\n    }\n    class D extends C {\n        constructor(...args) {\n            super(args);\n            /**\n             * Tracks whether the "checked" property has been changed.\n             * This is necessary to provide consistent behavior with\n             * normal input checkboxes\n             */\n            this.dirtyChecked = false;\n            /**\n             * Provides the default checkedness of the input element\n             * Passed down to proxy\n             *\n             * @public\n             * @remarks\n             * HTML Attribute: checked\n             */\n            this.checkedAttribute = false;\n            /**\n             * The checked state of the control.\n             *\n             * @public\n             */\n            this.checked = false;\n            // Re-initialize dirtyChecked because initialization of other values\n            // causes it to become true\n            this.dirtyChecked = false;\n        }\n        checkedAttributeChanged() {\n            this.defaultChecked = this.checkedAttribute;\n        }\n        /**\n         * @internal\n         */\n        defaultCheckedChanged() {\n            if (!this.dirtyChecked) {\n                // Setting this.checked will cause us to enter a dirty state,\n                // but if we are clean when defaultChecked is changed, we want to stay\n                // in a clean state, so reset this.dirtyChecked\n                this.checked = this.defaultChecked;\n                this.dirtyChecked = false;\n            }\n        }\n        checkedChanged(prev, next) {\n            if (!this.dirtyChecked) {\n                this.dirtyChecked = true;\n            }\n            this.currentChecked = this.checked;\n            this.updateForm();\n            if (this.proxy instanceof HTMLInputElement) {\n                this.proxy.checked = this.checked;\n            }\n            if (prev !== undefined) {\n                this.$emit("change");\n            }\n            this.validate();\n        }\n        currentCheckedChanged(prev, next) {\n            this.checked = this.currentChecked;\n        }\n        updateForm() {\n            const value = this.checked ? this.value : null;\n            this.setFormValue(value, value);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.updateForm();\n        }\n        formResetCallback() {\n            super.formResetCallback();\n            this.checked = !!this.checkedAttribute;\n            this.dirtyChecked = false;\n        }\n    }\n    attr({ attribute: "checked", mode: "boolean" })(D.prototype, "checkedAttribute");\n    attr({ attribute: "current-checked", converter: booleanConverter })(D.prototype, "currentChecked");\n    observable(D.prototype, "defaultChecked");\n    observable(D.prototype, "checked");\n    return D;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.form-associated.js\n\n\nclass _Button extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Button:class)} component.\n *\n * @internal\n */\nclass FormAssociatedButton extends FormAssociated(_Button) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement("input");\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.js\n\n\n\n\n\n/**\n * A Button Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.\n *\n * @slot start - Content which can be provided before the button content\n * @slot end - Content which can be provided after the button content\n * @slot - The default slot for button content\n * @csspart control - The button element\n * @csspart content - The element wrapping button content\n *\n * @public\n */\nclass button_Button extends FormAssociatedButton {\n    constructor() {\n        super(...arguments);\n        /**\n         * Prevent events to propagate if disabled and has no slotted content wrapped in HTML elements\n         * @internal\n         */\n        this.handleClick = (e) => {\n            var _a;\n            if (this.disabled && ((_a = this.defaultSlottedContent) === null || _a === void 0 ? void 0 : _a.length) <= 1) {\n                e.stopPropagation();\n            }\n        };\n        /**\n         * Submits the parent form\n         */\n        this.handleSubmission = () => {\n            if (!this.form) {\n                return;\n            }\n            const attached = this.proxy.isConnected;\n            if (!attached) {\n                this.attachProxy();\n            }\n            // Browser support for requestSubmit is not comprehensive\n            // so click the proxy if it isn\'t supported\n            typeof this.form.requestSubmit === "function"\n                ? this.form.requestSubmit(this.proxy)\n                : this.proxy.click();\n            if (!attached) {\n                this.detachProxy();\n            }\n        };\n        /**\n         * Resets the parent form\n         */\n        this.handleFormReset = () => {\n            var _a;\n            (_a = this.form) === null || _a === void 0 ? void 0 : _a.reset();\n        };\n        /**\n         * Overrides the focus call for where delegatesFocus is unsupported.\n         * This check works for Chrome, Edge Chromium, FireFox, and Safari\n         * Relevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858\n         */\n        this.handleUnsupportedDelegatesFocus = () => {\n            var _a;\n            // Check to see if delegatesFocus is supported\n            if (window.ShadowRoot &&\n                !window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus") &&\n                ((_a = this.$fastController.definition.shadowOptions) === null || _a === void 0 ? void 0 : _a.delegatesFocus)) {\n                this.focus = () => {\n                    this.control.focus();\n                };\n            }\n        };\n    }\n    formactionChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formAction = this.formaction;\n        }\n    }\n    formenctypeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formEnctype = this.formenctype;\n        }\n    }\n    formmethodChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formMethod = this.formmethod;\n        }\n    }\n    formnovalidateChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formNoValidate = this.formnovalidate;\n        }\n    }\n    formtargetChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.formTarget = this.formtarget;\n        }\n    }\n    typeChanged(previous, next) {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.type = this.type;\n        }\n        next === "submit" && this.addEventListener("click", this.handleSubmission);\n        previous === "submit" && this.removeEventListener("click", this.handleSubmission);\n        next === "reset" && this.addEventListener("click", this.handleFormReset);\n        previous === "reset" && this.removeEventListener("click", this.handleFormReset);\n    }\n    /** {@inheritDoc (FormAssociated:interface).validate} */\n    validate() {\n        super.validate(this.control);\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        this.proxy.setAttribute("type", this.type);\n        this.handleUnsupportedDelegatesFocus();\n        const elements = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);\n        if (elements) {\n            elements.forEach((span) => {\n                span.addEventListener("click", this.handleClick);\n            });\n        }\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        var _a;\n        super.disconnectedCallback();\n        const elements = Array.from((_a = this.control) === null || _a === void 0 ? void 0 : _a.children);\n        if (elements) {\n            elements.forEach((span) => {\n                span.removeEventListener("click", this.handleClick);\n            });\n        }\n    }\n}\ntslib_es6_decorate([\n    attributes_attr({ mode: "boolean" })\n], button_Button.prototype, "autofocus", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "form" })\n], button_Button.prototype, "formId", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], button_Button.prototype, "formaction", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], button_Button.prototype, "formenctype", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], button_Button.prototype, "formmethod", void 0);\ntslib_es6_decorate([\n    attributes_attr({ mode: "boolean" })\n], button_Button.prototype, "formnovalidate", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], button_Button.prototype, "formtarget", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], button_Button.prototype, "type", void 0);\ntslib_es6_decorate([\n    observable_observable\n], button_Button.prototype, "defaultSlottedContent", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA button role\n *\n * @public\n */\nclass DelegatesARIAButton {\n}\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-expanded" })\n], DelegatesARIAButton.prototype, "ariaExpanded", void 0);\ntslib_es6_decorate([\n    attributes_attr({ attribute: "aria-pressed" })\n], DelegatesARIAButton.prototype, "ariaPressed", void 0);\napplyMixins(DelegatesARIAButton, ARIAGlobalStatesAndProperties);\napplyMixins(button_Button, StartEnd, DelegatesARIAButton);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js\n\n\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nfunction node_observation_elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nclass NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js\n\n\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nclass SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener("slotchange", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener("slotchange", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nfunction slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === "string") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective("fast-slotted", SlottedBehavior, propertyOrOptions);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/button/button.template.js\n\n\n/**\n * The template for the {@link @microsoft/fast-foundation#(Button:class)} component.\n * @public\n */\nconst buttonTemplate = (context, definition) => html `\n    <button\n        class="control"\n        part="control"\n        ?autofocus="${x => x.autofocus}"\n        ?disabled="${x => x.disabled}"\n        form="${x => x.formId}"\n        formaction="${x => x.formaction}"\n        formenctype="${x => x.formenctype}"\n        formmethod="${x => x.formmethod}"\n        formnovalidate="${x => x.formnovalidate}"\n        formtarget="${x => x.formtarget}"\n        name="${x => x.name}"\n        type="${x => x.type}"\n        value="${x => x.value}"\n        aria-atomic="${x => x.ariaAtomic}"\n        aria-busy="${x => x.ariaBusy}"\n        aria-controls="${x => x.ariaControls}"\n        aria-current="${x => x.ariaCurrent}"\n        aria-describedby="${x => x.ariaDescribedby}"\n        aria-details="${x => x.ariaDetails}"\n        aria-disabled="${x => x.ariaDisabled}"\n        aria-errormessage="${x => x.ariaErrormessage}"\n        aria-expanded="${x => x.ariaExpanded}"\n        aria-flowto="${x => x.ariaFlowto}"\n        aria-haspopup="${x => x.ariaHaspopup}"\n        aria-hidden="${x => x.ariaHidden}"\n        aria-invalid="${x => x.ariaInvalid}"\n        aria-keyshortcuts="${x => x.ariaKeyshortcuts}"\n        aria-label="${x => x.ariaLabel}"\n        aria-labelledby="${x => x.ariaLabelledby}"\n        aria-live="${x => x.ariaLive}"\n        aria-owns="${x => x.ariaOwns}"\n        aria-pressed="${x => x.ariaPressed}"\n        aria-relevant="${x => x.ariaRelevant}"\n        aria-roledescription="${x => x.ariaRoledescription}"\n        ${ref("control")}\n    >\n        ${startSlotTemplate(context, definition)}\n        <span class="content" part="content">\n            <slot ${slotted("defaultSlottedContent")}></slot>\n        </span>\n        ${endSlotTemplate(context, definition)}\n    </button>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/disabled.js\n/**\n * The CSS value for disabled cursors.\n * @public\n */\nconst disabledCursor = "not-allowed";\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/match-media-stylesheet-behavior.js\n/**\n * An abstract behavior to react to media queries. Implementations should implement\n * the `constructListener` method to perform some action based on media query changes.\n *\n * @public\n */\nclass MatchMediaBehavior {\n    /**\n     *\n     * @param query - The media query to operate from.\n     */\n    constructor(query) {\n        /**\n         * The behavior needs to operate on element instances but elements might share a behavior instance.\n         * To ensure proper attachment / detachment per instance, we construct a listener for\n         * each bind invocation and cache the listeners by element reference.\n         */\n        this.listenerCache = new WeakMap();\n        this.query = query;\n    }\n    /**\n     * Binds the behavior to the element.\n     * @param source - The element for which the behavior is bound.\n     */\n    bind(source) {\n        const { query } = this;\n        const listener = this.constructListener(source);\n        // Invoke immediately to add if the query currently matches\n        listener.bind(query)();\n        query.addListener(listener);\n        this.listenerCache.set(source, listener);\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     */\n    unbind(source) {\n        const listener = this.listenerCache.get(source);\n        if (listener) {\n            this.query.removeListener(listener);\n            this.listenerCache.delete(source);\n        }\n    }\n}\n/**\n * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that\n * styles are applied while the a query matches the environment and that styles are not applied if the query does\n * not match the environment.\n *\n * @public\n */\nclass MatchMediaStyleSheetBehavior extends MatchMediaBehavior {\n    /**\n     * Constructs a {@link MatchMediaStyleSheetBehavior} instance.\n     * @param query - The media query to operate from.\n     * @param styles - The styles to coordinate with the query.\n     */\n    constructor(query, styles) {\n        super(query);\n        this.styles = styles;\n    }\n    /**\n     * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for\n     * a provided query.\n     * @param query - The media query to operate from.\n     *\n     * @public\n     * @example\n     *\n     * ```ts\n     * import { css } from "@microsoft/fast-element";\n     * import { MatchMediaStyleSheetBehavior } from "@microsoft/fast-foundation";\n     *\n     * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(\n     *   window.matchMedia("(orientation: landscape)")\n     * );\n     * const styles = css`\n     *   :host {\n     *     width: 200px;\n     *     height: 400px;\n     *   }\n     * `\n     * .withBehaviors(landscapeBehavior(css`\n     *   :host {\n     *     width: 400px;\n     *     height: 200px;\n     *   }\n     * `))\n     * ```\n     */\n    static with(query) {\n        return (styles) => {\n            return new MatchMediaStyleSheetBehavior(query, styles);\n        };\n    }\n    /**\n     * Constructs a match-media listener for a provided element.\n     * @param source - the element for which to attach or detach styles.\n     * @internal\n     */\n    constructListener(source) {\n        let attached = false;\n        const styles = this.styles;\n        return function listener() {\n            const { matches } = this;\n            if (matches && !attached) {\n                source.$fastController.addStyles(styles);\n                attached = matches;\n            }\n            else if (!matches && attached) {\n                source.$fastController.removeStyles(styles);\n                attached = matches;\n            }\n        };\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     * @internal\n     */\n    unbind(source) {\n        super.unbind(source);\n        source.$fastController.removeStyles(this.styles);\n    }\n}\n/**\n * This can be used to construct a behavior to apply a forced-colors only stylesheet.\n * @public\n */\nconst forcedColorsStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(forced-colors)"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.\n * @public\n */\nconst darkModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: dark)"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.\n * @public\n */\nconst lightModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia("(prefers-color-scheme: light)"));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/system-colors.js\n/**\n * Define system colors for use in CSS stylesheets.\n *\n * https://drafts.csswg.org/css-color/#css-system-colors\n */\nvar SystemColors;\n(function (SystemColors) {\n    SystemColors["Canvas"] = "Canvas";\n    SystemColors["CanvasText"] = "CanvasText";\n    SystemColors["LinkText"] = "LinkText";\n    SystemColors["VisitedText"] = "VisitedText";\n    SystemColors["ActiveText"] = "ActiveText";\n    SystemColors["ButtonFace"] = "ButtonFace";\n    SystemColors["ButtonText"] = "ButtonText";\n    SystemColors["Field"] = "Field";\n    SystemColors["FieldText"] = "FieldText";\n    SystemColors["Highlight"] = "Highlight";\n    SystemColors["HighlightText"] = "HighlightText";\n    SystemColors["GrayText"] = "GrayText";\n})(SystemColors || (SystemColors = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/localization.js\n/**\n * Expose ltr and rtl strings\n */\nvar Direction;\n(function (Direction) {\n    Direction["ltr"] = "ltr";\n    Direction["rtl"] = "rtl";\n})(Direction || (Direction = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/math-utilities.js\n/**\n * Ensures that an input number does not exceed a max value and is not less than a min value.\n * @param i - the number to clamp\n * @param min - the maximum (inclusive) value\n * @param max - the minimum (inclusive) value\n * @public\n */\nfunction clamp(i, min, max) {\n    if (isNaN(i) || i <= min) {\n        return min;\n    }\n    else if (i >= max) {\n        return max;\n    }\n    return i;\n}\n/**\n * Scales an input to a number between 0 and 1\n * @param i - a number between min and max\n * @param min - the max value\n * @param max - the min value\n * @public\n */\nfunction math_utilities_normalize(i, min, max) {\n    if (isNaN(i) || i <= min) {\n        return 0.0;\n    }\n    else if (i >= max) {\n        return 1.0;\n    }\n    return i / (max - min);\n}\n/**\n * Scales a number between 0 and 1\n * @param i - the number to denormalize\n * @param min - the min value\n * @param max - the max value\n * @public\n */\nfunction denormalize(i, min, max) {\n    if (isNaN(i)) {\n        return min;\n    }\n    return min + i * (max - min);\n}\n/**\n * Converts degrees to radians.\n * @param i - degrees\n * @public\n */\nfunction degreesToRadians(i) {\n    return i * (Math.PI / 180.0);\n}\n/**\n * Converts radians to degrees.\n * @param i - radians\n * @public\n */\nfunction radiansToDegrees(i) {\n    return i * (180.0 / Math.PI);\n}\n/**\n * Converts a number between 0 and 255 to a hex string.\n * @param i - the number to convert to a hex string\n * @public\n */\nfunction getHexStringForByte(i) {\n    const s = Math.round(clamp(i, 0.0, 255.0)).toString(16);\n    if (s.length === 1) {\n        return "0" + s;\n    }\n    return s;\n}\n/**\n * Linearly interpolate\n * @public\n */\nfunction lerp(i, min, max) {\n    if (isNaN(i) || i <= 0.0) {\n        return min;\n    }\n    else if (i >= 1.0) {\n        return max;\n    }\n    return min + i * (max - min);\n}\n/**\n * Linearly interpolate angles in degrees\n * @public\n */\nfunction lerpAnglesInDegrees(i, min, max) {\n    if (i <= 0.0) {\n        return min % 360.0;\n    }\n    else if (i >= 1.0) {\n        return max % 360.0;\n    }\n    const a = (min - max + 360.0) % 360.0;\n    const b = (max - min + 360.0) % 360.0;\n    if (a <= b) {\n        return (min - a * i + 360.0) % 360.0;\n    }\n    return (min + a * i + 360.0) % 360.0;\n}\nconst TwoPI = Math.PI * 2;\n/**\n * Linearly interpolate angles in radians\n * @public\n */\nfunction lerpAnglesInRadians(i, min, max) {\n    if (isNaN(i) || i <= 0.0) {\n        return min % TwoPI;\n    }\n    else if (i >= 1.0) {\n        return max % TwoPI;\n    }\n    const a = (min - max + TwoPI) % TwoPI;\n    const b = (max - min + TwoPI) % TwoPI;\n    if (a <= b) {\n        return (min - a * i + TwoPI) % TwoPI;\n    }\n    return (min + a * i + TwoPI) % TwoPI;\n}\n/**\n *\n * Will return infinity if i*10^(precision) overflows number\n * note that floating point rounding rules come into play here\n * so values that end up rounding on a .5 round to the nearest\n * even not always up so 2.5 rounds to 2\n * @param i - the number to round\n * @param precision - the precision to round to\n *\n * @public\n */\nfunction roundToPrecisionSmall(i, precision) {\n    const factor = Math.pow(10, precision);\n    return Math.round(i * factor) / factor;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-rgba-64.js\n\n/**\n * A RGBA color with 64 bit channels.\n *\n * @example\n * ```ts\n * new ColorRGBA64(1, 0, 0, 1) // red\n * ```\n * @public\n */\nclass color_rgba_64_ColorRGBA64 {\n    /**\n     *\n     * @param red - the red value\n     * @param green - the green value\n     * @param blue - the blue value\n     * @param alpha - the alpha value\n     */\n    constructor(red, green, blue, alpha) {\n        this.r = red;\n        this.g = green;\n        this.b = blue;\n        this.a = typeof alpha === "number" && !isNaN(alpha) ? alpha : 1;\n    }\n    /**\n     * Construct a {@link ColorRGBA64} from a {@link ColorRGBA64Config}\n     * @param data - the config object\n     */\n    static fromObject(data) {\n        return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b)\n            ? new color_rgba_64_ColorRGBA64(data.r, data.g, data.b, data.a)\n            : null;\n    }\n    /**\n     * Determines if one color is equal to another.\n     * @param rhs - the color to compare\n     */\n    equalValue(rhs) {\n        return (this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a);\n    }\n    /**\n     * Returns the color formatted as a string; #RRGGBB\n     */\n    toStringHexRGB() {\n        return "#" + [this.r, this.g, this.b].map(this.formatHexValue).join("");\n    }\n    /**\n     * Returns the color formatted as a string; #RRGGBBAA\n     */\n    toStringHexRGBA() {\n        return this.toStringHexRGB() + this.formatHexValue(this.a);\n    }\n    /**\n     * Returns the color formatted as a string; #AARRGGBB\n     */\n    toStringHexARGB() {\n        return "#" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join("");\n    }\n    /**\n     * Returns the color formatted as a string; "rgb(0xRR, 0xGG, 0xBB)"\n     */\n    toStringWebRGB() {\n        return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n    }\n    /**\n     * Returns the color formatted as a string; "rgba(0xRR, 0xGG, 0xBB, a)"\n     * @remarks\n     * Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n     */\n    toStringWebRGBA() {\n        return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n    }\n    /**\n     * Returns a new {@link ColorRGBA64} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new color_rgba_64_ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n    }\n    /**\n     * Returns a new {@link ColorRGBA64} with channel values clamped between 0 and 1.\n     */\n    clamp() {\n        return new color_rgba_64_ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n    }\n    /**\n     * Converts the {@link ColorRGBA64} to a {@link ColorRGBA64Config}.\n     */\n    toObject() {\n        return { r: this.r, g: this.g, b: this.b, a: this.a };\n    }\n    formatHexValue(value) {\n        return getHexStringForByte(denormalize(value, 0.0, 255.0));\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-hsl.js\n\n/**\n * This uses Hue values in "degree" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n *\n * @public\n */\nclass color_hsl_ColorHSL {\n    constructor(hue, sat, lum) {\n        this.h = hue;\n        this.s = sat;\n        this.l = lum;\n    }\n    /**\n     * Construct a {@link ColorHSL} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.l)) {\n            return new color_hsl_ColorHSL(data.h, data.s, data.l);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.h === rhs.h && this.s === rhs.s && this.l === rhs.l;\n    }\n    /**\n     * Returns a new {@link ColorHSL} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new color_hsl_ColorHSL(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.l, precision));\n    }\n    /**\n     * Returns the {@link ColorHSL} formatted as an object.\n     */\n    toObject() {\n        return { h: this.h, s: this.s, l: this.l };\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-hsv.js\n\n/**\n * This uses Hue values in "degree" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n *\n * @public\n */\nclass ColorHSV {\n    constructor(hue, sat, val) {\n        this.h = hue;\n        this.s = sat;\n        this.v = val;\n    }\n    /**\n     * Construct a {@link ColorHSV} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {\n            return new ColorHSV(data.h, data.s, data.v);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;\n    }\n    /**\n     * Returns a new {@link ColorHSV} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));\n    }\n    /**\n     * Returns the {@link ColorHSV} formatted as an object.\n     */\n    toObject() {\n        return { h: this.h, s: this.s, v: this.v };\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-lab.js\n\n/**\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELAB color space}\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nclass color_lab_ColorLAB {\n    constructor(l, a, b) {\n        this.l = l;\n        this.a = a;\n        this.b = b;\n    }\n    /**\n     * Construct a {@link ColorLAB} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.l) && !isNaN(data.a) && !isNaN(data.b)) {\n            return new color_lab_ColorLAB(data.l, data.a, data.b);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.l === rhs.l && this.a === rhs.a && this.b === rhs.b;\n    }\n    /**\n     * Returns a new {@link ColorLAB} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new color_lab_ColorLAB(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.a, precision), roundToPrecisionSmall(this.b, precision));\n    }\n    /**\n     * Returns the {@link ColorLAB} formatted as an object.\n     */\n    toObject() {\n        return { l: this.l, a: this.a, b: this.b };\n    }\n}\ncolor_lab_ColorLAB.epsilon = 216 / 24389;\ncolor_lab_ColorLAB.kappa = 24389 / 27;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-lch.js\n\n/**\n *\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELCH color space}\n *\n * This is a cylindrical representation of the CIELAB space useful for saturation operations\n * This uses Hue values in "degree" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nclass ColorLCH {\n    constructor(l, c, h) {\n        this.l = l;\n        this.c = c;\n        this.h = h;\n    }\n    /**\n     * Construct a {@link ColorLCH} from a config object.\n     * @param data - the config object\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {\n            return new ColorLCH(data.l, data.c, data.h);\n        }\n        return null;\n    }\n    /**\n     * Determines if one color is equal to another.\n     * @param rhs - the color to compare\n     */\n    equalValue(rhs) {\n        return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;\n    }\n    /**\n     * Returns a new {@link ColorLCH} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));\n    }\n    /**\n     * Converts the {@link ColorLCH} to a config object.\n     */\n    toObject() {\n        return { l: this.l, c: this.c, h: this.h };\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-xyz.js\n\n/**\n * {@link https://en.wikipedia.org/wiki/CIE_1931_color_space | XYZ color space}\n *\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nclass ColorXYZ {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n     * Construct a {@link ColorXYZ} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {\n            return new ColorXYZ(data.x, data.y, data.z);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;\n    }\n    /**\n     * Returns a new {@link ColorXYZ} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorXYZ(roundToPrecisionSmall(this.x, precision), roundToPrecisionSmall(this.y, precision), roundToPrecisionSmall(this.z, precision));\n    }\n    /**\n     * Returns the {@link ColorXYZ} formatted as an object.\n     */\n    toObject() {\n        return { x: this.x, y: this.y, z: this.z };\n    }\n}\n/**\n * D65 2 degree white point\n */\nColorXYZ.whitePoint = new ColorXYZ(0.95047, 1.0, 1.08883);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-converters.js\n\n\n\n\n\n\n\n// All hue values are in degrees rather than radians or normalized\n// All conversions use the D65 2 degree white point for XYZ\n// Info on conversions and constants used can be found in the following:\n// https://en.wikipedia.org/wiki/CIELAB_color_space\n// https://en.wikipedia.org/wiki/Illuminant_D65\n// https://ninedegreesbelow.com/photography/xyz-rgb.html\n// http://user.engineering.uiowa.edu/~aip/Misc/ColorFAQ.html\n// https://web.stanford.edu/~sujason/ColorBalancing/adaptation.html\n// http://brucelindbloom.com/index.html\n/**\n * Get the luminance of a color in the linear RGB space.\n * This is not the same as the relative luminance in the sRGB space for WCAG contrast calculations. Use rgbToRelativeLuminance instead.\n * @param rgb - The input color\n *\n * @public\n */\nfunction rgbToLinearLuminance(rgb) {\n    return rgb.r * 0.2126 + rgb.g * 0.7152 + rgb.b * 0.0722;\n}\n/**\n * Get the relative luminance of a color.\n * Adjusts the color to sRGB space, which is necessary for the WCAG contrast spec.\n * The alpha channel of the input is ignored.\n * @param rgb - The input color\n *\n * @public\n */\nfunction rgbToRelativeLuminance(rgb) {\n    function luminanceHelper(i) {\n        if (i <= 0.03928) {\n            return i / 12.92;\n        }\n        return Math.pow((i + 0.055) / 1.055, 2.4);\n    }\n    return rgbToLinearLuminance(new color_rgba_64_ColorRGBA64(luminanceHelper(rgb.r), luminanceHelper(rgb.g), luminanceHelper(rgb.b), 1));\n}\nconst calculateContrastRatio = (a, b) => (a + 0.05) / (b + 0.05);\n/**\n * Calculate the contrast ratio between two colors. Uses the formula described by {@link https://www.w3.org/TR/WCAG20-TECHS/G17.html | WCAG 2.0}.\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction contrastRatio(a, b) {\n    const luminanceA = rgbToRelativeLuminance(a);\n    const luminanceB = rgbToRelativeLuminance(b);\n    return luminanceA > luminanceB\n        ? calculateContrastRatio(luminanceA, luminanceB)\n        : calculateContrastRatio(luminanceB, luminanceA);\n}\nfunction calcChannelOverlay(match, background, overlay) {\n    if (overlay - background === 0) {\n        return 0;\n    }\n    else {\n        return (match - background) / (overlay - background);\n    }\n}\nfunction calcRgbOverlay(rgbMatch, rgbBackground, rgbOverlay) {\n    const rChannel = calcChannelOverlay(rgbMatch.r, rgbBackground.r, rgbOverlay.r);\n    const gChannel = calcChannelOverlay(rgbMatch.g, rgbBackground.g, rgbOverlay.g);\n    const bChannel = calcChannelOverlay(rgbMatch.b, rgbBackground.b, rgbOverlay.b);\n    return (rChannel + gChannel + bChannel) / 3;\n}\n/**\n * Calculate an overlay color that uses rgba (rgb + alpha) that matches the appearance of a given solid color when placed on the same background\n * @param rgbMatch - The solid color the overlay should match in appearance when placed over the rgbBackground\n * @param rgbBackground - The background on which the overlay rests\n * @param rgbOverlay - The rgb color of the overlay. Typically this is either pure white or pure black and when not provided will be determined automatically. This color will be used in the returned output\n * @returns The rgba (rgb + alpha) color of the overlay\n *\n * @public\n */\nfunction calculateOverlayColor(rgbMatch, rgbBackground, rgbOverlay = null) {\n    let alpha = 0;\n    let overlay = rgbOverlay;\n    if (overlay !== null) {\n        alpha = calcRgbOverlay(rgbMatch, rgbBackground, overlay);\n    }\n    else {\n        overlay = new ColorRGBA64(0, 0, 0, 1);\n        alpha = calcRgbOverlay(rgbMatch, rgbBackground, overlay);\n        if (alpha <= 0) {\n            overlay = new ColorRGBA64(1, 1, 1, 1);\n            alpha = calcRgbOverlay(rgbMatch, rgbBackground, overlay);\n        }\n    }\n    alpha = Math.round(alpha * 1000) / 1000;\n    return new ColorRGBA64(overlay.r, overlay.g, overlay.b, alpha);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorRGBA64} to a {@link @microsoft/fast-colors#ColorHSL}\n * @param rgb - the rgb color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction color_converters_rgbToHSL(rgb) {\n    const max = Math.max(rgb.r, rgb.g, rgb.b);\n    const min = Math.min(rgb.r, rgb.g, rgb.b);\n    const delta = max - min;\n    let hue = 0;\n    if (delta !== 0) {\n        if (max === rgb.r) {\n            hue = 60 * (((rgb.g - rgb.b) / delta) % 6);\n        }\n        else if (max === rgb.g) {\n            hue = 60 * ((rgb.b - rgb.r) / delta + 2);\n        }\n        else {\n            hue = 60 * ((rgb.r - rgb.g) / delta + 4);\n        }\n    }\n    if (hue < 0) {\n        hue += 360;\n    }\n    const lum = (max + min) / 2;\n    let sat = 0;\n    if (delta !== 0) {\n        sat = delta / (1 - Math.abs(2 * lum - 1));\n    }\n    return new color_hsl_ColorHSL(hue, sat, lum);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorHSL} to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param hsl - the hsl color to convert\n * @param alpha - the alpha value\n *\n * @public\n */\nfunction color_converters_hslToRGB(hsl, alpha = 1) {\n    const c = (1 - Math.abs(2 * hsl.l - 1)) * hsl.s;\n    const x = c * (1 - Math.abs(((hsl.h / 60) % 2) - 1));\n    const m = hsl.l - c / 2;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (hsl.h < 60) {\n        r = c;\n        g = x;\n        b = 0;\n    }\n    else if (hsl.h < 120) {\n        r = x;\n        g = c;\n        b = 0;\n    }\n    else if (hsl.h < 180) {\n        r = 0;\n        g = c;\n        b = x;\n    }\n    else if (hsl.h < 240) {\n        r = 0;\n        g = x;\n        b = c;\n    }\n    else if (hsl.h < 300) {\n        r = x;\n        g = 0;\n        b = c;\n    }\n    else if (hsl.h < 360) {\n        r = c;\n        g = 0;\n        b = x;\n    }\n    return new color_rgba_64_ColorRGBA64(r + m, g + m, b + m, alpha);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorRGBA64} to a {@link @microsoft/fast-colors#ColorHSV}\n * @param rgb - the rgb color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction rgbToHSV(rgb) {\n    const max = Math.max(rgb.r, rgb.g, rgb.b);\n    const min = Math.min(rgb.r, rgb.g, rgb.b);\n    const delta = max - min;\n    let hue = 0;\n    if (delta !== 0) {\n        if (max === rgb.r) {\n            hue = 60 * (((rgb.g - rgb.b) / delta) % 6);\n        }\n        else if (max === rgb.g) {\n            hue = 60 * ((rgb.b - rgb.r) / delta + 2);\n        }\n        else {\n            hue = 60 * ((rgb.r - rgb.g) / delta + 4);\n        }\n    }\n    if (hue < 0) {\n        hue += 360;\n    }\n    let sat = 0;\n    if (max !== 0) {\n        sat = delta / max;\n    }\n    return new ColorHSV(hue, sat, max);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorHSV} to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param hsv - the hsv color to convert\n * @param alpha - the alpha value\n *\n * @public\n */\nfunction hsvToRGB(hsv, alpha = 1) {\n    const c = hsv.s * hsv.v;\n    const x = c * (1 - Math.abs(((hsv.h / 60) % 2) - 1));\n    const m = hsv.v - c;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (hsv.h < 60) {\n        r = c;\n        g = x;\n        b = 0;\n    }\n    else if (hsv.h < 120) {\n        r = x;\n        g = c;\n        b = 0;\n    }\n    else if (hsv.h < 180) {\n        r = 0;\n        g = c;\n        b = x;\n    }\n    else if (hsv.h < 240) {\n        r = 0;\n        g = x;\n        b = c;\n    }\n    else if (hsv.h < 300) {\n        r = x;\n        g = 0;\n        b = c;\n    }\n    else if (hsv.h < 360) {\n        r = c;\n        g = 0;\n        b = x;\n    }\n    return new color_rgba_64_ColorRGBA64(r + m, g + m, b + m, alpha);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorLCH} to a {@link @microsoft/fast-colors#ColorLAB}\n * @param lch - the lch color to convert\n *\n * @public\n */\nfunction lchToLAB(lch) {\n    let a = 0;\n    let b = 0;\n    if (lch.h !== 0) {\n        a = Math.cos(degreesToRadians(lch.h)) * lch.c;\n        b = Math.sin(degreesToRadians(lch.h)) * lch.c;\n    }\n    return new color_lab_ColorLAB(lch.l, a, b);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorLAB} to a {@link @microsoft/fast-colors#ColorLCH}\n * @param lab - the lab color to convert\n *\n * @remarks\n * The discontinuity in the C parameter at 0 means that floating point errors will often result in values near 0 giving unpredictable results.\n * EG: 0.0000001 gives a very different result than -0.0000001\n * In cases where both a and b are very near zero this function will return an LCH color with an H of 0\n * More info about the atan2 function: {@link https://en.wikipedia.org/wiki/Atan2}\n * @public\n */\nfunction labToLCH(lab) {\n    let h = 0;\n    // Because of the discontinuity at 0 if a number is very close to 0 - often due to floating point errors - then\n    // it gives unexpected results. EG: 0.000000000001 gives a different result than 0. So just avoid any number\n    // that has both a and b very close to zero and lump it in with the h = 0 case.\n    if (Math.abs(lab.b) > 0.001 || Math.abs(lab.a) > 0.001) {\n        h = radiansToDegrees(Math.atan2(lab.b, lab.a));\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    const c = Math.sqrt(lab.a * lab.a + lab.b * lab.b);\n    return new ColorLCH(lab.l, c, h);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorLAB} to a {@link @microsoft/fast-colors#ColorXYZ}\n * @param lab - the lab color to convert\n *\n * @public\n */\nfunction labToXYZ(lab) {\n    const fy = (lab.l + 16) / 116;\n    const fx = fy + lab.a / 500;\n    const fz = fy - lab.b / 200;\n    const xcubed = Math.pow(fx, 3);\n    const ycubed = Math.pow(fy, 3);\n    const zcubed = Math.pow(fz, 3);\n    let x = 0;\n    if (xcubed > color_lab_ColorLAB.epsilon) {\n        x = xcubed;\n    }\n    else {\n        x = (116 * fx - 16) / color_lab_ColorLAB.kappa;\n    }\n    let y = 0;\n    if (lab.l > color_lab_ColorLAB.epsilon * color_lab_ColorLAB.kappa) {\n        y = ycubed;\n    }\n    else {\n        y = lab.l / color_lab_ColorLAB.kappa;\n    }\n    let z = 0;\n    if (zcubed > color_lab_ColorLAB.epsilon) {\n        z = zcubed;\n    }\n    else {\n        z = (116 * fz - 16) / color_lab_ColorLAB.kappa;\n    }\n    x = ColorXYZ.whitePoint.x * x;\n    y = ColorXYZ.whitePoint.y * y;\n    z = ColorXYZ.whitePoint.z * z;\n    return new ColorXYZ(x, y, z);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorXYZ} to a {@link @microsoft/fast-colors#ColorLAB}\n * @param xyz - the xyz color to convert\n *\n * @public\n */\nfunction xyzToLAB(xyz) {\n    function xyzToLABHelper(i) {\n        if (i > color_lab_ColorLAB.epsilon) {\n            return Math.pow(i, 1 / 3);\n        }\n        return (color_lab_ColorLAB.kappa * i + 16) / 116;\n    }\n    const x = xyzToLABHelper(xyz.x / ColorXYZ.whitePoint.x);\n    const y = xyzToLABHelper(xyz.y / ColorXYZ.whitePoint.y);\n    const z = xyzToLABHelper(xyz.z / ColorXYZ.whitePoint.z);\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return new color_lab_ColorLAB(l, a, b);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorRGBA64} to a {@link @microsoft/fast-colors#ColorXYZ}\n * @param rgb - the rgb color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n * @public\n */\nfunction rgbToXYZ(rgb) {\n    function rgbToXYZHelper(i) {\n        if (i <= 0.04045) {\n            return i / 12.92;\n        }\n        return Math.pow((i + 0.055) / 1.055, 2.4);\n    }\n    const r = rgbToXYZHelper(rgb.r);\n    const g = rgbToXYZHelper(rgb.g);\n    const b = rgbToXYZHelper(rgb.b);\n    const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n    const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n    const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n    return new ColorXYZ(x, y, z);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorXYZ} to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param xyz - the xyz color to convert\n * @param alpha - the alpha value\n *\n * @remarks\n * Note that the xyz color space is significantly larger than sRGB. As such, this can return colors rgb values greater than 1 or less than 0\n * @public\n */\nfunction xyzToRGB(xyz, alpha = 1) {\n    function xyzToRGBHelper(i) {\n        if (i <= 0.0031308) {\n            return i * 12.92;\n        }\n        return 1.055 * Math.pow(i, 1 / 2.4) - 0.055;\n    }\n    const r = xyzToRGBHelper(xyz.x * 3.2404542 - xyz.y * 1.5371385 - xyz.z * 0.4985314);\n    const g = xyzToRGBHelper(xyz.x * -0.969266 + xyz.y * 1.8760108 + xyz.z * 0.041556);\n    const b = xyzToRGBHelper(xyz.x * 0.0556434 - xyz.y * 0.2040259 + xyz.z * 1.0572252);\n    return new color_rgba_64_ColorRGBA64(r, g, b, alpha);\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorRGBA64} to a {@link @microsoft/fast-colors#ColorLAB}\n * @param rgb - the rgb color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction color_converters_rgbToLAB(rgb) {\n    return xyzToLAB(rgbToXYZ(rgb));\n}\n/**\n * Converts a {@link @microsoft/fast-colors#ColorLAB} to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param lab - the LAB color to convert\n * @param alpha - the alpha value\n *\n * @remarks\n * Note that the xyz color space (which the conversion from LAB uses) is significantly larger than sRGB. As such, this can return colors rgb values greater than 1 or less than 0\n *\n * @public\n */\nfunction color_converters_labToRGB(lab, alpha = 1) {\n    return xyzToRGB(labToXYZ(lab), alpha);\n}\n/**\n * Convert a {@link @microsoft/fast-colors#ColorRGBA64} to a {@link @microsoft/fast-colors#ColorLCH}\n *\n * @param rgb - the rgb color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction rgbToLCH(rgb) {\n    return labToLCH(color_converters_rgbToLAB(rgb));\n}\n/**\n * Convert a {@link @microsoft/fast-colors#ColorLCH} to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param lch - the LCH color to convert\n * @param alpha - the alpha value\n *\n * @public\n */\nfunction lchToRGB(lch, alpha = 1) {\n    return color_converters_labToRGB(lchToLAB(lch), alpha);\n}\n/**\n * Converts a color temperature to a {@link @microsoft/fast-colors#ColorRGBA64}\n * @param tempKelvin - the temperature to convert\n * @param alpha - the alpha value\n *\n * @public\n */\nfunction temperatureToRGB(tempKelvin, alpha = 1) {\n    // The constants I could find assumed a decimal range of [0,255] for each channel. Just going to put a /255.0 at the end\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (tempKelvin <= 1000) {\n        tempKelvin = 1000;\n    }\n    else if (tempKelvin >= 40000) {\n        tempKelvin = 40000;\n    }\n    if (tempKelvin < 6600.0) {\n        r = 255.0;\n        g = tempKelvin / 100.0 - 2.0;\n        g =\n            -155.25485562709179 -\n                0.44596950469579133 * g +\n                104.49216199393888 * Math.log(g);\n    }\n    else {\n        r = tempKelvin / 100.0 - 55.0;\n        r = 351.97690566805693 + 0.114206453784165 * r - 40.25366309332127 * Math.log(r);\n        g = tempKelvin / 100.0 - 50.0;\n        g = 325.4494125711974 + 0.07943456536662342 * g - 28.0852963507957 * Math.log(g);\n    }\n    if (tempKelvin >= 6600.0) {\n        b = 255.0;\n    }\n    else if (tempKelvin < 2000.0) {\n        b = 0.0;\n    }\n    else {\n        b = tempKelvin / 100.0 - 10;\n        b =\n            -254.76935184120902 +\n                0.8274096064007395 * b +\n                115.67994401066147 * Math.log(b);\n    }\n    return new ColorRGBA64(r / 255, g / 255, b / 255, alpha);\n}\n/**\n * Convert a rgb color to a color temperature\n * @param rgb - the color to convert\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction rgbToTemperature(rgb) {\n    let t = 0;\n    let min = 1000;\n    let max = 40000;\n    while (max - min > 0.4) {\n        t = (max + min) / 2.0;\n        const testColor = temperatureToRGB(t);\n        if (testColor.b / testColor.r >= rgb.b / rgb.r) {\n            max = t;\n        }\n        else {\n            min = t;\n        }\n    }\n    return Math.round(t);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-blending.js\n\n\n\n\n\n\n/**\n * Saturate a color using LCH color space\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction saturateViaLCH(input, saturation, saturationConstant = 18) {\n    const lch = rgbToLCH(input);\n    let sat = lch.c + saturation * saturationConstant;\n    if (sat < 0) {\n        sat = 0;\n    }\n    return lchToRGB(new ColorLCH(lch.l, sat, lch.h));\n}\n/**\n * De-saturate a color using LCH color space\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction desaturateViaLCH(input, saturation, saturationConstant = 18) {\n    return saturateViaLCH(input, -1 * saturation, saturationConstant);\n}\n/**\n * Darken a color using LAB color space\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction darkenViaLAB(input, amount, darkenConstant = 18) {\n    const lab = rgbToLAB(input);\n    const darkened = lab.l - amount * darkenConstant;\n    return labToRGB(new ColorLAB(darkened, lab.a, lab.b));\n}\n/**\n * Lighten a color using LAB color space\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction lightenViaLAB(input, amount, darkenConstant = 18) {\n    return darkenViaLAB(input, -1 * amount, darkenConstant);\n}\n/**\n * @public\n */\nfunction blendBurnChannel(bottom, top) {\n    if (top === 0.0) {\n        // Despite the discontinuity, other sources seem to use 0.0 here instead of 1\n        return 0.0;\n    }\n    return 1.0 - (1.0 - bottom) / top;\n}\n/**\n * Blends two colors with the burn mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendBurn(bottom, top) {\n    return new ColorRGBA64(blendBurnChannel(bottom.r, top.r), blendBurnChannel(bottom.g, top.g), blendBurnChannel(bottom.b, top.b), 1);\n}\n/**\n * Blends two colors\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendColor(bottom, top) {\n    const bottomHSL = rgbToHSL(bottom);\n    const topHSL = rgbToHSL(top);\n    if (topHSL.s === 0) {\n        return new ColorRGBA64(bottomHSL.l, bottomHSL.l, bottomHSL.l, 1);\n    }\n    return hslToRGB(new ColorHSL(topHSL.h, topHSL.s, bottomHSL.l));\n}\n/**\n * @public\n */\nfunction blendDarkenChannel(bottom, top) {\n    return Math.min(bottom, top);\n}\n/**\n * Blends two colors with the darken mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendDarken(bottom, top) {\n    return new ColorRGBA64(blendDarkenChannel(bottom.r, top.r), blendDarkenChannel(bottom.g, top.g), blendDarkenChannel(bottom.b, top.b), 1);\n}\n/**\n * @public\n */\nfunction blendDodgeChannel(bottom, top) {\n    if (top >= 1.0) {\n        return 1.0;\n    }\n    const retVal = bottom / (1.0 - top);\n    if (retVal >= 1.0) {\n        return 1.0;\n    }\n    return retVal;\n}\n/**\n * Blends two colors with the dodge mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendDodge(bottom, top) {\n    return new ColorRGBA64(blendDodgeChannel(bottom.r, top.r), blendDodgeChannel(bottom.g, top.g), blendDodgeChannel(bottom.b, top.b), 1);\n}\n/**\n * @public\n */\nfunction blendLightenChannel(bottom, top) {\n    return Math.max(bottom, top);\n}\n/**\n * Blends two colors with the lighten mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendLighten(bottom, top) {\n    return new ColorRGBA64(blendLightenChannel(bottom.r, top.r), blendLightenChannel(bottom.g, top.g), blendLightenChannel(bottom.b, top.b), 1);\n}\n/**\n * @public\n */\nfunction blendMultiplyChannel(bottom, top) {\n    return bottom * top;\n}\n/**\n * Blends two colors with the multiply mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendMultiply(bottom, top) {\n    return new color_rgba_64_ColorRGBA64(blendMultiplyChannel(bottom.r, top.r), blendMultiplyChannel(bottom.g, top.g), blendMultiplyChannel(bottom.b, top.b), 1);\n}\n/**\n * @public\n */\nfunction blendOverlayChannel(bottom, top) {\n    if (bottom < 0.5) {\n        return clamp(2.0 * top * bottom, 0, 1);\n    }\n    return clamp(1.0 - 2.0 * (1.0 - top) * (1.0 - bottom), 0, 1);\n}\n/**\n * Blends two colors with the overlay mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendOverlay(bottom, top) {\n    return new color_rgba_64_ColorRGBA64(blendOverlayChannel(bottom.r, top.r), blendOverlayChannel(bottom.g, top.g), blendOverlayChannel(bottom.b, top.b), 1);\n}\n/**\n * @public\n */\nfunction blendScreenChannel(bottom, top) {\n    return 1.0 - (1.0 - top) * (1.0 - bottom);\n}\n/**\n * Blends two colors with the screen mode\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blendScreen(bottom, top) {\n    return new ColorRGBA64(blendScreenChannel(bottom.r, top.r), blendScreenChannel(bottom.g, top.g), blendScreenChannel(bottom.b, top.b), 1);\n}\n/**\n * Color blend modes.\n * @public\n */\nvar ColorBlendMode;\n(function (ColorBlendMode) {\n    ColorBlendMode[ColorBlendMode["Burn"] = 0] = "Burn";\n    ColorBlendMode[ColorBlendMode["Color"] = 1] = "Color";\n    ColorBlendMode[ColorBlendMode["Darken"] = 2] = "Darken";\n    ColorBlendMode[ColorBlendMode["Dodge"] = 3] = "Dodge";\n    ColorBlendMode[ColorBlendMode["Lighten"] = 4] = "Lighten";\n    ColorBlendMode[ColorBlendMode["Multiply"] = 5] = "Multiply";\n    ColorBlendMode[ColorBlendMode["Overlay"] = 6] = "Overlay";\n    ColorBlendMode[ColorBlendMode["Screen"] = 7] = "Screen";\n})(ColorBlendMode || (ColorBlendMode = {}));\n/**\n * Blend two colors.\n *\n * @remarks\n * The alpha channel of the input is ignored\n *\n * @public\n */\nfunction blend(mode, bottom, top) {\n    switch (mode) {\n        case ColorBlendMode.Burn:\n            return blendBurn(bottom, top);\n        case ColorBlendMode.Color:\n            return blendColor(bottom, top);\n        case ColorBlendMode.Darken:\n            return blendDarken(bottom, top);\n        case ColorBlendMode.Dodge:\n            return blendDodge(bottom, top);\n        case ColorBlendMode.Lighten:\n            return blendLighten(bottom, top);\n        case ColorBlendMode.Multiply:\n            return blendMultiply(bottom, top);\n        case ColorBlendMode.Overlay:\n            return blendOverlay(bottom, top);\n        case ColorBlendMode.Screen:\n            return blendScreen(bottom, top);\n        default:\n            throw new Error("Unknown blend mode");\n    }\n}\n/**\n * Alpha channel of bottom is ignored\n * The returned color always has an alpha channel of 1\n * Different programs (eg: paint.net, photoshop) will give different answers than this occasionally but within +/- 1/255 in each channel. Just depends on the details of how they round off decimals\n *\n * @public\n */\nfunction computeAlphaBlend(bottom, top) {\n    if (top.a >= 1) {\n        return top;\n    }\n    else if (top.a <= 0) {\n        return new ColorRGBA64(bottom.r, bottom.g, bottom.b, 1);\n    }\n    const r = top.a * top.r + (1 - top.a) * bottom.r;\n    const g = top.a * top.g + (1 - top.a) * bottom.g;\n    const b = top.a * top.b + (1 - top.a) * bottom.b;\n    return new ColorRGBA64(r, g, b, 1);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-interpolation.js\n\n\n\n\n\n\n\n\n/**\n * Interpolate by RGB color space\n *\n * @public\n */\nfunction interpolateRGB(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new color_rgba_64_ColorRGBA64(lerp(position, left.r, right.r), lerp(position, left.g, right.g), lerp(position, left.b, right.b), lerp(position, left.a, right.a));\n}\n/**\n * Interpolate by HSL color space\n *\n * @public\n */\nfunction interpolateHSL(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new color_hsl_ColorHSL(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.l, right.l));\n}\n/**\n * Interpolate by HSV color space\n *\n * @public\n */\nfunction interpolateHSV(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorHSV(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.v, right.v));\n}\n/**\n * Interpolate by XYZ color space\n *\n * @public\n */\nfunction interpolateXYZ(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorXYZ(lerp(position, left.x, right.x), lerp(position, left.y, right.y), lerp(position, left.z, right.z));\n}\n/**\n * Interpolate by LAB color space\n *\n * @public\n */\nfunction interpolateLAB(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new color_lab_ColorLAB(lerp(position, left.l, right.l), lerp(position, left.a, right.a), lerp(position, left.b, right.b));\n}\n/**\n * Interpolate by LCH color space\n *\n * @public\n */\nfunction interpolateLCH(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorLCH(lerp(position, left.l, right.l), lerp(position, left.c, right.c), lerpAnglesInDegrees(position, left.h, right.h));\n}\n/**\n * Color interpolation spaces\n *\n * @public\n */\nvar ColorInterpolationSpace;\n(function (ColorInterpolationSpace) {\n    ColorInterpolationSpace[ColorInterpolationSpace["RGB"] = 0] = "RGB";\n    ColorInterpolationSpace[ColorInterpolationSpace["HSL"] = 1] = "HSL";\n    ColorInterpolationSpace[ColorInterpolationSpace["HSV"] = 2] = "HSV";\n    ColorInterpolationSpace[ColorInterpolationSpace["XYZ"] = 3] = "XYZ";\n    ColorInterpolationSpace[ColorInterpolationSpace["LAB"] = 4] = "LAB";\n    ColorInterpolationSpace[ColorInterpolationSpace["LCH"] = 5] = "LCH";\n})(ColorInterpolationSpace || (ColorInterpolationSpace = {}));\n/**\n * Interpolate by color space\n *\n * @public\n */\nfunction interpolateByColorSpace(position, space, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    switch (space) {\n        case ColorInterpolationSpace.HSL:\n            return color_converters_hslToRGB(interpolateHSL(position, color_converters_rgbToHSL(left), color_converters_rgbToHSL(right)));\n        case ColorInterpolationSpace.HSV:\n            return hsvToRGB(interpolateHSV(position, rgbToHSV(left), rgbToHSV(right)));\n        case ColorInterpolationSpace.XYZ:\n            return xyzToRGB(interpolateXYZ(position, rgbToXYZ(left), rgbToXYZ(right)));\n        case ColorInterpolationSpace.LAB:\n            return color_converters_labToRGB(interpolateLAB(position, color_converters_rgbToLAB(left), color_converters_rgbToLAB(right)));\n        case ColorInterpolationSpace.LCH:\n            return lchToRGB(interpolateLCH(position, rgbToLCH(left), rgbToLCH(right)));\n        default:\n            return interpolateRGB(position, left, right);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-scale.js\n\n\n/**\n * A color scale created from linear stops\n * @public\n */\nclass color_scale_ColorScale {\n    constructor(stops) {\n        if (stops == null || stops.length === 0) {\n            throw new Error("The stops argument must be non-empty");\n        }\n        else {\n            this.stops = this.sortColorScaleStops(stops);\n        }\n    }\n    static createBalancedColorScale(colors) {\n        if (colors == null || colors.length === 0) {\n            throw new Error("The colors argument must be non-empty");\n        }\n        const stops = new Array(colors.length);\n        for (let i = 0; i < colors.length; i++) {\n            // Special case first and last in order to avoid floating point jaggies\n            if (i === 0) {\n                stops[i] = { color: colors[i], position: 0 };\n            }\n            else if (i === colors.length - 1) {\n                stops[i] = { color: colors[i], position: 1 };\n            }\n            else {\n                stops[i] = {\n                    color: colors[i],\n                    position: i * (1 / (colors.length - 1)),\n                };\n            }\n        }\n        return new color_scale_ColorScale(stops);\n    }\n    getColor(position, interpolationMode = ColorInterpolationSpace.RGB) {\n        if (this.stops.length === 1) {\n            return this.stops[0].color;\n        }\n        else if (position <= 0) {\n            return this.stops[0].color;\n        }\n        else if (position >= 1) {\n            return this.stops[this.stops.length - 1].color;\n        }\n        let lowerIndex = 0;\n        for (let i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].position <= position) {\n                lowerIndex = i;\n            }\n        }\n        let upperIndex = lowerIndex + 1;\n        if (upperIndex >= this.stops.length) {\n            upperIndex = this.stops.length - 1;\n        }\n        const scalePosition = (position - this.stops[lowerIndex].position) *\n            (1.0 / (this.stops[upperIndex].position - this.stops[lowerIndex].position));\n        return interpolateByColorSpace(scalePosition, interpolationMode, this.stops[lowerIndex].color, this.stops[upperIndex].color);\n    }\n    trim(lowerBound, upperBound, interpolationMode = ColorInterpolationSpace.RGB) {\n        if (lowerBound < 0 || upperBound > 1 || upperBound < lowerBound) {\n            throw new Error("Invalid bounds");\n        }\n        if (lowerBound === upperBound) {\n            return new color_scale_ColorScale([\n                { color: this.getColor(lowerBound, interpolationMode), position: 0 },\n            ]);\n        }\n        const containedStops = [];\n        for (let i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].position >= lowerBound &&\n                this.stops[i].position <= upperBound) {\n                containedStops.push(this.stops[i]);\n            }\n        }\n        if (containedStops.length === 0) {\n            return new color_scale_ColorScale([\n                { color: this.getColor(lowerBound), position: lowerBound },\n                { color: this.getColor(upperBound), position: upperBound },\n            ]);\n        }\n        if (containedStops[0].position !== lowerBound) {\n            containedStops.unshift({\n                color: this.getColor(lowerBound),\n                position: lowerBound,\n            });\n        }\n        if (containedStops[containedStops.length - 1].position !== upperBound) {\n            containedStops.push({\n                color: this.getColor(upperBound),\n                position: upperBound,\n            });\n        }\n        const range = upperBound - lowerBound;\n        const finalStops = new Array(containedStops.length);\n        for (let i = 0; i < containedStops.length; i++) {\n            finalStops[i] = {\n                color: containedStops[i].color,\n                position: (containedStops[i].position - lowerBound) / range,\n            };\n        }\n        return new color_scale_ColorScale(finalStops);\n    }\n    findNextColor(position, contrast, searchDown = false, interpolationMode = ColorInterpolationSpace.RGB, contrastErrorMargin = 0.005, maxSearchIterations = 32) {\n        if (isNaN(position) || position <= 0) {\n            position = 0;\n        }\n        else if (position >= 1) {\n            position = 1;\n        }\n        const startingColor = this.getColor(position, interpolationMode);\n        const finalPosition = searchDown ? 0 : 1;\n        const finalColor = this.getColor(finalPosition, interpolationMode);\n        const finalContrast = contrastRatio(startingColor, finalColor);\n        if (finalContrast <= contrast) {\n            return finalPosition;\n        }\n        let testRangeMin = searchDown ? 0 : position;\n        let testRangeMax = searchDown ? position : 0;\n        let mid = finalPosition;\n        let iterations = 0;\n        while (iterations <= maxSearchIterations) {\n            mid = Math.abs(testRangeMax - testRangeMin) / 2 + testRangeMin;\n            const midColor = this.getColor(mid, interpolationMode);\n            const midContrast = contrastRatio(startingColor, midColor);\n            if (Math.abs(midContrast - contrast) <= contrastErrorMargin) {\n                return mid;\n            }\n            else if (midContrast > contrast) {\n                if (searchDown) {\n                    testRangeMin = mid;\n                }\n                else {\n                    testRangeMax = mid;\n                }\n            }\n            else {\n                if (searchDown) {\n                    testRangeMax = mid;\n                }\n                else {\n                    testRangeMin = mid;\n                }\n            }\n            iterations++;\n        }\n        return mid;\n    }\n    clone() {\n        const newStops = new Array(this.stops.length);\n        for (let i = 0; i < newStops.length; i++) {\n            newStops[i] = {\n                color: this.stops[i].color,\n                position: this.stops[i].position,\n            };\n        }\n        return new color_scale_ColorScale(newStops);\n    }\n    sortColorScaleStops(stops) {\n        return stops.sort((a, b) => {\n            const A = a.position;\n            const B = b.position;\n            if (A < B) {\n                return -1;\n            }\n            else if (A > B) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/parse-color.js\n\n\n\n// Matches rgb(R, G, B) where R, G, and B are integers [0 - 255]\nconst webRGBRegex = /^rgb\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){2}(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*)\\)$/i;\n// Matches rgb(R, G, B, A) where R, G, and B are integers [0 - 255] and A is [0-1] floating\nconst webRGBARegex = /^rgba\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){3}(?:0|1|0?\\.\\d*)\\s*)\\)$/i;\n// Matches #RGB and #RRGGBB, where R, G, and B are [0-9] or [A-F]\nconst hexRGBRegex = /^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i;\n// Matches #RGB and #RRGGBBAA, where R, G, B, and A are [0-9] or [A-F]\nconst hexRGBARegex = /^#((?:[0-9a-f]{8}|[0-9a-f]{4}))$/i;\n/**\n * Test if a color matches #RRGGBB or #RGB\n * @public\n */\nfunction isColorStringHexRGB(raw) {\n    return hexRGBRegex.test(raw);\n}\n/**\n * Test if a color matches #AARRGGBB or #ARGB\n * @public\n */\nfunction isColorStringHexARGB(raw) {\n    return hexRGBARegex.test(raw);\n}\n/**\n * Test if a color matches #RRGGBBAA or #RGBA\n * @public\n */\nfunction isColorStringHexRGBA(raw) {\n    return isColorStringHexARGB(raw); // No way to differentiate these two formats, so just use the same test\n}\n/**\n * Test if a color matches rgb(rr, gg, bb)\n * @public\n */\nfunction isColorStringWebRGB(raw) {\n    return webRGBRegex.test(raw);\n}\n/**\n * Test if a color matches rgba(rr, gg, bb, aa)\n *\n * @public\n */\nfunction isColorStringWebRGBA(raw) {\n    return webRGBARegex.test(raw);\n}\n/**\n * Tests whether a color is in {@link @microsoft/fast-colors#NamedColors}.\n * @param raw - the color name to test\n * @public\n */\nfunction isColorNamed(raw) {\n    return namedColorsConfigs.hasOwnProperty(raw);\n}\n/**\n * Converts a hexadecimal color string to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a color string in the form of "#RRGGBB" or "#RGB"\n * @example\n * ```ts\n * parseColorHexRGBA("#FF0000");\n * parseColorHexRGBA("#F00");\n * ```\n * @public\n */\nfunction parseColorHexRGB(raw) {\n    const result = hexRGBRegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 3) {\n        const r = digits.charAt(0);\n        const g = digits.charAt(1);\n        const b = digits.charAt(2);\n        digits = r.concat(r, g, g, b, b);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new color_rgba_64_ColorRGBA64(math_utilities_normalize((rawInt & 0xff0000) >>> 16, 0, 255), math_utilities_normalize((rawInt & 0x00ff00) >>> 8, 0, 255), math_utilities_normalize(rawInt & 0x0000ff, 0, 255), 1);\n}\n/**\n * Converts a hexadecimal color string to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a color string in the form of "#AARRGGBB" or "#ARGB"\n * @example\n * ```ts\n * parseColorHexRGBA("#AAFF0000");\n * parseColorHexRGBA("#AF00");\n * ```\n * @public\n */\nfunction parseColorHexARGB(raw) {\n    const result = hexRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 4) {\n        const a = digits.charAt(0);\n        const r = digits.charAt(1);\n        const g = digits.charAt(2);\n        const b = digits.charAt(3);\n        digits = a.concat(a, r, r, g, g, b, b);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new ColorRGBA64(normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255), normalize((rawInt & 0xff000000) >>> 24, 0, 255));\n}\n/**\n * Converts a hexadecimal color string to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a color string in the form of "#RRGGBBAA" or "#RGBA"\n * @example\n * ```ts\n * parseColorHexRGBA("#FF0000AA");\n * parseColorHexRGBA("#F00A");\n * ```\n * @public\n */\nfunction parseColorHexRGBA(raw) {\n    const result = hexRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 4) {\n        const r = digits.charAt(0);\n        const g = digits.charAt(1);\n        const b = digits.charAt(2);\n        const a = digits.charAt(3);\n        digits = r.concat(r, g, g, b, b, a, a);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new ColorRGBA64(normalize((rawInt & 0xff000000) >>> 24, 0, 255), normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255));\n}\n/**\n * Converts a rgb color string to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a color string format "rgba(RR,GG,BB)" where RR,GG,BB are [0,255]\n * @example\n * ```ts\n * parseColorWebRGB("rgba(255, 0, 0");\n * ```\n * @public\n */\nfunction parseColorWebRGB(raw) {\n    const result = webRGBRegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    const split = result[1].split(",");\n    return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), 1);\n}\n/**\n * Converts a rgba color string to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a color string format "rgba(RR,GG,BB,a)" where RR,GG,BB are [0,255] and a is [0,1]\n * @example\n * ```ts\n * parseColorWebRGBA("rgba(255, 0, 0, 1");\n * ```\n * @public\n */\nfunction parseColorWebRGBA(raw) {\n    const result = webRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    const split = result[1].split(",");\n    if (split.length === 4) {\n        return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), Number(split[3]));\n    }\n    return null;\n}\n/**\n * Converts a named color to a {@link @microsoft/fast-colors#ColorRGBA64}.\n * @param raw - a {@link https://www.w3schools.com/colors/colors_names.asp | CSS color name}.\n * @example\n * ```ts\n * parseColorNamed("red");\n * ```\n * @public\n */\nfunction parseColorNamed(raw) {\n    // const rawLower: typeof raw =  raw.toLowerCase() : raw.toString();\n    const config = namedColorsConfigs[raw.toLowerCase()];\n    return config\n        ? new ColorRGBA64(config.r, config.g, config.b, config.hasOwnProperty("a") ? config.a : void 0)\n        : null;\n}\n/**\n *\n  Expects any of the following and attempts to determine which is being used\n * #RRGGBB, #AARRGGBB, rgb(RR,GG,BB) rgba(RR,GG,BB,a),\n * or any of the {@link https://www.w3schools.com/colors/colors_names.asp | CSS color names}.\n * @param raw - the color string to parse\n * @public\n */\nfunction parseColor(raw) {\n    const rawLower = raw.toLowerCase();\n    return isColorStringHexRGB(rawLower)\n        ? parseColorHexRGB(rawLower)\n        : isColorStringHexRGBA(rawLower)\n            ? parseColorHexARGB(rawLower)\n            : isColorStringWebRGB(rawLower)\n                ? parseColorWebRGB(rawLower)\n                : isColorStringWebRGBA(rawLower)\n                    ? parseColorWebRGBA(rawLower)\n                    : isColorNamed(rawLower)\n                        ? parseColorNamed(rawLower)\n                        : null;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/color-palette.js\n\n\n\n\n\n\n/**\n * Generates a color palette\n * @public\n */\nclass ColorPalette {\n    constructor(config) {\n        this.config = Object.assign({}, ColorPalette.defaultPaletteConfig, config);\n        this.palette = [];\n        this.updatePaletteColors();\n    }\n    updatePaletteGenerationValues(newConfig) {\n        let changed = false;\n        for (const key in newConfig) {\n            if (this.config[key]) {\n                if (this.config[key].equalValue) {\n                    if (!this.config[key].equalValue(newConfig[key])) {\n                        this.config[key] = newConfig[key];\n                        changed = true;\n                    }\n                }\n                else {\n                    if (newConfig[key] !== this.config[key]) {\n                        this.config[key] = newConfig[key];\n                        changed = true;\n                    }\n                }\n            }\n        }\n        if (changed) {\n            this.updatePaletteColors();\n        }\n        return changed;\n    }\n    updatePaletteColors() {\n        const scale = this.generatePaletteColorScale();\n        for (let i = 0; i < this.config.steps; i++) {\n            this.palette[i] = scale.getColor(i / (this.config.steps - 1), this.config.interpolationMode);\n        }\n    }\n    generatePaletteColorScale() {\n        // Even when config.baseScalePosition is specified, using 0.5 for the baseColor\n        // in the baseScale gives better results. Otherwise very off-center palettes\n        // tend to go completely grey at the end furthest from the specified base color.\n        const baseColorHSL = color_converters_rgbToHSL(this.config.baseColor);\n        const baseScale = new color_scale_ColorScale([\n            { position: 0, color: this.config.scaleColorLight },\n            { position: 0.5, color: this.config.baseColor },\n            { position: 1, color: this.config.scaleColorDark },\n        ]);\n        const trimmedScale = baseScale.trim(this.config.clipLight, 1 - this.config.clipDark);\n        const trimmedLight = trimmedScale.getColor(0);\n        const trimmedDark = trimmedScale.getColor(1);\n        let adjustedLight = trimmedLight;\n        let adjustedDark = trimmedDark;\n        if (baseColorHSL.s >= this.config.saturationAdjustmentCutoff) {\n            adjustedLight = saturateViaLCH(adjustedLight, this.config.saturationLight);\n            adjustedDark = saturateViaLCH(adjustedDark, this.config.saturationDark);\n        }\n        if (this.config.multiplyLight !== 0) {\n            const multiply = blendMultiply(this.config.baseColor, adjustedLight);\n            adjustedLight = interpolateByColorSpace(this.config.multiplyLight, this.config.interpolationMode, adjustedLight, multiply);\n        }\n        if (this.config.multiplyDark !== 0) {\n            const multiply = blendMultiply(this.config.baseColor, adjustedDark);\n            adjustedDark = interpolateByColorSpace(this.config.multiplyDark, this.config.interpolationMode, adjustedDark, multiply);\n        }\n        if (this.config.overlayLight !== 0) {\n            const overlay = blendOverlay(this.config.baseColor, adjustedLight);\n            adjustedLight = interpolateByColorSpace(this.config.overlayLight, this.config.interpolationMode, adjustedLight, overlay);\n        }\n        if (this.config.overlayDark !== 0) {\n            const overlay = blendOverlay(this.config.baseColor, adjustedDark);\n            adjustedDark = interpolateByColorSpace(this.config.overlayDark, this.config.interpolationMode, adjustedDark, overlay);\n        }\n        if (this.config.baseScalePosition) {\n            if (this.config.baseScalePosition <= 0) {\n                return new color_scale_ColorScale([\n                    { position: 0, color: this.config.baseColor },\n                    { position: 1, color: adjustedDark.clamp() },\n                ]);\n            }\n            else if (this.config.baseScalePosition >= 1) {\n                return new color_scale_ColorScale([\n                    { position: 0, color: adjustedLight.clamp() },\n                    { position: 1, color: this.config.baseColor },\n                ]);\n            }\n            return new color_scale_ColorScale([\n                { position: 0, color: adjustedLight.clamp() },\n                {\n                    position: this.config.baseScalePosition,\n                    color: this.config.baseColor,\n                },\n                { position: 1, color: adjustedDark.clamp() },\n            ]);\n        }\n        return new color_scale_ColorScale([\n            { position: 0, color: adjustedLight.clamp() },\n            { position: 0.5, color: this.config.baseColor },\n            { position: 1, color: adjustedDark.clamp() },\n        ]);\n    }\n}\nColorPalette.defaultPaletteConfig = {\n    baseColor: parseColorHexRGB("#808080"),\n    steps: 11,\n    interpolationMode: ColorInterpolationSpace.RGB,\n    scaleColorLight: new color_rgba_64_ColorRGBA64(1, 1, 1, 1),\n    scaleColorDark: new color_rgba_64_ColorRGBA64(0, 0, 0, 1),\n    clipLight: 0.185,\n    clipDark: 0.16,\n    saturationAdjustmentCutoff: 0.05,\n    saturationLight: 0.35,\n    saturationDark: 1.25,\n    overlayLight: 0,\n    overlayDark: 0.25,\n    multiplyLight: 0,\n    multiplyDark: 0,\n    baseScalePosition: 0.5,\n};\nColorPalette.greyscalePaletteConfig = {\n    baseColor: parseColorHexRGB("#808080"),\n    steps: 11,\n    interpolationMode: ColorInterpolationSpace.RGB,\n    scaleColorLight: new color_rgba_64_ColorRGBA64(1, 1, 1, 1),\n    scaleColorDark: new color_rgba_64_ColorRGBA64(0, 0, 0, 1),\n    clipLight: 0,\n    clipDark: 0,\n    saturationAdjustmentCutoff: 0,\n    saturationLight: 0,\n    saturationDark: 0,\n    overlayLight: 0,\n    overlayDark: 0,\n    multiplyLight: 0,\n    multiplyDark: 0,\n    baseScalePosition: 0.5,\n};\n/**\n * Takes the input color and compares it to each color in the reference array to find the index with the closest Lightness value in HSL color space\n * @public\n */\nfunction matchLightnessIndex(input, reference) {\n    const hsl = rgbToHSL(input);\n    let bestFitValue = Number.MAX_VALUE;\n    let bestFitIndex = 0;\n    for (let i = 0; i < reference.length; i++) {\n        const ihsl = rgbToHSL(reference[i]);\n        const fitValue = Math.abs(ihsl.l - hsl.l);\n        if (fitValue < bestFitValue) {\n            bestFitValue = fitValue;\n            bestFitIndex = i;\n        }\n    }\n    return bestFitIndex;\n}\n/**\n * Generates a greyscale palette using greyscaleConfig. The Lightness (in HSL) of the input color is then compared to the greyscale palette to determine how far off center the input color should be placed. The output palette is then generated with outputSteps number of steps using colorConfig.\n * @public\n */\nfunction generateOffCenterPalette(input, outputSteps, greyscaleConfig = ColorPalette.greyscalePaletteConfig, colorConfig = ColorPalette.defaultPaletteConfig) {\n    const greyscale = new ColorPalette(Object.assign(Object.assign({}, greyscaleConfig), { steps: outputSteps }));\n    const scaleIndex = matchLightnessIndex(input, greyscale.palette);\n    return new ColorPalette(Object.assign(Object.assign({}, colorConfig), { steps: outputSteps, baseColor: input, baseScalePosition: scaleIndex / (outputSteps - 1) }));\n}\n/**\n * Take the input array of colors and extrapolates them to a larger palette of size targetSize. If preserveInputColors is false the input colors are evenly distributed into the output. Otherwise, the positions of the input colors are adjusted from a perfectly even distribution in order to ensure that the exact color values appearing in the input array also appear in the output array. The larger targetSize is compared to input.length the smaller those adjustments will be.\n *\n * @public\n */\nfunction rescale(input, targetSize, preserveInputColors) {\n    if (input.length <= 1 || targetSize <= 1) {\n        throw new Error("The input array and targetSize must both be greater than 1");\n    }\n    if (preserveInputColors && targetSize <= input.length) {\n        throw new Error("If preserveInputColors is true then targetSize must be greater than the length of the input array");\n    }\n    const stops = new Array(input.length);\n    if (preserveInputColors) {\n        for (let i = 0; i < input.length; i++) {\n            const p = i / (input.length - 1);\n            let bestFitValue = 2;\n            let bestFitIndex = 0;\n            for (let j = 0; j < targetSize; j++) {\n                const fitValue = Math.abs(j / (targetSize - 1) - p);\n                if (fitValue < bestFitValue) {\n                    bestFitValue = fitValue;\n                    bestFitIndex = j;\n                }\n                if (fitValue === 0) {\n                    break;\n                }\n            }\n            stops[i] = {\n                color: input[i],\n                position: bestFitIndex / (targetSize - 1),\n            };\n        }\n    }\n    else {\n        for (let i = 0; i < stops.length; i++) {\n            stops[i] = { color: input[i], position: i / (input.length - 1) };\n        }\n    }\n    const scale = new ColorScale(stops);\n    const retVal = new Array(targetSize);\n    for (let i = 0; i < targetSize; i++) {\n        retVal[i] = scale.getColor(i / (targetSize - 1));\n    }\n    return retVal;\n}\n/**\n * @public\n */\nconst defaultCenteredRescaleConfig = {\n    targetSize: 63,\n    spacing: 4,\n    scaleColorLight: ColorPalette.defaultPaletteConfig.scaleColorLight,\n    scaleColorDark: ColorPalette.defaultPaletteConfig.scaleColorDark,\n};\n/**\n * Takes an input array of colors and extrapolates them to a larger palette. The mapping first takes the input array and extrapolates between each color so that they are separated by spacing-1 slots. Then it adds to either end enough new colors to make up the desired targetSize. All output color slots between the defined stops are interpolated.\n * @example\n * For an input array with length 5, a targetSize of 17 and spacing of 3 the output would be:\n *  0: scaleColorLight\n *  1:\n *  2: input 0\n *  3:\n *  4:\n *  5: input 1\n *  6:\n *  7:\n *  8: input 2\n *  9:\n * 10:\n * 11: input 3\n * 12:\n * 13:\n * 14: input 4\n * 15:\n * 16: scaleColorDark\n *\n * @public\n */\nfunction centeredRescale(input, config = defaultCenteredRescaleConfig) {\n    if (input.length === 0) {\n        return [];\n    }\n    const offset = Math.floor((config.targetSize - ((input.length - 1) * config.spacing + 1)) / 2);\n    if (offset < 0) {\n        throw new Error("(targetSize - ((input.length - 1) * spacing + 1)) / 2 must be >= 0");\n    }\n    const stops = new Array(input.length + 2);\n    stops[0] = { position: 0, color: config.scaleColorLight };\n    stops[stops.length - 1] = {\n        position: 1,\n        color: config.scaleColorDark,\n    };\n    for (let i = 0; i < input.length; i++) {\n        stops[i + 1] = {\n            color: input[i],\n            position: (i * config.spacing + offset) / (config.targetSize - 1),\n        };\n    }\n    const scale = new ColorScale(stops);\n    const retVal = new Array(config.targetSize);\n    for (let i = 0; i < config.targetSize; i++) {\n        retVal[i] = scale.getColor(i / (config.targetSize - 1));\n    }\n    return retVal;\n}\n/**\n * Generates two palettes of length shortPaletteLength and longPaletteLength from a base color. The base color is compared to the default greyscale palette to determine where it should be placed. The short palette is then fed into centeredRescale to create the long palette. The colors in the short palette are always contained within the long.\n * @public\n */\nfunction generateScaledPalettes(input, shortPaletteLength = 11, config = defaultCenteredRescaleConfig) {\n    const shortPalette = generateOffCenterPalette(input, shortPaletteLength);\n    const longPalette = centeredRescale(shortPalette.palette, config);\n    return { short: shortPalette.palette, long: longPalette };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-colors/dist/component-state-color-palette.js\n\n\n\n\n\n\n\n/**\n * Creates a color palette for UI components\n * @public\n */\nclass ComponentStateColorPalette {\n    constructor(config) {\n        this.palette = [];\n        this.config = Object.assign({}, ComponentStateColorPalette.defaultPaletteConfig, config);\n        this.regenPalettes();\n    }\n    regenPalettes() {\n        let steps = this.config.steps;\n        if (isNaN(steps) || steps < 3) {\n            steps = 3;\n        }\n        // This palette is tuned to go as dark as differences between the levels can be perceived according to tests\n        // on numerous monitors in different conditions. Stay linear from white until this first cutoff.\n        const darkLum = 0.14;\n        // In the dark compression, this is the last luminance value before full black.\n        const darkestLum = 0.06;\n        // The Color for the luminance value above, placed on the ramp at it\'s normal position, so darker colors after\n        // it can be compressed.\n        const darkLumColor = new color_rgba_64_ColorRGBA64(darkLum, darkLum, darkLum, 1);\n        // The number of steps in the ramp that has been tuned for default use. This coincides with the size of the\n        // default ramp, but the palette could be generated with fewer steps to increase final contrast. This number\n        // should however stay the same.\n        const stepsForLuminanceRamp = 94;\n        // Create the reference, dark-compressed, grey palette, like:\n        // F------------------------------------------------------------------------------------[dark]------[darkest]0\n        //                                                                                      |--compressed area--|\n        const r = new ColorPalette(Object.assign(Object.assign({}, ColorPalette.greyscalePaletteConfig), { baseColor: darkLumColor, baseScalePosition: ((1 - darkLum) * 100) / stepsForLuminanceRamp, steps }));\n        const referencePalette = r.palette;\n        // Find the requested base color on the adjusted luminance reference ramp.\n        // There is no _right_ way to desaturate a color, and both methods we\'ve tested have value, so average them out.\n        const baseColorLum1 = rgbToLinearLuminance(this.config.baseColor);\n        const baseColorLum2 = color_converters_rgbToHSL(this.config.baseColor).l;\n        const baseColorLum = (baseColorLum1 + baseColorLum2) / 2;\n        const baseColorRefIndex = this.matchRelativeLuminanceIndex(baseColorLum, referencePalette);\n        const baseColorPercent = baseColorRefIndex / (steps - 1);\n        // Find the luminance location for the dark cutoff.\n        const darkRefIndex = this.matchRelativeLuminanceIndex(darkLum, referencePalette);\n        const darkPercent = darkRefIndex / (steps - 1);\n        // Issue https://github.com/microsoft/fast/issues/1904\n        // Creating a color from H, S, and a known L value is not the inverse of getting the relative\n        // luminace as above. Need to derive a relative luminance version of the color to better match on the dark end.\n        // Find the dark cutoff and darkest variations of the requested base color.\n        const baseColorHSL = color_converters_rgbToHSL(this.config.baseColor);\n        const darkBaseColor = color_converters_hslToRGB(color_hsl_ColorHSL.fromObject({\n            h: baseColorHSL.h,\n            s: baseColorHSL.s,\n            l: darkLum,\n        }));\n        const darkestBaseColor = color_converters_hslToRGB(color_hsl_ColorHSL.fromObject({\n            h: baseColorHSL.h,\n            s: baseColorHSL.s,\n            l: darkestLum,\n        }));\n        // Create the gradient stops, including the base color and anchor colors for the dark end compression.\n        const fullColorScaleStops = new Array(5);\n        fullColorScaleStops[0] = {\n            position: 0,\n            color: new color_rgba_64_ColorRGBA64(1, 1, 1, 1),\n        };\n        fullColorScaleStops[1] = {\n            position: baseColorPercent,\n            color: this.config.baseColor,\n        };\n        fullColorScaleStops[2] = {\n            position: darkPercent,\n            color: darkBaseColor,\n        };\n        fullColorScaleStops[3] = {\n            position: 0.99,\n            color: darkestBaseColor,\n        };\n        fullColorScaleStops[4] = {\n            position: 1,\n            color: new color_rgba_64_ColorRGBA64(0, 0, 0, 1),\n        };\n        const scale = new color_scale_ColorScale(fullColorScaleStops);\n        // Create the palette.\n        this.palette = new Array(steps);\n        for (let i = 0; i < steps; i++) {\n            const c = scale.getColor(i / (steps - 1), ColorInterpolationSpace.RGB);\n            this.palette[i] = c;\n        }\n    }\n    matchRelativeLuminanceIndex(input, reference) {\n        let bestFitValue = Number.MAX_VALUE;\n        let bestFitIndex = 0;\n        let i = 0;\n        const referenceLength = reference.length;\n        for (; i < referenceLength; i++) {\n            const fitValue = Math.abs(rgbToLinearLuminance(reference[i]) - input);\n            if (fitValue < bestFitValue) {\n                bestFitValue = fitValue;\n                bestFitIndex = i;\n            }\n        }\n        return bestFitIndex;\n    }\n}\nComponentStateColorPalette.defaultPaletteConfig = {\n    baseColor: parseColorHexRGB("#808080"),\n    steps: 94,\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/relative-luminance.js\n/**\n * @internal\n */\nfunction contrast(a, b) {\n    const L1 = a.relativeLuminance > b.relativeLuminance ? a : b;\n    const L2 = a.relativeLuminance > b.relativeLuminance ? b : a;\n    return (L1.relativeLuminance + 0.05) / (L2.relativeLuminance + 0.05);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/swatch.js\n\n\n/** @public */\nconst SwatchRGB = Object.freeze({\n    create(r, g, b) {\n        return new SwatchRGBImpl(r, g, b);\n    },\n    from(obj) {\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n    },\n});\n/**\n * Runtime test for an objects conformance with the SwatchRGB interface.\n * @internal\n */\nfunction isSwatchRGB(value) {\n    const test = {\n        r: 0,\n        g: 0,\n        b: 0,\n        toColorString: () => "",\n        contrast: () => 0,\n        relativeLuminance: 0,\n    };\n    for (const key in test) {\n        if (typeof test[key] !== typeof value[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * A RGB implementation of {@link Swatch}\n * @internal\n */\nclass SwatchRGBImpl extends color_rgba_64_ColorRGBA64 {\n    /**\n     *\n     * @param red - Red channel expressed as a number between 0 and 1\n     * @param green - Green channel expressed as a number between 0 and 1\n     * @param blue - Blue channel expressed as a number between 0 and 1\n     */\n    constructor(red, green, blue) {\n        super(red, green, blue, 1);\n        this.toColorString = this.toStringHexRGB;\n        this.contrast = contrast.bind(null, this);\n        this.createCSS = this.toColorString;\n        this.relativeLuminance = rgbToRelativeLuminance(this);\n    }\n    static fromObject(obj) {\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/binary-search.js\n/**\n * @internal\n */\nfunction binarySearch(valuesToSearch, searchCondition, startIndex = 0, endIndex = valuesToSearch.length - 1) {\n    if (endIndex === startIndex) {\n        return valuesToSearch[startIndex];\n    }\n    const middleIndex = Math.floor((endIndex - startIndex) / 2) + startIndex;\n    // Check to see if this passes on the item in the center of the array\n    // if it does check the previous values\n    return searchCondition(valuesToSearch[middleIndex])\n        ? binarySearch(valuesToSearch, searchCondition, startIndex, middleIndex // include this index because it passed the search condition\n        )\n        : binarySearch(valuesToSearch, searchCondition, middleIndex + 1, // exclude this index because it failed the search condition\n        endIndex);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/is-dark.js\n/*\n * A color is in "dark" if there is more contrast between #000000 and a reference\n * color than #FFFFFF and the reference color. That threshold can be expressed as a relative luminance\n * using the contrast formula as (1 + 0.5) / (R + 0.05) === (R + 0.05) / (0 + 0.05),\n * which reduces to the following, where \'R\' is the relative luminance of the reference color\n */\nconst target = (-0.1 + Math.sqrt(0.21)) / 2;\n/**\n * Determines if a color should be considered Dark Mode\n * @param color - The color to check to mode of\n * @returns boolean\n *\n * @public\n */\nfunction isDark(color) {\n    return color.relativeLuminance <= target;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/direction-by-is-dark.js\n\n/**\n * @internal\n */\nfunction directionByIsDark(color) {\n    return isDark(color) ? -1 : 1;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/palette.js\n\n\n\n\n\nfunction palette_create(rOrSource, g, b) {\n    if (typeof rOrSource === "number") {\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        return PaletteRGB.from(SwatchRGB.create(rOrSource, g, b));\n    }\n    else {\n        return PaletteRGB.from(rOrSource);\n    }\n}\nfunction from(source) {\n    return isSwatchRGB(source)\n        ? PaletteRGBImpl.from(source)\n        : PaletteRGBImpl.from(SwatchRGB.create(source.r, source.g, source.b));\n}\n/** @public */\nconst PaletteRGB = Object.freeze({\n    create: palette_create,\n    from,\n});\n/**\n * A {@link Palette} representing RGB swatch values.\n * @public\n */\nclass PaletteRGBImpl {\n    /**\n     *\n     * @param source - The source color for the palette\n     * @param swatches - All swatches in the palette\n     */\n    constructor(source, swatches) {\n        this.closestIndexCache = new Map();\n        this.source = source;\n        this.swatches = swatches;\n        this.reversedSwatches = Object.freeze([...this.swatches].reverse());\n        this.lastIndex = this.swatches.length - 1;\n    }\n    /**\n     * {@inheritdoc Palette.colorContrast}\n     */\n    colorContrast(reference, contrastTarget, initialSearchIndex, direction) {\n        if (initialSearchIndex === undefined) {\n            initialSearchIndex = this.closestIndexOf(reference);\n        }\n        let source = this.swatches;\n        const endSearchIndex = this.lastIndex;\n        let startSearchIndex = initialSearchIndex;\n        if (direction === undefined) {\n            direction = directionByIsDark(reference);\n        }\n        const condition = (value) => contrast(reference, value) >= contrastTarget;\n        if (direction === -1) {\n            source = this.reversedSwatches;\n            startSearchIndex = endSearchIndex - startSearchIndex;\n        }\n        return binarySearch(source, condition, startSearchIndex, endSearchIndex);\n    }\n    /**\n     * {@inheritdoc Palette.get}\n     */\n    get(index) {\n        return this.swatches[index] || this.swatches[clamp(index, 0, this.lastIndex)];\n    }\n    /**\n     * {@inheritdoc Palette.closestIndexOf}\n     */\n    closestIndexOf(reference) {\n        if (this.closestIndexCache.has(reference.relativeLuminance)) {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return this.closestIndexCache.get(reference.relativeLuminance);\n        }\n        let index = this.swatches.indexOf(reference);\n        if (index !== -1) {\n            this.closestIndexCache.set(reference.relativeLuminance, index);\n            return index;\n        }\n        const closest = this.swatches.reduce((previous, next) => Math.abs(next.relativeLuminance - reference.relativeLuminance) <\n            Math.abs(previous.relativeLuminance - reference.relativeLuminance)\n            ? next\n            : previous);\n        index = this.swatches.indexOf(closest);\n        this.closestIndexCache.set(reference.relativeLuminance, index);\n        return index;\n    }\n    /**\n     * Create a color palette from a provided swatch\n     * @param source - The source swatch to create a palette from\n     * @returns\n     */\n    static from(source) {\n        return new PaletteRGBImpl(source, Object.freeze(new ComponentStateColorPalette({\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            baseColor: color_rgba_64_ColorRGBA64.fromObject(source),\n        }).palette.map(x => {\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            const _x = parseColorHexRGB(x.toStringHexRGB());\n            return SwatchRGB.create(_x.r, _x.g, _x.b);\n        })));\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/accent-fill.js\n/**\n * @internal\n */\nfunction accentFill(palette, neutralPalette, reference, hoverDelta, activeDelta, focusDelta, neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta) {\n    const accent = palette.source;\n    const referenceIndex = neutralPalette.closestIndexOf(reference);\n    const swapThreshold = Math.max(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta);\n    const direction = referenceIndex >= swapThreshold ? -1 : 1;\n    const accentIndex = palette.closestIndexOf(accent);\n    const hoverIndex = accentIndex;\n    const restIndex = hoverIndex + direction * -1 * hoverDelta;\n    const activeIndex = restIndex + direction * activeDelta;\n    const focusIndex = restIndex + direction * focusDelta;\n    return {\n        rest: palette.get(restIndex),\n        hover: palette.get(hoverIndex),\n        active: palette.get(activeIndex),\n        focus: palette.get(focusIndex),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/accent-foreground.js\n\n/**\n * @internal\n */\nfunction accentForeground(palette, reference, contrastTarget, restDelta, hoverDelta, activeDelta, focusDelta) {\n    const accent = palette.source;\n    const accentIndex = palette.closestIndexOf(accent);\n    const direction = directionByIsDark(reference);\n    const startIndex = accentIndex +\n        (direction === 1\n            ? Math.min(restDelta, hoverDelta)\n            : Math.max(direction * restDelta, direction * hoverDelta));\n    const accessibleSwatch = palette.colorContrast(reference, contrastTarget, startIndex, direction);\n    const accessibleIndex1 = palette.closestIndexOf(accessibleSwatch);\n    const accessibleIndex2 = accessibleIndex1 + direction * Math.abs(restDelta - hoverDelta);\n    const indexOneIsRestState = direction === 1\n        ? restDelta < hoverDelta\n        : direction * restDelta > direction * hoverDelta;\n    let restIndex;\n    let hoverIndex;\n    if (indexOneIsRestState) {\n        restIndex = accessibleIndex1;\n        hoverIndex = accessibleIndex2;\n    }\n    else {\n        restIndex = accessibleIndex2;\n        hoverIndex = accessibleIndex1;\n    }\n    return {\n        rest: palette.get(restIndex),\n        hover: palette.get(hoverIndex),\n        active: palette.get(restIndex + direction * activeDelta),\n        focus: palette.get(restIndex + direction * focusDelta),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/color-constants.js\n\n\n/**\n * @internal\n */\nconst white = SwatchRGB.create(1, 1, 1);\n/**\n * @internal\n */\nconst black = SwatchRGB.create(0, 0, 0);\n/**\n * @internal\n */\n/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\nconst middleGrey = SwatchRGB.from(parseColorHexRGB("#808080"));\n/**\n * @internal\n */\n/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\nconst accentBase = SwatchRGB.from(parseColorHexRGB("#DA1A5F"));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/foreground-on-accent.js\n\n/**\n * @internal\n */\nfunction foregroundOnAccent(reference, contrastTarget) {\n    return reference.contrast(white) >= contrastTarget ? white : black;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-fill.js\n/**\n *\n * @param palette - The palette to operate on\n * @param reference - The reference color to calculate a color for\n * @param delta - The offset from the reference\'s location\n * @param threshold - Determines if a lighter or darker color than the reference will be picked.\n * @returns\n *\n * @internal\n */\nfunction neutralFill(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta) {\n    const referenceIndex = palette.closestIndexOf(reference);\n    const threshold = Math.max(restDelta, hoverDelta, activeDelta, focusDelta);\n    const direction = referenceIndex >= threshold ? -1 : 1;\n    return {\n        rest: palette.get(referenceIndex + direction * restDelta),\n        hover: palette.get(referenceIndex + direction * hoverDelta),\n        active: palette.get(referenceIndex + direction * activeDelta),\n        focus: palette.get(referenceIndex + direction * focusDelta),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-fill-input.js\n\n/**\n * @internal\n */\nfunction neutralFillInput(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta) {\n    const direction = directionByIsDark(reference);\n    const referenceIndex = palette.closestIndexOf(reference);\n    return {\n        rest: palette.get(referenceIndex - direction * restDelta),\n        hover: palette.get(referenceIndex - direction * hoverDelta),\n        active: palette.get(referenceIndex - direction * activeDelta),\n        focus: palette.get(referenceIndex - direction * focusDelta),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-fill-layer.js\n/**\n * @internal\n */\nfunction neutralFillLayer(palette, reference, delta) {\n    const referenceIndex = palette.closestIndexOf(reference);\n    return palette.get(referenceIndex - (referenceIndex < delta ? delta * -1 : delta));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-fill-stealth.js\n/**\n * @internal\n */\nfunction neutralFillStealth(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta, fillRestDelta, fillHoverDelta, fillActiveDelta, fillFocusDelta) {\n    const swapThreshold = Math.max(restDelta, hoverDelta, activeDelta, focusDelta, fillRestDelta, fillHoverDelta, fillActiveDelta, fillFocusDelta);\n    const referenceIndex = palette.closestIndexOf(reference);\n    const direction = referenceIndex >= swapThreshold ? -1 : 1;\n    return {\n        rest: palette.get(referenceIndex + direction * restDelta),\n        hover: palette.get(referenceIndex + direction * hoverDelta),\n        active: palette.get(referenceIndex + direction * activeDelta),\n        focus: palette.get(referenceIndex + direction * focusDelta),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-fill-contrast.js\n\n/**\n * @internal\n */\nfunction neutralFillContrast(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta) {\n    const direction = directionByIsDark(reference);\n    const accessibleIndex = palette.closestIndexOf(palette.colorContrast(reference, 4.5));\n    const accessibleIndex2 = accessibleIndex + direction * Math.abs(restDelta - hoverDelta);\n    const indexOneIsRest = direction === 1\n        ? restDelta < hoverDelta\n        : direction * restDelta > direction * hoverDelta;\n    let restIndex;\n    let hoverIndex;\n    if (indexOneIsRest) {\n        restIndex = accessibleIndex;\n        hoverIndex = accessibleIndex2;\n    }\n    else {\n        restIndex = accessibleIndex2;\n        hoverIndex = accessibleIndex;\n    }\n    return {\n        rest: palette.get(restIndex),\n        hover: palette.get(hoverIndex),\n        active: palette.get(restIndex + direction * activeDelta),\n        focus: palette.get(restIndex + direction * focusDelta),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/focus-stroke.js\n\n/** @internal */\nfunction focusStrokeOuter(palette, reference) {\n    return palette.colorContrast(reference, 3.5);\n}\n/** @internal */\nfunction focusStrokeInner(palette, reference, focusColor) {\n    return palette.colorContrast(focusColor, 3.5, palette.closestIndexOf(palette.source), (directionByIsDark(reference) * -1));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-foreground.js\n/**\n * @internal\n */\nfunction neutralForeground(palette, reference) {\n    return palette.colorContrast(reference, 14);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-foreground-hint.js\n/**\n * The neutralForegroundHint color recipe\n * @param palette - The palette to operate on\n * @param reference - The reference color\n *\n * @internal\n */\nfunction neutralForegroundHint(palette, reference) {\n    return palette.colorContrast(reference, 4.5);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/utilities/base-layer-luminance.js\n\nfunction baseLayerLuminanceSwatch(luminance) {\n    return SwatchRGB.create(luminance, luminance, luminance);\n}\n/**\n * Recommended values for light and dark mode for {@link @microsoft/fast-components#baseLayerLuminance}.\n *\n * @public\n */\nconst StandardLuminance = {\n    LightMode: 1,\n    DarkMode: 0.23,\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-card-container.js\n\n/**\n * @internal\n */\nfunction neutralLayerCardContainer(palette, relativeLuminance, layerDelta) {\n    return palette.get(palette.closestIndexOf(baseLayerLuminanceSwatch(relativeLuminance)) + layerDelta);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-floating.js\n\n/**\n * @internal\n */\nfunction neutralLayerFloating(palette, relativeLuminance, layerDelta) {\n    const cardIndex = palette.closestIndexOf(baseLayerLuminanceSwatch(relativeLuminance)) - layerDelta;\n    return palette.get(cardIndex - layerDelta);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-1.js\n\nfunction neutralLayer1(palette, baseLayerLuminance) {\n    return palette.get(palette.closestIndexOf(baseLayerLuminanceSwatch(baseLayerLuminance)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-2.js\n\n/**\n * @internal\n */\nfunction neutralLayer2Index(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) {\n    return Math.max(palette.closestIndexOf(baseLayerLuminanceSwatch(luminance)) + layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta);\n}\n/**\n * @internal\n */\nfunction neutralLayer2(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) {\n    return palette.get(neutralLayer2Index(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-3.js\n\n/**\n * @internal\n */\nfunction neutralLayer3(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) {\n    return palette.get(neutralLayer2Index(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) + layerDelta);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-layer-4.js\n\n/**\n * @internal\n */\nfunction neutralLayer4(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) {\n    return palette.get(neutralLayer2Index(palette, luminance, layerDelta, fillRestDelta, fillHoverDelta, fillActiveDelta) +\n        layerDelta * 2);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-stroke.js\n\n/**\n * @internal\n */\nfunction neutralStroke(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta) {\n    const referenceIndex = palette.closestIndexOf(reference);\n    const direction = directionByIsDark(reference);\n    const restIndex = referenceIndex + direction * restDelta;\n    const hoverIndex = restIndex + direction * (hoverDelta - restDelta);\n    const activeIndex = restIndex + direction * (activeDelta - restDelta);\n    const focusIndex = restIndex + direction * (focusDelta - restDelta);\n    return {\n        rest: palette.get(restIndex),\n        hover: palette.get(hoverIndex),\n        active: palette.get(activeIndex),\n        focus: palette.get(focusIndex),\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/color/recipes/neutral-stroke-divider.js\n\n/**\n * The neutralStrokeDivider color recipe\n * @param palette - The palette to operate on\n * @param reference - The reference color\n * @param delta - The offset from the reference\n *\n * @internal\n */\nfunction neutralStrokeDivider(palette, reference, delta) {\n    return palette.get(palette.closestIndexOf(reference) + directionByIsDark(reference) * delta);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/design-tokens.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { create: design_tokens_create } = DesignToken;\nfunction createNonCss(name) {\n    return DesignToken.create({ name, cssCustomPropertyName: null });\n}\n// General tokens\n/** @public */\nconst bodyFont = design_tokens_create("body-font").withDefault(\'aktiv-grotesk, "Segoe UI", Arial, Helvetica, sans-serif\');\n/** @public */\nconst baseHeightMultiplier = design_tokens_create("base-height-multiplier").withDefault(10);\n/** @public */\nconst baseHorizontalSpacingMultiplier = design_tokens_create("base-horizontal-spacing-multiplier").withDefault(3);\n/** @public */\nconst baseLayerLuminance = design_tokens_create("base-layer-luminance").withDefault(StandardLuminance.DarkMode);\n/** @public */\nconst controlCornerRadius = design_tokens_create("control-corner-radius").withDefault(4);\n/** @public */\nconst density = design_tokens_create("density").withDefault(0);\n/** @public */\nconst designUnit = design_tokens_create("design-unit").withDefault(4);\n/** @public */\nconst direction = design_tokens_create("direction").withDefault(Direction.ltr);\n/** @public */\nconst disabledOpacity = design_tokens_create("disabled-opacity").withDefault(0.3);\n/** @public */\nconst strokeWidth = design_tokens_create("stroke-width").withDefault(1);\n/** @public */\nconst focusStrokeWidth = design_tokens_create("focus-stroke-width").withDefault(2);\n// Typography values\n/** @public */\nconst typeRampBaseFontSize = design_tokens_create("type-ramp-base-font-size").withDefault("14px");\n/** @public */\nconst typeRampBaseLineHeight = design_tokens_create("type-ramp-base-line-height").withDefault("20px");\n/** @public */\nconst typeRampMinus1FontSize = design_tokens_create("type-ramp-minus-1-font-size").withDefault("12px");\n/** @public */\nconst typeRampMinus1LineHeight = design_tokens_create("type-ramp-minus-1-line-height").withDefault("16px");\n/** @public */\nconst typeRampMinus2FontSize = design_tokens_create("type-ramp-minus-2-font-size").withDefault("10px");\n/** @public */\nconst typeRampMinus2LineHeight = design_tokens_create("type-ramp-minus-2-line-height").withDefault("16px");\n/** @public */\nconst typeRampPlus1FontSize = design_tokens_create("type-ramp-plus-1-font-size").withDefault("16px");\n/** @public */\nconst typeRampPlus1LineHeight = design_tokens_create("type-ramp-plus-1-line-height").withDefault("24px");\n/** @public */\nconst typeRampPlus2FontSize = design_tokens_create("type-ramp-plus-2-font-size").withDefault("20px");\n/** @public */\nconst typeRampPlus2LineHeight = design_tokens_create("type-ramp-plus-2-line-height").withDefault("28px");\n/** @public */\nconst typeRampPlus3FontSize = design_tokens_create("type-ramp-plus-3-font-size").withDefault("28px");\n/** @public */\nconst typeRampPlus3LineHeight = design_tokens_create("type-ramp-plus-3-line-height").withDefault("36px");\n/** @public */\nconst typeRampPlus4FontSize = design_tokens_create("type-ramp-plus-4-font-size").withDefault("34px");\n/** @public */\nconst typeRampPlus4LineHeight = design_tokens_create("type-ramp-plus-4-line-height").withDefault("44px");\n/** @public */\nconst typeRampPlus5FontSize = design_tokens_create("type-ramp-plus-5-font-size").withDefault("46px");\n/** @public */\nconst typeRampPlus5LineHeight = design_tokens_create("type-ramp-plus-5-line-height").withDefault("56px");\n/** @public */\nconst typeRampPlus6FontSize = design_tokens_create("type-ramp-plus-6-font-size").withDefault("60px");\n/** @public */\nconst typeRampPlus6LineHeight = design_tokens_create("type-ramp-plus-6-line-height").withDefault("72px");\n// Color recipe values\n/** @public */\nconst accentFillRestDelta = createNonCss("accent-fill-rest-delta").withDefault(0);\n/** @public */\nconst accentFillHoverDelta = createNonCss("accent-fill-hover-delta").withDefault(4);\n/** @public */\nconst accentFillActiveDelta = createNonCss("accent-fill-active-delta").withDefault(-5);\n/** @public */\nconst accentFillFocusDelta = createNonCss("accent-fill-focus-delta").withDefault(0);\n/** @public */\nconst accentForegroundRestDelta = createNonCss("accent-foreground-rest-delta").withDefault(0);\n/** @public */\nconst accentForegroundHoverDelta = createNonCss("accent-foreground-hover-delta").withDefault(6);\n/** @public */\nconst accentForegroundActiveDelta = createNonCss("accent-foreground-active-delta").withDefault(-4);\n/** @public */\nconst accentForegroundFocusDelta = createNonCss("accent-foreground-focus-delta").withDefault(0);\n/** @public */\nconst neutralFillRestDelta = createNonCss("neutral-fill-rest-delta").withDefault(7);\n/** @public */\nconst neutralFillHoverDelta = createNonCss("neutral-fill-hover-delta").withDefault(10);\n/** @public */\nconst neutralFillActiveDelta = createNonCss("neutral-fill-active-delta").withDefault(5);\n/** @public */\nconst neutralFillFocusDelta = createNonCss("neutral-fill-focus-delta").withDefault(0);\n/** @public */\nconst neutralFillInputRestDelta = createNonCss("neutral-fill-input-rest-delta").withDefault(0);\n/** @public */\nconst neutralFillInputHoverDelta = createNonCss("neutral-fill-input-hover-delta").withDefault(0);\n/** @public */\nconst neutralFillInputActiveDelta = createNonCss("neutral-fill-input-active-delta").withDefault(0);\n/** @public */\nconst neutralFillInputFocusDelta = createNonCss("neutral-fill-input-focus-delta").withDefault(0);\n/** @public */\nconst neutralFillStealthRestDelta = createNonCss("neutral-fill-stealth-rest-delta").withDefault(0);\n/** @public */\nconst neutralFillStealthHoverDelta = createNonCss("neutral-fill-stealth-hover-delta").withDefault(5);\n/** @public */\nconst neutralFillStealthActiveDelta = createNonCss("neutral-fill-stealth-active-delta").withDefault(3);\n/** @public */\nconst neutralFillStealthFocusDelta = createNonCss("neutral-fill-stealth-focus-delta").withDefault(0);\n/** @public */\nconst neutralFillStrongRestDelta = createNonCss("neutral-fill-strong-rest-delta").withDefault(0);\n/** @public */\nconst neutralFillStrongHoverDelta = createNonCss("neutral-fill-strong-hover-delta").withDefault(8);\n/** @public */\nconst neutralFillStrongActiveDelta = createNonCss("neutral-fill-strong-active-delta").withDefault(-5);\n/** @public */\nconst neutralFillStrongFocusDelta = createNonCss("neutral-fill-strong-focus-delta").withDefault(0);\n/** @public */\nconst neutralFillLayerRestDelta = createNonCss("neutral-fill-layer-rest-delta").withDefault(3);\n/** @public */\nconst neutralStrokeRestDelta = createNonCss("neutral-stroke-rest-delta").withDefault(25);\n/** @public */\nconst neutralStrokeHoverDelta = createNonCss("neutral-stroke-hover-delta").withDefault(40);\n/** @public */\nconst neutralStrokeActiveDelta = createNonCss("neutral-stroke-active-delta").withDefault(16);\n/** @public */\nconst neutralStrokeFocusDelta = createNonCss("neutral-stroke-focus-delta").withDefault(25);\n/** @public */\nconst neutralStrokeDividerRestDelta = createNonCss("neutral-stroke-divider-rest-delta").withDefault(8);\n// Color recipes\n/** @public */\nconst neutralColor = design_tokens_create("neutral-color").withDefault(middleGrey);\n/** @public */\nconst neutralPalette = createNonCss("neutral-palette").withDefault((element) => PaletteRGB.from(neutralColor.getValueFor(element)));\n/** @public */\nconst accentColor = design_tokens_create("accent-color").withDefault(accentBase);\n/** @public */\nconst accentPalette = createNonCss("accent-palette").withDefault((element) => PaletteRGB.from(accentColor.getValueFor(element)));\n// Neutral Layer Card Container\n/** @public */\nconst neutralLayerCardContainerRecipe = createNonCss("neutral-layer-card-container-recipe").withDefault({\n    evaluate: (element) => neutralLayerCardContainer(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayerCardContainer = design_tokens_create("neutral-layer-card-container").withDefault((element) => neutralLayerCardContainerRecipe.getValueFor(element).evaluate(element));\n// Neutral Layer Floating\n/** @public */\nconst neutralLayerFloatingRecipe = createNonCss("neutral-layer-floating-recipe").withDefault({\n    evaluate: (element) => neutralLayerFloating(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayerFloating = design_tokens_create("neutral-layer-floating").withDefault((element) => neutralLayerFloatingRecipe.getValueFor(element).evaluate(element));\n// Neutral Layer 1\n/** @public */\nconst neutralLayer1Recipe = createNonCss("neutral-layer-1-recipe").withDefault({\n    evaluate: (element) => neutralLayer1(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayer1 = design_tokens_create("neutral-layer-1").withDefault((element) => neutralLayer1Recipe.getValueFor(element).evaluate(element));\n// Neutral Layer 2\n/** @public */\nconst neutralLayer2Recipe = createNonCss("neutral-layer-2-recipe").withDefault({\n    evaluate: (element) => neutralLayer2(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayer2 = design_tokens_create("neutral-layer-2").withDefault((element) => neutralLayer2Recipe.getValueFor(element).evaluate(element));\n// Neutral Layer 3\n/** @public */\nconst neutralLayer3Recipe = createNonCss("neutral-layer-3-recipe").withDefault({\n    evaluate: (element) => neutralLayer3(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayer3 = design_tokens_create("neutral-layer-3").withDefault((element) => neutralLayer3Recipe.getValueFor(element).evaluate(element));\n// Neutral Layer 4\n/** @public */\nconst neutralLayer4Recipe = createNonCss("neutral-layer-4-recipe").withDefault({\n    evaluate: (element) => neutralLayer4(neutralPalette.getValueFor(element), baseLayerLuminance.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralLayer4 = design_tokens_create("neutral-layer-4").withDefault((element) => neutralLayer4Recipe.getValueFor(element).evaluate(element));\n/** @public */\nconst fillColor = design_tokens_create("fill-color").withDefault(element => design_tokens_neutralLayer1.getValueFor(element));\nvar ContrastTarget;\n(function (ContrastTarget) {\n    ContrastTarget[ContrastTarget["normal"] = 4.5] = "normal";\n    ContrastTarget[ContrastTarget["large"] = 7] = "large";\n})(ContrastTarget || (ContrastTarget = {}));\n// Accent Fill\n/** @public */\nconst accentFillRecipe = design_tokens_create({\n    name: "accent-fill-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => accentFill(accentPalette.getValueFor(element), neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), accentFillHoverDelta.getValueFor(element), accentFillActiveDelta.getValueFor(element), accentFillFocusDelta.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element)),\n});\n/** @public */\nconst accentFillRest = design_tokens_create("accent-fill-rest").withDefault((element) => {\n    return accentFillRecipe.getValueFor(element).evaluate(element).rest;\n});\n/** @public */\nconst accentFillHover = design_tokens_create("accent-fill-hover").withDefault((element) => {\n    return accentFillRecipe.getValueFor(element).evaluate(element).hover;\n});\n/** @public */\nconst accentFillActive = design_tokens_create("accent-fill-active").withDefault((element) => {\n    return accentFillRecipe.getValueFor(element).evaluate(element).active;\n});\n/** @public */\nconst accentFillFocus = design_tokens_create("accent-fill-focus").withDefault((element) => {\n    return accentFillRecipe.getValueFor(element).evaluate(element).focus;\n});\n// Foreground On Accent\nconst foregroundOnAccentByContrast = (contrast) => (element, reference) => {\n    return foregroundOnAccent(reference || accentFillRest.getValueFor(element), contrast);\n};\n/** @public */\nconst foregroundOnAccentRecipe = createNonCss("foreground-on-accent-recipe").withDefault({\n    evaluate: (element, reference) => foregroundOnAccentByContrast(ContrastTarget.normal)(element, reference),\n});\n/** @public */\nconst foregroundOnAccentRest = design_tokens_create("foreground-on-accent-rest").withDefault((element) => foregroundOnAccentRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillRest.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentHover = design_tokens_create("foreground-on-accent-hover").withDefault((element) => foregroundOnAccentRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillHover.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentActive = design_tokens_create("foreground-on-accent-active").withDefault((element) => foregroundOnAccentRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillActive.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentFocus = design_tokens_create("foreground-on-accent-focus").withDefault((element) => foregroundOnAccentRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillFocus.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentLargeRecipe = createNonCss("foreground-on-accent-large-recipe").withDefault({\n    evaluate: (element, reference) => foregroundOnAccentByContrast(ContrastTarget.large)(element, reference),\n});\n/** @public */\nconst foregroundOnAccentRestLarge = design_tokens_create("foreground-on-accent-rest-large").withDefault((element) => foregroundOnAccentLargeRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillRest.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentHoverLarge = design_tokens_create("foreground-on-accent-hover-large").withDefault((element) => foregroundOnAccentLargeRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillHover.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentActiveLarge = design_tokens_create("foreground-on-accent-active-large").withDefault((element) => foregroundOnAccentLargeRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillActive.getValueFor(element)));\n/** @public */\nconst foregroundOnAccentFocusLarge = design_tokens_create("foreground-on-accent-focus-large").withDefault((element) => foregroundOnAccentLargeRecipe\n    .getValueFor(element)\n    .evaluate(element, accentFillFocus.getValueFor(element)));\n// Accent Foreground\nconst accentForegroundByContrast = (contrast) => (element, reference) => accentForeground(accentPalette.getValueFor(element), reference || fillColor.getValueFor(element), contrast, accentForegroundRestDelta.getValueFor(element), accentForegroundHoverDelta.getValueFor(element), accentForegroundActiveDelta.getValueFor(element), accentForegroundFocusDelta.getValueFor(element));\n/** @public */\nconst accentForegroundRecipe = design_tokens_create({\n    name: "accent-foreground-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => accentForegroundByContrast(ContrastTarget.normal)(element, reference),\n});\n/** @public */\nconst accentForegroundRest = design_tokens_create("accent-foreground-rest").withDefault((element) => accentForegroundRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst accentForegroundHover = design_tokens_create("accent-foreground-hover").withDefault((element) => accentForegroundRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst accentForegroundActive = design_tokens_create("accent-foreground-active").withDefault((element) => accentForegroundRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst accentForegroundFocus = design_tokens_create("accent-foreground-focus").withDefault((element) => accentForegroundRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Fill\n/** @public */\nconst neutralFillRecipe = design_tokens_create({\n    name: "neutral-fill-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => neutralFill(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element), neutralFillFocusDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralFillRest = design_tokens_create("neutral-fill-rest").withDefault((element) => neutralFillRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst neutralFillHover = design_tokens_create("neutral-fill-hover").withDefault((element) => neutralFillRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst neutralFillActive = design_tokens_create("neutral-fill-active").withDefault((element) => neutralFillRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst neutralFillFocus = design_tokens_create("neutral-fill-focus").withDefault((element) => neutralFillRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Fill Input\n/** @public */\nconst neutralFillInputRecipe = design_tokens_create({\n    name: "neutral-fill-input-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => neutralFillInput(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralFillInputRestDelta.getValueFor(element), neutralFillInputHoverDelta.getValueFor(element), neutralFillInputActiveDelta.getValueFor(element), neutralFillInputFocusDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralFillInputRest = design_tokens_create("neutral-fill-input-rest").withDefault((element) => neutralFillInputRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst neutralFillInputHover = design_tokens_create("neutral-fill-input-hover").withDefault((element) => neutralFillInputRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst neutralFillInputActive = design_tokens_create("neutral-fill-input-active").withDefault((element) => neutralFillInputRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst neutralFillInputFocus = design_tokens_create("neutral-fill-input-focus").withDefault((element) => neutralFillInputRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Fill Stealth\n/** @public */\nconst neutralFillStealthRecipe = design_tokens_create({\n    name: "neutral-fill-stealth-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => neutralFillStealth(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralFillStealthRestDelta.getValueFor(element), neutralFillStealthHoverDelta.getValueFor(element), neutralFillStealthActiveDelta.getValueFor(element), neutralFillStealthFocusDelta.getValueFor(element), neutralFillRestDelta.getValueFor(element), neutralFillHoverDelta.getValueFor(element), neutralFillActiveDelta.getValueFor(element), neutralFillFocusDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralFillStealthRest = design_tokens_create("neutral-fill-stealth-rest").withDefault((element) => neutralFillStealthRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst neutralFillStealthHover = design_tokens_create("neutral-fill-stealth-hover").withDefault((element) => neutralFillStealthRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst neutralFillStealthActive = design_tokens_create("neutral-fill-stealth-active").withDefault((element) => neutralFillStealthRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst neutralFillStealthFocus = design_tokens_create("neutral-fill-stealth-focus").withDefault((element) => neutralFillStealthRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Fill Strong\n/** @public */\nconst neutralFillStrongRecipe = design_tokens_create({\n    name: "neutral-fill-strong-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element, reference) => neutralFillContrast(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralFillStrongRestDelta.getValueFor(element), neutralFillStrongHoverDelta.getValueFor(element), neutralFillStrongActiveDelta.getValueFor(element), neutralFillStrongFocusDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralFillStrongRest = design_tokens_create("neutral-fill-strong-rest").withDefault((element) => neutralFillStrongRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst neutralFillStrongHover = design_tokens_create("neutral-fill-strong-hover").withDefault((element) => neutralFillStrongRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst neutralFillStrongActive = design_tokens_create("neutral-fill-strong-active").withDefault((element) => neutralFillStrongRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst neutralFillStrongFocus = design_tokens_create("neutral-fill-strong-focus").withDefault((element) => neutralFillStrongRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Fill Layer\n/** @public */\nconst neutralFillLayerRecipe = createNonCss("neutral-fill-layer-recipe").withDefault({\n    evaluate: (element, reference) => neutralFillLayer(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralFillLayerRestDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralFillLayerRest = design_tokens_create("neutral-fill-layer-rest").withDefault((element) => neutralFillLayerRecipe.getValueFor(element).evaluate(element));\n// Focus Stroke Outer\n/** @public */\nconst focusStrokeOuterRecipe = createNonCss("focus-stroke-outer-recipe").withDefault({\n    evaluate: (element) => focusStrokeOuter(neutralPalette.getValueFor(element), fillColor.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_focusStrokeOuter = design_tokens_create("focus-stroke-outer").withDefault((element) => focusStrokeOuterRecipe.getValueFor(element).evaluate(element));\n// Focus Stroke Inner\n/** @public */\nconst focusStrokeInnerRecipe = createNonCss("focus-stroke-inner-recipe").withDefault({\n    evaluate: (element) => focusStrokeInner(accentPalette.getValueFor(element), fillColor.getValueFor(element), design_tokens_focusStrokeOuter.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_focusStrokeInner = design_tokens_create("focus-stroke-inner").withDefault((element) => focusStrokeInnerRecipe.getValueFor(element).evaluate(element));\n// Neutral Foreground Hint\n/** @public */\nconst neutralForegroundHintRecipe = createNonCss("neutral-foreground-hint-recipe").withDefault({\n    evaluate: (element) => neutralForegroundHint(neutralPalette.getValueFor(element), fillColor.getValueFor(element)),\n});\n/** @public */\nconst design_tokens_neutralForegroundHint = design_tokens_create("neutral-foreground-hint").withDefault((element) => neutralForegroundHintRecipe.getValueFor(element).evaluate(element));\n// Neutral Foreground\n/** @public */\nconst neutralForegroundRecipe = createNonCss("neutral-foreground-recipe").withDefault({\n    evaluate: (element) => neutralForeground(neutralPalette.getValueFor(element), fillColor.getValueFor(element)),\n});\n/** @public */\nconst neutralForegroundRest = design_tokens_create("neutral-foreground-rest").withDefault((element) => neutralForegroundRecipe.getValueFor(element).evaluate(element));\n// Neutral Stroke\n/** @public */\nconst neutralStrokeRecipe = design_tokens_create({\n    name: "neutral-stroke-recipe",\n    cssCustomPropertyName: null,\n}).withDefault({\n    evaluate: (element) => {\n        return neutralStroke(neutralPalette.getValueFor(element), fillColor.getValueFor(element), neutralStrokeRestDelta.getValueFor(element), neutralStrokeHoverDelta.getValueFor(element), neutralStrokeActiveDelta.getValueFor(element), neutralStrokeFocusDelta.getValueFor(element));\n    },\n});\n/** @public */\nconst neutralStrokeRest = design_tokens_create("neutral-stroke-rest").withDefault((element) => neutralStrokeRecipe.getValueFor(element).evaluate(element).rest);\n/** @public */\nconst neutralStrokeHover = design_tokens_create("neutral-stroke-hover").withDefault((element) => neutralStrokeRecipe.getValueFor(element).evaluate(element).hover);\n/** @public */\nconst neutralStrokeActive = design_tokens_create("neutral-stroke-active").withDefault((element) => neutralStrokeRecipe.getValueFor(element).evaluate(element).active);\n/** @public */\nconst neutralStrokeFocus = design_tokens_create("neutral-stroke-focus").withDefault((element) => neutralStrokeRecipe.getValueFor(element).evaluate(element).focus);\n// Neutral Stroke Divider\n/** @public */\nconst neutralStrokeDividerRecipe = createNonCss("neutral-stroke-divider-recipe").withDefault({\n    evaluate: (element, reference) => neutralStrokeDivider(neutralPalette.getValueFor(element), reference || fillColor.getValueFor(element), neutralStrokeDividerRestDelta.getValueFor(element)),\n});\n/** @public */\nconst neutralStrokeDividerRest = design_tokens_create("neutral-stroke-divider-rest").withDefault(element => neutralStrokeDividerRecipe.getValueFor(element).evaluate(element));\n/**\n * The control height formula expressed as a design token.\n * This token does not provide a CSS custom property.\n *\n * @public\n */\nconst heightNumberAsToken = DesignToken.create({\n    name: "height-number",\n    cssCustomPropertyName: null,\n}).withDefault(target => (baseHeightMultiplier.getValueFor(target) + density.getValueFor(target)) *\n    designUnit.getValueFor(target));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/display.js\n/**\n * A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.\n * @public\n */\nconst display_hidden = `:host([hidden]){display:none}`;\n/**\n * Applies a CSS display property.\n * Also adds CSS rules to not display the element when the [hidden] attribute is applied to the element.\n * @param display - The CSS display property value\n * @public\n */\nfunction display(displayValue) {\n    return `${display_hidden}:host{display:${displayValue}}`;\n}\n\n;// CONCATENATED MODULE: ./node_modules/exenv-es6/dist/can-use-dom.js\n/**\n * Checks if the DOM is available to access and use\n */\nfunction can_use_dom_canUseDOM() {\n    return !!(typeof window !== "undefined" && window.document && window.document.createElement);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-web-utilities/dist/dom.js\n\n/**\n * A test that ensures that all arguments are HTML Elements\n */\nfunction isHTMLElement(...args) {\n    return args.every((arg) => arg instanceof HTMLElement);\n}\n/**\n * Returns all displayed elements inside of a root node that match a provided selector\n */\nfunction getDisplayedNodes(rootNode, selector) {\n    if (!rootNode || !selector || !isHTMLElement(rootNode)) {\n        return;\n    }\n    const nodes = Array.from(rootNode.querySelectorAll(selector));\n    // offsetParent will be null if the element isn\'t currently displayed,\n    // so this will allow us to operate only on visible nodes\n    return nodes.filter((node) => node.offsetParent !== null);\n}\n/**\n * Gets the numeric key code associated with a keyboard event. This method is for use with DOM level 3 events\n * that still use the deprecated keyCode property.\n */\nfunction getKeyCode(event) {\n    return event === null ? null : event.which || event.keyCode || event.charCode;\n}\n/**\n * Returns the nonce used in the page, if any.\n *\n * Based on https://github.com/cssinjs/jss/blob/master/packages/jss/src/DomRenderer.js\n */\nfunction getNonce() {\n    const node = document.querySelector(\'meta[property="csp-nonce"]\');\n    if (node) {\n        return node.getAttribute("content");\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Test if the document supports :focus-visible\n */\nlet _canUseFocusVisible;\nfunction canUseFocusVisible() {\n    if (typeof _canUseFocusVisible === "boolean") {\n        return _canUseFocusVisible;\n    }\n    if (!can_use_dom_canUseDOM()) {\n        _canUseFocusVisible = false;\n        return _canUseFocusVisible;\n    }\n    // Check to see if the document supports the focus-visible element\n    const styleElement = document.createElement("style");\n    // If nonces are present on the page, use it when creating the style element\n    // to test focus-visible support.\n    const styleNonce = getNonce();\n    if (styleNonce !== null) {\n        styleElement.setAttribute("nonce", styleNonce);\n    }\n    document.head.appendChild(styleElement);\n    try {\n        styleElement.sheet.insertRule("foo:focus-visible {color:inherit}", 0);\n        _canUseFocusVisible = true;\n    }\n    catch (e) {\n        _canUseFocusVisible = false;\n    }\n    finally {\n        document.head.removeChild(styleElement);\n    }\n    return _canUseFocusVisible;\n}\nlet _canUseCssGrid;\nfunction canUseCssGrid() {\n    if (typeof _canUseCssGrid === "boolean") {\n        return _canUseCssGrid;\n    }\n    try {\n        _canUseCssGrid = CSS.supports("display", "grid");\n    }\n    catch (_a) {\n        _canUseCssGrid = false;\n    }\n    return _canUseCssGrid;\n}\nfunction canUseForcedColors() {\n    return (canUseDOM() &&\n        (window.matchMedia("(forced-colors: none)").matches ||\n            window.matchMedia("(forced-colors: active)").matches));\n}\nfunction resetDocumentCache() {\n    _canUseCssGrid = undefined;\n    _canUseFocusVisible = undefined;\n}\n/**\n * @deprecated Use \'canUseForcedColors\' instead\n */\nconst canUsedForcedColors = (/* unused pure expression or super */ null && (canUseForcedColors));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/style/focus.js\n\n/**\n * The string representing the focus selector to be used. Value\n * will be "focus-visible" when https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\n * is supported and "focus" when it is not.\n *\n * @public\n */\nconst focusVisible = canUseFocusVisible() ? "focus-visible" : "focus";\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/styles/size.js\n\n\n/**\n * A formula to retrieve the control height.\n * Use this as the value of any CSS property that\n * accepts a pixel size.\n */\nconst heightNumber = cssPartial `(${baseHeightMultiplier} + ${density}) * ${designUnit}`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/styles/patterns/button.js\n\n\n\n\n\n/**\n * @internal\n */\nconst BaseButtonStyles = css `\n    ${display("inline-flex")} :host {\n        font-family: ${bodyFont};\n        outline: none;\n        font-size: ${typeRampBaseFontSize};\n        line-height: ${typeRampBaseLineHeight};\n        height: calc(${heightNumber} * 1px);\n        min-width: calc(${heightNumber} * 1px);\n        background-color: ${neutralFillRest};\n        color: ${neutralForegroundRest};\n        border-radius: calc(${controlCornerRadius} * 1px);\n        fill: currentcolor;\n        cursor: pointer;\n    }\n\n    .control {\n        background: transparent;\n        height: inherit;\n        flex-grow: 1;\n        box-sizing: border-box;\n        display: inline-flex;\n        justify-content: center;\n        align-items: baseline;\n        padding: 0 calc((10 + (${designUnit} * 2 * ${density})) * 1px);\n        white-space: nowrap;\n        outline: none;\n        text-decoration: none;\n        border: calc(${strokeWidth} * 1px) solid transparent;\n        color: inherit;\n        border-radius: inherit;\n        fill: inherit;\n        cursor: inherit;\n        font-weight: inherit;\n        font-family: inherit;\n        font-size: inherit;\n        line-height: inherit;\n    }\n\n    :host(:hover) {\n        background-color: ${neutralFillHover};\n    }\n\n    :host(:active) {\n        background-color: ${neutralFillActive};\n    }\n\n    .control:${focusVisible} {\n        border-color: ${design_tokens_focusStrokeOuter};\n        box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${design_tokens_focusStrokeOuter} inset;\n    }\n\n    .control::-moz-focus-inner {\n        border: 0;\n    }\n\n    .start,\n    .content,\n    .end {\n        align-self: center;\n    }\n\n    .start,\n    .end {\n        display: flex;\n    }\n\n    .control.icon-only {\n        padding: 0;\n        line-height: 0;\n    }\n\n    ::slotted(svg) {\n        ${\n/* Glyph size and margin-left is temporary -\nreplace when adaptive typography is figured out */ ""} width: 16px;\n        height: 16px;\n        pointer-events: none;\n    }\n\n    .start {\n        margin-inline-end: 11px;\n    }\n\n    .end {\n        margin-inline-start: 11px;\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host .control {\n              background-color: ${SystemColors.ButtonFace};\n              border-color: ${SystemColors.ButtonText};\n              color: ${SystemColors.ButtonText};\n              fill: currentColor;\n            }\n\n            :host(:hover) .control {\n              forced-color-adjust: none;\n              background-color: ${SystemColors.Highlight};\n              color: ${SystemColors.HighlightText};\n            }\n\n            .control:${focusVisible} {\n              forced-color-adjust: none;\n              background-color: ${SystemColors.Highlight};\n              border-color: ${SystemColors.ButtonText};\n              box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.ButtonText} inset;\n              color: ${SystemColors.HighlightText};\n            }\n\n            .control:hover,\n            :host([appearance="outline"]) .control:hover {\n              border-color: ${SystemColors.ButtonText};\n            }\n\n            :host([href]) .control {\n                border-color: ${SystemColors.LinkText};\n                color: ${SystemColors.LinkText};\n            }\n\n            :host([href]) .control:hover,\n            :host([href]) .control:${focusVisible}{\n              forced-color-adjust: none;\n              background: ${SystemColors.ButtonFace};\n              border-color: ${SystemColors.LinkText};\n              box-shadow: 0 0 0 1px ${SystemColors.LinkText} inset;\n              color: ${SystemColors.LinkText};\n              fill: currentColor;\n            }\n        `));\n/**\n * @internal\n */\nconst AccentButtonStyles = css `\n    :host([appearance="accent"]) {\n        background: ${accentFillRest};\n        color: ${foregroundOnAccentRest};\n    }\n\n    :host([appearance="accent"]:hover) {\n        background: ${accentFillHover};\n        color: ${foregroundOnAccentHover};\n    }\n\n    :host([appearance="accent"]:active) .control:active {\n        background: ${accentFillActive};\n        color: ${foregroundOnAccentActive};\n    }\n\n    :host([appearance="accent"]) .control:${focusVisible} {\n        box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${design_tokens_focusStrokeOuter} inset,\n            0 0 0 calc((${focusStrokeWidth} + ${strokeWidth}) * 1px) ${design_tokens_focusStrokeInner} inset;\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host([appearance="accent"]) .control {\n                forced-color-adjust: none;\n                background: ${SystemColors.Highlight};\n                color: ${SystemColors.HighlightText};\n            }\n\n            :host([appearance="accent"]) .control:hover,\n            :host([appearance="accent"]:active) .control:active {\n                background: ${SystemColors.HighlightText};\n                border-color: ${SystemColors.Highlight};\n                color: ${SystemColors.Highlight};\n            }\n\n            :host([appearance="accent"]) .control:${focusVisible} {\n                border-color: ${SystemColors.Highlight};\n                box-shadow: 0 0 0 calc(${focusStrokeWidth} * 1px) ${SystemColors.HighlightText} inset;\n            }\n\n            :host([appearance="accent"][href]) .control{\n                background: ${SystemColors.LinkText};\n                color: ${SystemColors.HighlightText};\n            }\n\n            :host([appearance="accent"][href]) .control:hover {\n                background: ${SystemColors.ButtonFace};\n                border-color: ${SystemColors.LinkText};\n                box-shadow: none;\n                color: ${SystemColors.LinkText};\n                fill: currentColor;\n            }\n\n            :host([appearance="accent"][href]) .control:${focusVisible} {\n                border-color: ${SystemColors.LinkText};\n                box-shadow: 0 0 0 calc(${focusStrokeWidth} * 1px) ${SystemColors.HighlightText} inset;\n            }\n        `));\n/**\n * @internal\n */\nconst HypertextStyles = css `\n    :host([appearance="hypertext"]) {\n        font-size: inherit;\n        line-height: inherit;\n        height: auto;\n        min-width: 0;\n        background: transparent;\n    }\n\n    :host([appearance="hypertext"]) .control {\n        display: inline;\n        padding: 0;\n        border: none;\n        box-shadow: none;\n        border-radius: 0;\n        line-height: 1;\n    }\n\n    :host a.control:not(:link) {\n        background-color: transparent;\n        cursor: default;\n    }\n    :host([appearance="hypertext"]) .control:link,\n    :host([appearance="hypertext"]) .control:visited {\n        background: transparent;\n        color: ${accentForegroundRest};\n        border-bottom: calc(${strokeWidth} * 1px) solid ${accentForegroundRest};\n    }\n\n    :host([appearance="hypertext"]:hover),\n    :host([appearance="hypertext"]) .control:hover {\n        background: transparent;\n        border-bottom-color: ${accentForegroundHover};\n    }\n\n    :host([appearance="hypertext"]:active),\n    :host([appearance="hypertext"]) .control:active {\n        background: transparent;\n        border-bottom-color: ${accentForegroundActive};\n    }\n\n    :host([appearance="hypertext"]) .control:${focusVisible} {\n        border-bottom: calc(${focusStrokeWidth} * 1px) solid ${design_tokens_focusStrokeOuter};\n        margin-bottom: calc(calc(${strokeWidth} - ${focusStrokeWidth}) * 1px);\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host([appearance="hypertext"]:hover) {\n                background-color: ${SystemColors.ButtonFace};\n                color: ${SystemColors.ButtonText};\n            }\n            :host([appearance="hypertext"][href]) .control:hover,\n            :host([appearance="hypertext"][href]) .control:active,\n            :host([appearance="hypertext"][href]) .control:${focusVisible} {\n                color: ${SystemColors.LinkText};\n                border-bottom-color: ${SystemColors.LinkText};\n                box-shadow: none;\n            }\n        `));\n/**\n * @internal\n */\nconst LightweightButtonStyles = css `\n    :host([appearance="lightweight"]) {\n        background: transparent;\n        color: ${accentForegroundRest};\n    }\n\n    :host([appearance="lightweight"]) .control {\n        padding: 0;\n        height: initial;\n        border: none;\n        box-shadow: none;\n        border-radius: 0;\n    }\n\n    :host([appearance="lightweight"]:hover) {\n        background: transparent;\n        color: ${accentForegroundHover};\n    }\n\n    :host([appearance="lightweight"]:active) {\n        background: transparent;\n        color: ${accentForegroundActive};\n    }\n\n    :host([appearance="lightweight"]) .content {\n        position: relative;\n    }\n\n    :host([appearance="lightweight"]) .content::before {\n        content: "";\n        display: block;\n        height: calc(${strokeWidth} * 1px);\n        position: absolute;\n        top: calc(1em + 4px);\n        width: 100%;\n    }\n\n    :host([appearance="lightweight"]:hover) .content::before {\n        background: ${accentForegroundHover};\n    }\n\n    :host([appearance="lightweight"]:active) .content::before {\n        background: ${accentForegroundActive};\n    }\n\n    :host([appearance="lightweight"]) .control:${focusVisible} .content::before {\n        background: ${neutralForegroundRest};\n        height: calc(${focusStrokeWidth} * 1px);\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host([appearance="lightweight"]) .control:hover,\n            :host([appearance="lightweight"]) .control:${focusVisible} {\n                forced-color-adjust: none;\n                background: ${SystemColors.ButtonFace};\n                color: ${SystemColors.Highlight};\n            }\n            :host([appearance="lightweight"]) .control:hover .content::before,\n            :host([appearance="lightweight"]) .control:${focusVisible} .content::before {\n                background: ${SystemColors.Highlight};\n            }\n\n            :host([appearance="lightweight"][href]) .control:hover,\n            :host([appearance="lightweight"][href]) .control:${focusVisible} {\n                background: ${SystemColors.ButtonFace};\n                box-shadow: none;\n                color: ${SystemColors.LinkText};\n            }\n\n            :host([appearance="lightweight"][href]) .control:hover .content::before,\n            :host([appearance="lightweight"][href]) .control:${focusVisible} .content::before {\n                background: ${SystemColors.LinkText};\n            }\n        `));\n/**\n * @internal\n */\nconst OutlineButtonStyles = css `\n    :host([appearance="outline"]) {\n        background: transparent;\n        border-color: ${accentFillRest};\n    }\n\n    :host([appearance="outline"]:hover) {\n        border-color: ${accentFillHover};\n    }\n\n    :host([appearance="outline"]:active) {\n        border-color: ${accentFillActive};\n    }\n\n    :host([appearance="outline"]) .control {\n        border-color: inherit;\n    }\n\n    :host([appearance="outline"]) .control:${focusVisible} {\n        box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${design_tokens_focusStrokeOuter} inset;\n        border-color: ${design_tokens_focusStrokeOuter};\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host([appearance="outline"]) .control {\n                border-color: ${SystemColors.ButtonText};\n            }\n            :host([appearance="outline"]) .control:${focusVisible} {\n              forced-color-adjust: none;\n              background-color: ${SystemColors.Highlight};\n              border-color: ${SystemColors.ButtonText};\n              box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${SystemColors.ButtonText} inset;\n              color: ${SystemColors.HighlightText};\n              fill: currentColor;\n            }\n            :host([appearance="outline"][href]) .control {\n                background: ${SystemColors.ButtonFace};\n                border-color: ${SystemColors.LinkText};\n                color: ${SystemColors.LinkText};\n                fill: currentColor;\n            }\n            :host([appearance="outline"][href]) .control:hover,\n            :host([appearance="outline"][href]) .control:${focusVisible} {\n              forced-color-adjust: none;\n              border-color: ${SystemColors.LinkText};\n              box-shadow: 0 0 0 1px ${SystemColors.LinkText} inset;\n            }\n        `));\n/**\n * @internal\n */\nconst StealthButtonStyles = css `\n    :host([appearance="stealth"]) {\n        background: ${neutralFillStealthRest};\n    }\n\n    :host([appearance="stealth"]:hover) {\n        background: ${neutralFillStealthHover};\n    }\n\n    :host([appearance="stealth"]:active) {\n        background: ${neutralFillStealthActive};\n    }\n`.withBehaviors(forcedColorsStylesheetBehavior(css `\n            :host([appearance="stealth"]),\n            :host([appearance="stealth"]) .control {\n                forced-color-adjust: none;\n                background: ${SystemColors.ButtonFace};\n                border-color: transparent;\n                color: ${SystemColors.ButtonText};\n                fill: currentColor;\n            }\n\n            :host([appearance="stealth"]:hover) .control {\n                background: ${SystemColors.Highlight};\n                border-color: ${SystemColors.Highlight};\n                color: ${SystemColors.HighlightText};\n                fill: currentColor;\n            }\n\n            :host([appearance="stealth"]:${focusVisible}) .control {\n                background: ${SystemColors.Highlight};\n                box-shadow: 0 0 0 1px ${SystemColors.Highlight};\n                color: ${SystemColors.HighlightText};\n                fill: currentColor;\n            }\n\n            :host([appearance="stealth"][href]) .control {\n                color: ${SystemColors.LinkText};\n            }\n\n            :host([appearance="stealth"][href]:hover) .control,\n            :host([appearance="stealth"][href]:${focusVisible}) .control {\n                background: ${SystemColors.LinkText};\n                border-color: ${SystemColors.LinkText};\n                color: ${SystemColors.HighlightText};\n                fill: currentColor;\n            }\n\n            :host([appearance="stealth"][href]:${focusVisible}) .control {\n                forced-color-adjust: none;\n                box-shadow: 0 0 0 1px ${SystemColors.LinkText};\n            }\n        `));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/property-stylesheet-behavior.js\n\n/**\n * A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that\n * styles are applied while the property matches and that styles are not applied if the property does\n * not match.\n *\n * @public\n */\nclass PropertyStyleSheetBehavior {\n    /**\n     * Constructs a {@link PropertyStyleSheetBehavior} instance.\n     * @param propertyName - The property name to operate from.\n     * @param value - The property value to operate from.\n     * @param styles - The styles to coordinate with the property.\n     */\n    constructor(propertyName, value, styles) {\n        this.propertyName = propertyName;\n        this.value = value;\n        this.styles = styles;\n    }\n    /**\n     * Binds the behavior to the element.\n     * @param elementInstance - The element for which the property is applied.\n     */\n    bind(elementInstance) {\n        Observable.getNotifier(elementInstance).subscribe(this, this.propertyName);\n        this.handleChange(elementInstance, this.propertyName);\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     * @internal\n     */\n    unbind(source) {\n        Observable.getNotifier(source).unsubscribe(this, this.propertyName);\n        source.$fastController.removeStyles(this.styles);\n    }\n    /**\n     * Change event for the provided element.\n     * @param source - the element for which to attach or detach styles.\n     * @param key - the key to lookup to know if the element already has the styles\n     * @internal\n     */\n    handleChange(source, key) {\n        if (source[key] === this.value) {\n            source.$fastController.addStyles(this.styles);\n        }\n        else {\n            source.$fastController.removeStyles(this.styles);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/utilities/behaviors.js\n\n/**\n * Behavior that will conditionally apply a stylesheet based on the elements\n * appearance property\n *\n * @param value - The value of the appearance property\n * @param styles - The styles to be applied when condition matches\n *\n * @public\n */\nfunction appearanceBehavior(value, styles) {\n    return new PropertyStyleSheetBehavior("appearance", value, styles);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/button/button.styles.js\n\n\n\n\n\n\n/**\n * Styles for Button\n * @public\n */\nconst buttonStyles = (context, definition) => css `\n        :host([disabled]),\n        :host([disabled]:hover),\n        :host([disabled]:active) {\n            opacity: ${disabledOpacity};\n            background-color: ${neutralFillRest};\n            cursor: ${disabledCursor};\n        }\n\n        ${BaseButtonStyles}\n    `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                :host([disabled]),\n                :host([disabled]) .control,\n                :host([disabled]:hover),\n                :host([disabled]:active) {\n                    forced-color-adjust: none;\n                    background-color: ${SystemColors.ButtonFace};\n                    border-color: ${SystemColors.GrayText};\n                    color: ${SystemColors.GrayText};\n                    cursor: ${disabledCursor};\n                    opacity: 1;\n                }\n            `), appearanceBehavior("accent", css `\n                :host([appearance="accent"][disabled]),\n                :host([appearance="accent"][disabled]:hover),\n                :host([appearance="accent"][disabled]:active) {\n                    background: ${accentFillRest};\n                }\n\n                ${AccentButtonStyles}\n            `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                        :host([appearance="accent"][disabled]) .control,\n                        :host([appearance="accent"][disabled]) .control:hover {\n                            background: ${SystemColors.ButtonFace};\n                            border-color: ${SystemColors.GrayText};\n                            color: ${SystemColors.GrayText};\n                        }\n                    `))), appearanceBehavior("lightweight", css `\n                :host([appearance="lightweight"][disabled]:hover),\n                :host([appearance="lightweight"][disabled]:active) {\n                    background-color: transparent;\n                    color: ${accentForegroundRest};\n                }\n\n                :host([appearance="lightweight"][disabled]) .content::before,\n                :host([appearance="lightweight"][disabled]:hover) .content::before,\n                :host([appearance="lightweight"][disabled]:active) .content::before {\n                    background: transparent;\n                }\n\n                ${LightweightButtonStyles}\n            `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                        :host([appearance="lightweight"].disabled) .control {\n                            forced-color-adjust: none;\n                            color: ${SystemColors.GrayText};\n                        }\n\n                        :host([appearance="lightweight"].disabled)\n                            .control:hover\n                            .content::before {\n                            background: none;\n                        }\n                    `))), appearanceBehavior("outline", css `\n                :host([appearance="outline"][disabled]),\n                :host([appearance="outline"][disabled]:hover),\n                :host([appearance="outline"][disabled]:active) {\n                    background: transparent;\n                    border-color: ${accentFillRest};\n                }\n\n                ${OutlineButtonStyles}\n            `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                        :host([appearance="outline"][disabled]) .control {\n                            border-color: ${SystemColors.GrayText};\n                        }\n                    `))), appearanceBehavior("stealth", css `\n                :host([appearance="stealth"][disabled]),\n                :host([appearance="stealth"][disabled]:hover),\n                :host([appearance="stealth"][disabled]:active) {\n                    background: ${neutralFillStealthRest};\n                }\n\n                ${StealthButtonStyles}\n            `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                        :host([appearance="stealth"][disabled]) {\n                            background: ${SystemColors.ButtonFace};\n                        }\n\n                        :host([appearance="stealth"][disabled]) .control {\n                            background: ${SystemColors.ButtonFace};\n                            border-color: transparent;\n                            color: ${SystemColors.GrayText};\n                        }\n                    `))));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/button/index.js\n\n\n\n\n/**\n * @internal\n */\nclass Button extends button_Button {\n    constructor() {\n        super(...arguments);\n        /**\n         * The appearance the button should have.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: appearance\n         */\n        this.appearance = "neutral";\n    }\n    /**\n     * Applies \'icon-only\' class when there is only an SVG in the default slot\n     *\n     * @public\n     * @remarks\n     */\n    defaultSlottedContentChanged(oldValue, newValue) {\n        const slottedElements = this.defaultSlottedContent.filter(x => x.nodeType === Node.ELEMENT_NODE);\n        if (slottedElements.length === 1 && slottedElements[0] instanceof SVGElement) {\n            this.control.classList.add("icon-only");\n        }\n        else {\n            this.control.classList.remove("icon-only");\n        }\n    }\n}\ntslib_tslib_es6_decorate([\n    attributes_attr\n], Button.prototype, "appearance", void 0);\n/**\n * A function that returns a {@link @microsoft/fast-foundation#Button} registration for configuring the component with a DesignSystem.\n * Implements {@link @microsoft/fast-foundation#buttonTemplate}\n *\n *\n * @public\n * @remarks\n * Generates HTML Element: `<fast-button>`\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus | delegatesFocus}\n */\nconst fastButton = Button.compose({\n    baseName: "button",\n    baseClass: button_Button,\n    template: buttonTemplate,\n    styles: buttonStyles,\n    shadowOptions: {\n        delegatesFocus: true,\n    },\n});\n\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/menu-item/menu-item.options.js\n/**\n * Menu items roles.\n * @public\n */\nconst MenuItemRole = {\n    /**\n     * The menu item has a "menuitem" role\n     */\n    menuitem: "menuitem",\n    /**\n     * The menu item has a "menuitemcheckbox" role\n     */\n    menuitemcheckbox: "menuitemcheckbox",\n    /**\n     * The menu item has a "menuitemradio" role\n     */\n    menuitemradio: "menuitemradio",\n};\n/**\n * @internal\n */\nconst roleForMenuItem = {\n    [MenuItemRole.menuitem]: "menuitem",\n    [MenuItemRole.menuitemcheckbox]: "menuitemcheckbox",\n    [MenuItemRole.menuitemradio]: "menuitemradio",\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/utilities/direction.js\n\n/**\n * a method to determine the current localization direction of the view\n * @param rootNode - the HTMLElement to begin the query from, usually "this" when used in a component controller\n * @public\n */\nconst getDirection = (rootNode) => {\n    const dirNode = rootNode.closest("[dir]");\n    return dirNode !== null && dirNode.dir === "rtl" ? Direction.rtl : Direction.ltr;\n};\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/menu-item/menu-item.js\n\n\n\n\n\n\n\n\n\n/**\n * A Switch Custom HTML Element.\n * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.\n *\n * @slot checked-indicator - The checked indicator\n * @slot radio-indicator - The radio indicator\n * @slot start - Content which can be provided before the menu item content\n * @slot end - Content which can be provided after the menu item content\n * @slot - The default slot for menu item content\n * @slot expand-collapse-indicator - The expand/collapse indicator\n * @slot submenu - Used to nest menu\'s within menu items\n * @csspart input-container - The element representing the visual checked or radio indicator\n * @csspart checkbox - The element wrapping the `menuitemcheckbox` indicator\n * @csspart radio - The element wrapping the `menuitemradio` indicator\n * @csspart content - The element wrapping the menu item content\n * @csspart expand-collapse-glyph-container - The element wrapping the expand collapse element\n * @csspart expand-collapse - The expand/collapse element\n * @csspart submenu-region - The container for the submenu, used for positioning\n * @fires expanded-change - Fires a custom \'expanded-change\' event when the expanded state changes\n * @fires change - Fires a custom \'change\' event when a non-submenu item with a role of `menuitemcheckbox`, `menuitemradio`, or `menuitem` is invoked\n *\n * @public\n */\nclass MenuItem extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The role of the element.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: role\n         */\n        this.role = MenuItemRole.menuitem;\n        /**\n         * @internal\n         */\n        this.hasSubmenu = false;\n        /**\n         * Track current direction to pass to the anchored region\n         *\n         * @internal\n         */\n        this.currentDirection = Direction.ltr;\n        this.focusSubmenuOnLoad = false;\n        /**\n         * @internal\n         */\n        this.handleMenuItemKeyDown = (e) => {\n            if (e.defaultPrevented) {\n                return false;\n            }\n            switch (e.key) {\n                case keyEnter:\n                case keySpace:\n                    this.invoke();\n                    return false;\n                case keyArrowRight:\n                    //open/focus on submenu\n                    this.expandAndFocus();\n                    return false;\n                case keyArrowLeft:\n                    //close submenu\n                    if (this.expanded) {\n                        this.expanded = false;\n                        this.focus();\n                        return false;\n                    }\n            }\n            return true;\n        };\n        /**\n         * @internal\n         */\n        this.handleMenuItemClick = (e) => {\n            if (e.defaultPrevented || this.disabled) {\n                return false;\n            }\n            this.invoke();\n            return false;\n        };\n        /**\n         * @internal\n         */\n        this.submenuLoaded = () => {\n            if (!this.focusSubmenuOnLoad) {\n                return;\n            }\n            this.focusSubmenuOnLoad = false;\n            if (this.hasSubmenu) {\n                this.submenu.focus();\n                this.setAttribute("tabindex", "-1");\n            }\n        };\n        /**\n         * @internal\n         */\n        this.handleMouseOver = (e) => {\n            if (this.disabled || !this.hasSubmenu || this.expanded) {\n                return false;\n            }\n            this.expanded = true;\n            return false;\n        };\n        /**\n         * @internal\n         */\n        this.handleMouseOut = (e) => {\n            if (!this.expanded || this.contains(document.activeElement)) {\n                return false;\n            }\n            this.expanded = false;\n            return false;\n        };\n        /**\n         * @internal\n         */\n        this.expandAndFocus = () => {\n            if (!this.hasSubmenu) {\n                return;\n            }\n            this.focusSubmenuOnLoad = true;\n            this.expanded = true;\n        };\n        /**\n         * @internal\n         */\n        this.invoke = () => {\n            if (this.disabled) {\n                return;\n            }\n            switch (this.role) {\n                case MenuItemRole.menuitemcheckbox:\n                    this.checked = !this.checked;\n                    break;\n                case MenuItemRole.menuitem:\n                    // update submenu\n                    this.updateSubmenu();\n                    if (this.hasSubmenu) {\n                        this.expandAndFocus();\n                    }\n                    else {\n                        this.$emit("change");\n                    }\n                    break;\n                case MenuItemRole.menuitemradio:\n                    if (!this.checked) {\n                        this.checked = true;\n                    }\n                    break;\n            }\n        };\n        /**\n         * Gets the submenu element if any\n         *\n         * @internal\n         */\n        this.updateSubmenu = () => {\n            this.submenu = this.domChildren().find((element) => {\n                return element.getAttribute("role") === "menu";\n            });\n            this.hasSubmenu = this.submenu === undefined ? false : true;\n        };\n    }\n    expandedChanged(oldValue) {\n        if (this.$fastController.isConnected) {\n            if (this.submenu === undefined) {\n                return;\n            }\n            if (this.expanded === false) {\n                this.submenu.collapseExpandedItem();\n            }\n            else {\n                this.currentDirection = getDirection(this);\n            }\n            this.$emit("expanded-change", this, { bubbles: false });\n        }\n    }\n    checkedChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected) {\n            this.$emit("change");\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        DOM.queueUpdate(() => {\n            this.updateSubmenu();\n        });\n        if (!this.startColumnCount) {\n            this.startColumnCount = 1;\n        }\n        this.observer = new MutationObserver(this.updateSubmenu);\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.submenu = undefined;\n        if (this.observer !== undefined) {\n            this.observer.disconnect();\n            this.observer = undefined;\n        }\n    }\n    /**\n     * get an array of valid DOM children\n     */\n    domChildren() {\n        return Array.from(this.children).filter(child => !child.hasAttribute("hidden"));\n    }\n}\ntslib_es6_decorate([\n    attributes_attr({ mode: "boolean" })\n], MenuItem.prototype, "disabled", void 0);\ntslib_es6_decorate([\n    attributes_attr({ mode: "boolean" })\n], MenuItem.prototype, "expanded", void 0);\ntslib_es6_decorate([\n    observable_observable\n], MenuItem.prototype, "startColumnCount", void 0);\ntslib_es6_decorate([\n    attributes_attr\n], MenuItem.prototype, "role", void 0);\ntslib_es6_decorate([\n    attributes_attr({ mode: "boolean" })\n], MenuItem.prototype, "checked", void 0);\ntslib_es6_decorate([\n    observable_observable\n], MenuItem.prototype, "submenuRegion", void 0);\ntslib_es6_decorate([\n    observable_observable\n], MenuItem.prototype, "hasSubmenu", void 0);\ntslib_es6_decorate([\n    observable_observable\n], MenuItem.prototype, "currentDirection", void 0);\ntslib_es6_decorate([\n    observable_observable\n], MenuItem.prototype, "submenu", void 0);\napplyMixins(MenuItem, StartEnd);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/menu/menu.js\n\n\n\n\n\n/**\n * A Menu Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#menu | ARIA menu }.\n *\n * @slot - The default slot for the menu items\n *\n * @public\n */\nclass menu_Menu extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        this.expandedItem = null;\n        /**\n         * The index of the focusable element in the items array\n         * defaults to -1\n         */\n        this.focusIndex = -1;\n        /**\n         * @internal\n         */\n        this.isNestedMenu = () => {\n            return (this.parentElement !== null &&\n                isHTMLElement(this.parentElement) &&\n                this.parentElement.getAttribute("role") === "menuitem");\n        };\n        /**\n         * if focus is moving out of the menu, reset to a stable initial state\n         * @internal\n         */\n        this.handleFocusOut = (e) => {\n            if (!this.contains(e.relatedTarget) && this.menuItems !== undefined) {\n                this.collapseExpandedItem();\n                // find our first focusable element\n                const focusIndex = this.menuItems.findIndex(this.isFocusableElement);\n                // set the current focus index\'s tabindex to -1\n                this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");\n                // set the first focusable element tabindex to 0\n                this.menuItems[focusIndex].setAttribute("tabindex", "0");\n                // set the focus index\n                this.focusIndex = focusIndex;\n            }\n        };\n        this.handleItemFocus = (e) => {\n            const targetItem = e.target;\n            if (this.menuItems !== undefined &&\n                targetItem !== this.menuItems[this.focusIndex]) {\n                this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");\n                this.focusIndex = this.menuItems.indexOf(targetItem);\n                targetItem.setAttribute("tabindex", "0");\n            }\n        };\n        this.handleExpandedChanged = (e) => {\n            if (e.defaultPrevented ||\n                e.target === null ||\n                this.menuItems === undefined ||\n                this.menuItems.indexOf(e.target) < 0) {\n                return;\n            }\n            e.preventDefault();\n            const changedItem = e.target;\n            // closing an expanded item without opening another\n            if (this.expandedItem !== null &&\n                changedItem === this.expandedItem &&\n                changedItem.expanded === false) {\n                this.expandedItem = null;\n                return;\n            }\n            if (changedItem.expanded) {\n                if (this.expandedItem !== null && this.expandedItem !== changedItem) {\n                    this.expandedItem.expanded = false;\n                }\n                this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");\n                this.expandedItem = changedItem;\n                this.focusIndex = this.menuItems.indexOf(changedItem);\n                changedItem.setAttribute("tabindex", "0");\n            }\n        };\n        this.removeItemListeners = () => {\n            if (this.menuItems !== undefined) {\n                this.menuItems.forEach((item) => {\n                    item.removeEventListener("expanded-change", this.handleExpandedChanged);\n                    item.removeEventListener("focus", this.handleItemFocus);\n                });\n            }\n        };\n        this.setItems = () => {\n            const newItems = this.domChildren();\n            this.removeItemListeners();\n            this.menuItems = newItems;\n            const menuItems = this.menuItems.filter(this.isMenuItemElement);\n            // if our focus index is not -1 we have items\n            if (menuItems.length) {\n                this.focusIndex = 0;\n            }\n            function elementIndent(el) {\n                const role = el.getAttribute("role");\n                const startSlot = el.querySelector("[slot=start]");\n                if (role !== MenuItemRole.menuitem && startSlot === null) {\n                    return 1;\n                }\n                else if (role === MenuItemRole.menuitem && startSlot !== null) {\n                    return 1;\n                }\n                else if (role !== MenuItemRole.menuitem && startSlot !== null) {\n                    return 2;\n                }\n                else {\n                    return 0;\n                }\n            }\n            const indent = menuItems.reduce((accum, current) => {\n                const elementValue = elementIndent(current);\n                return accum > elementValue ? accum : elementValue;\n            }, 0);\n            menuItems.forEach((item, index) => {\n                item.setAttribute("tabindex", index === 0 ? "0" : "-1");\n                item.addEventListener("expanded-change", this.handleExpandedChanged);\n                item.addEventListener("focus", this.handleItemFocus);\n                if (item instanceof MenuItem) {\n                    item.startColumnCount = indent;\n                }\n            });\n        };\n        /**\n         * handle change from child element\n         */\n        this.changeHandler = (e) => {\n            if (this.menuItems === undefined) {\n                return;\n            }\n            const changedMenuItem = e.target;\n            const changeItemIndex = this.menuItems.indexOf(changedMenuItem);\n            if (changeItemIndex === -1) {\n                return;\n            }\n            if (changedMenuItem.role === "menuitemradio" &&\n                changedMenuItem.checked === true) {\n                for (let i = changeItemIndex - 1; i >= 0; --i) {\n                    const item = this.menuItems[i];\n                    const role = item.getAttribute("role");\n                    if (role === MenuItemRole.menuitemradio) {\n                        item.checked = false;\n                    }\n                    if (role === "separator") {\n                        break;\n                    }\n                }\n                const maxIndex = this.menuItems.length - 1;\n                for (let i = changeItemIndex + 1; i <= maxIndex; ++i) {\n                    const item = this.menuItems[i];\n                    const role = item.getAttribute("role");\n                    if (role === MenuItemRole.menuitemradio) {\n                        item.checked = false;\n                    }\n                    if (role === "separator") {\n                        break;\n                    }\n                }\n            }\n        };\n        /**\n         * check if the item is a menu item\n         */\n        this.isMenuItemElement = (el) => {\n            return (isHTMLElement(el) &&\n                menu_Menu.focusableElementRoles.hasOwnProperty(el.getAttribute("role")));\n        };\n        /**\n         * check if the item is focusable\n         */\n        this.isFocusableElement = (el) => {\n            return this.isMenuItemElement(el);\n        };\n    }\n    itemsChanged(oldValue, newValue) {\n        // only update children after the component is connected and\n        // the setItems has run on connectedCallback\n        // (menuItems is undefined until then)\n        if (this.$fastController.isConnected && this.menuItems !== undefined) {\n            this.setItems();\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        DOM.queueUpdate(() => {\n            // wait until children have had a chance to\n            // connect before setting/checking their props/attributes\n            this.setItems();\n        });\n        this.addEventListener("change", this.changeHandler);\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeItemListeners();\n        this.menuItems = undefined;\n        this.removeEventListener("change", this.changeHandler);\n    }\n    /**\n     * Focuses the first item in the menu.\n     *\n     * @public\n     */\n    focus() {\n        this.setFocus(0, 1);\n    }\n    /**\n     * Collapses any expanded menu items.\n     *\n     * @public\n     */\n    collapseExpandedItem() {\n        if (this.expandedItem !== null) {\n            this.expandedItem.expanded = false;\n            this.expandedItem = null;\n        }\n    }\n    /**\n     * @internal\n     */\n    handleMenuKeyDown(e) {\n        if (e.defaultPrevented || this.menuItems === undefined) {\n            return;\n        }\n        switch (e.key) {\n            case keyArrowDown:\n                // go forward one index\n                this.setFocus(this.focusIndex + 1, 1);\n                return;\n            case keyArrowUp:\n                // go back one index\n                this.setFocus(this.focusIndex - 1, -1);\n                return;\n            case keyEnd:\n                // set focus on last item\n                this.setFocus(this.menuItems.length - 1, -1);\n                return;\n            case keyHome:\n                // set focus on first item\n                this.setFocus(0, 1);\n                return;\n            default:\n                // if we are not handling the event, do not prevent default\n                return true;\n        }\n    }\n    /**\n     * get an array of valid DOM children\n     */\n    domChildren() {\n        return Array.from(this.children).filter(child => !child.hasAttribute("hidden"));\n    }\n    setFocus(focusIndex, adjustment) {\n        if (this.menuItems === undefined) {\n            return;\n        }\n        while (focusIndex >= 0 && focusIndex < this.menuItems.length) {\n            const child = this.menuItems[focusIndex];\n            if (this.isFocusableElement(child)) {\n                // change the previous index to -1\n                if (this.focusIndex > -1 &&\n                    this.menuItems.length >= this.focusIndex - 1) {\n                    this.menuItems[this.focusIndex].setAttribute("tabindex", "-1");\n                }\n                // update the focus index\n                this.focusIndex = focusIndex;\n                // update the tabindex of next focusable element\n                child.setAttribute("tabindex", "0");\n                // focus the element\n                child.focus();\n                break;\n            }\n            focusIndex += adjustment;\n        }\n    }\n}\nmenu_Menu.focusableElementRoles = roleForMenuItem;\ntslib_es6_decorate([\n    observable_observable\n], menu_Menu.prototype, "items", void 0);\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-foundation/dist/esm/menu/menu.template.js\n\n/**\n * The template for the {@link @microsoft/fast-foundation#Menu} component.\n * @public\n */\nconst menuTemplate = (context, definition) => html `\n    <template\n        slot="${x => (x.slot ? x.slot : x.isNestedMenu() ? "submenu" : void 0)}"\n        role="menu"\n        @keydown="${(x, c) => x.handleMenuKeyDown(c.event)}"\n        @focusout="${(x, c) => x.handleFocusOut(c.event)}"\n    >\n        <slot ${slotted("items")}></slot>\n    </template>\n`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/styles/elevation.js\n/**\n * Define shadow algorithms.\n *\n * TODO: The --background-luminance will need to be derived from JavaScript. For now\n * this is hard-coded to a 1, the relative luminance of pure white.\n * https://github.com/microsoft/fast/issues/2778\n *\n * @internal\n */\nconst ambientShadow = "0 0 calc((var(--elevation) * 0.225px) + 2px) rgba(0, 0, 0, calc(.11 * (2 - var(--background-luminance, 1))))";\n/**\n * @internal\n */\nconst directionalShadow = "0 calc(var(--elevation) * 0.4px) calc((var(--elevation) * 0.9px)) rgba(0, 0, 0, calc(.13 * (2 - var(--background-luminance, 1))))";\n/**\n * Applies the box-shadow CSS rule set to the elevation formula.\n * Control this formula with the --elevation CSS Custom Property\n * by setting --elevation to a number.\n */\nconst elevation = `box-shadow: ${ambientShadow}, ${directionalShadow};`;\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/menu/menu.styles.js\n\n\n\n\n\n/**\n * Styles for Menu\n * @public\n */\nconst menuStyles = (context, definition) => css `\n        ${display("block")} :host {\n            --elevation: 11;\n            background: ${fillColor};\n            border: calc(${strokeWidth} * 1px) solid transparent;\n            ${elevation}\n            margin: 0;\n            border-radius: calc(${controlCornerRadius} * 1px);\n            padding: calc(${designUnit} * 1px) 0;\n            max-width: 368px;\n            min-width: 64px;\n        }\n\n        :host([slot="submenu"]) {\n            width: max-content;\n            margin: 0 calc(${designUnit} * 1px);\n        }\n\n        ::slotted(hr) {\n            box-sizing: content-box;\n            height: 0;\n            margin: 0;\n            border: none;\n            border-top: calc(${strokeWidth} * 1px) solid ${neutralStrokeDividerRest};\n        }\n    `.withBehaviors(forcedColorsStylesheetBehavior(css `\n                :host {\n                    background: ${SystemColors.Canvas};\n                    border-color: ${SystemColors.CanvasText};\n                }\n            `));\n\n;// CONCATENATED MODULE: ./node_modules/@microsoft/fast-components/dist/esm/menu/index.js\n\n\n\n/**\n * @public\n */\nclass Menu extends menu_Menu {\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        fillColor.setValueFor(this, design_tokens_neutralLayerFloating);\n    }\n}\n/**\n * A function that returns a {@link @microsoft/fast-foundation#Menu} registration for configuring the component with a DesignSystem.\n * Implements {@link @microsoft/fast-foundation#menuTemplate}\n *\n *\n * @public\n * @remarks\n * Generates HTML Element: `<fast-menu>`\n */\nconst fastMenu = Menu.compose({\n    baseName: "menu",\n    template: menuTemplate,\n    styles: menuStyles,\n});\n\n\n;// CONCATENATED MODULE: ./Blockly-for-Dwenguino/dashboards/js/src/index.ts\n\n\n\n\nprovideFASTDesignSystem().register(fastButton(), fastMenu());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///975\n')},437:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "body{display:relative}:not(:defined){visibility:hidden}", "",{"version":3,"sources":["webpack://./Blockly-for-Dwenguino/dashboards/scss/index.scss"],"names":[],"mappings":"AA4CA,KACI,gBAAA,CAGJ,eACI,iBAAA","sourcesContent":["$base-color: #87C544;\\n$base-background-color: #E0F0CF;\\n$base-background-light-color: #F6FBF1;\\n\\n$accent-fill-rest: #F5F5F5;\\n$accent-fill-hover: #FFFFFF;\\n$accent-fill-active: #E8E8E8;\\n$accent-fill-selected: #D6D6D6;\\n$accent-foreground-rest: #696969;\\n$accent-foreground-hover: #5A5A5A;\\n$accent-foreground-active: #747474;\\n$accent-foreground-cut: #000000;\\n$neutral-focus-inner-accent: #F5F5F5;\\n$neutral-focus: #5C872E;\\n\\n$neutral-fill-rest: #F6FBF1;\\n$neutral-fill-hover: #ffffff;\\n$neutral-fill-active: #F0F8E7;\\n$neutral-fill-selecte: #F6FBF1;\\n$neutral-foreground-rest: #16200A;\\n$neutral-focus: #5C872E;\\n\\n$neutral-fill-stealth-rest: #E0F0CF;\\n$neutral-fill-stealth-hover: #F0F8E7;\\n$neutral-fill-stealth-active: #E9F5DD;\\n$neutral-fill-stealth-selected: #F6FBF1;\\n$neutral-outline-rest: #93CB57;\\n$neutral-outline-hover: #6FA338;\\n$neutral-outline-active: #AFD882;\\n$neutral-foreground-rest: #16200A;\\n$neutral-foreground-hint: #4F7427;\\n\\n$neutral-fill-input-rest: #E0F0CF;\\n$neutral-fill-toggle-rest: #4F7427;\\n$neutral-fill-toggle-hover: #3E5C1E;\\n$neutral-fill-toggle-active: #5A842D;\\n$neutral-outline-contrast-rest: #659332;\\n$neutral-outline-contrast-hover: #456522;\\n$neutral-outline-contrast-active: #78AF3C;\\n\\n$neutral-divider-rest: #C8E4A9;\\n\\n\\n\\nbody {\\n    display: relative;\\n}\\n\\n:not(:defined) {\\n    visibility: hidden;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNnSDtBQUNqQjtBQUMvRiw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0EsK0NBQStDLGlCQUFpQixlQUFlLGtCQUFrQixPQUFPLHdMQUF3TCxrQ0FBa0Msd0NBQXdDLCtCQUErQiw4QkFBOEIsK0JBQStCLGlDQUFpQyxtQ0FBbUMsb0NBQW9DLHFDQUFxQyxrQ0FBa0MsdUNBQXVDLDBCQUEwQixnQ0FBZ0MsK0JBQStCLGdDQUFnQyxpQ0FBaUMsb0NBQW9DLDBCQUEwQix3Q0FBd0MsdUNBQXVDLHdDQUF3QywwQ0FBMEMsaUNBQWlDLGtDQUFrQyxtQ0FBbUMsb0NBQW9DLG9DQUFvQyxzQ0FBc0MscUNBQXFDLHNDQUFzQyx1Q0FBdUMsMENBQTBDLDJDQUEyQyw0Q0FBNEMsbUNBQW1DLGNBQWMsd0JBQXdCLEdBQUcsb0JBQW9CLHlCQUF5QixHQUFHLG1CQUFtQjtBQUMzbUQ7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2R3ZW5ndWlub2Jsb2NrbHktcGFja2FnZS8uL0Jsb2NrbHktZm9yLUR3ZW5ndWluby9kYXNoYm9hcmRzL3Njc3MvaW5kZXguc2Nzcz82ZmNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keXtkaXNwbGF5OnJlbGF0aXZlfTpub3QoOmRlZmluZWQpe3Zpc2liaWxpdHk6aGlkZGVufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0Jsb2NrbHktZm9yLUR3ZW5ndWluby9kYXNoYm9hcmRzL3Njc3MvaW5kZXguc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUE0Q0EsS0FDSSxnQkFBQSxDQUdKLGVBQ0ksaUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiJGJhc2UtY29sb3I6ICM4N0M1NDQ7XFxuJGJhc2UtYmFja2dyb3VuZC1jb2xvcjogI0UwRjBDRjtcXG4kYmFzZS1iYWNrZ3JvdW5kLWxpZ2h0LWNvbG9yOiAjRjZGQkYxO1xcblxcbiRhY2NlbnQtZmlsbC1yZXN0OiAjRjVGNUY1O1xcbiRhY2NlbnQtZmlsbC1ob3ZlcjogI0ZGRkZGRjtcXG4kYWNjZW50LWZpbGwtYWN0aXZlOiAjRThFOEU4O1xcbiRhY2NlbnQtZmlsbC1zZWxlY3RlZDogI0Q2RDZENjtcXG4kYWNjZW50LWZvcmVncm91bmQtcmVzdDogIzY5Njk2OTtcXG4kYWNjZW50LWZvcmVncm91bmQtaG92ZXI6ICM1QTVBNUE7XFxuJGFjY2VudC1mb3JlZ3JvdW5kLWFjdGl2ZTogIzc0NzQ3NDtcXG4kYWNjZW50LWZvcmVncm91bmQtY3V0OiAjMDAwMDAwO1xcbiRuZXV0cmFsLWZvY3VzLWlubmVyLWFjY2VudDogI0Y1RjVGNTtcXG4kbmV1dHJhbC1mb2N1czogIzVDODcyRTtcXG5cXG4kbmV1dHJhbC1maWxsLXJlc3Q6ICNGNkZCRjE7XFxuJG5ldXRyYWwtZmlsbC1ob3ZlcjogI2ZmZmZmZjtcXG4kbmV1dHJhbC1maWxsLWFjdGl2ZTogI0YwRjhFNztcXG4kbmV1dHJhbC1maWxsLXNlbGVjdGU6ICNGNkZCRjE7XFxuJG5ldXRyYWwtZm9yZWdyb3VuZC1yZXN0OiAjMTYyMDBBO1xcbiRuZXV0cmFsLWZvY3VzOiAjNUM4NzJFO1xcblxcbiRuZXV0cmFsLWZpbGwtc3RlYWx0aC1yZXN0OiAjRTBGMENGO1xcbiRuZXV0cmFsLWZpbGwtc3RlYWx0aC1ob3ZlcjogI0YwRjhFNztcXG4kbmV1dHJhbC1maWxsLXN0ZWFsdGgtYWN0aXZlOiAjRTlGNUREO1xcbiRuZXV0cmFsLWZpbGwtc3RlYWx0aC1zZWxlY3RlZDogI0Y2RkJGMTtcXG4kbmV1dHJhbC1vdXRsaW5lLXJlc3Q6ICM5M0NCNTc7XFxuJG5ldXRyYWwtb3V0bGluZS1ob3ZlcjogIzZGQTMzODtcXG4kbmV1dHJhbC1vdXRsaW5lLWFjdGl2ZTogI0FGRDg4MjtcXG4kbmV1dHJhbC1mb3JlZ3JvdW5kLXJlc3Q6ICMxNjIwMEE7XFxuJG5ldXRyYWwtZm9yZWdyb3VuZC1oaW50OiAjNEY3NDI3O1xcblxcbiRuZXV0cmFsLWZpbGwtaW5wdXQtcmVzdDogI0UwRjBDRjtcXG4kbmV1dHJhbC1maWxsLXRvZ2dsZS1yZXN0OiAjNEY3NDI3O1xcbiRuZXV0cmFsLWZpbGwtdG9nZ2xlLWhvdmVyOiAjM0U1QzFFO1xcbiRuZXV0cmFsLWZpbGwtdG9nZ2xlLWFjdGl2ZTogIzVBODQyRDtcXG4kbmV1dHJhbC1vdXRsaW5lLWNvbnRyYXN0LXJlc3Q6ICM2NTkzMzI7XFxuJG5ldXRyYWwtb3V0bGluZS1jb250cmFzdC1ob3ZlcjogIzQ1NjUyMjtcXG4kbmV1dHJhbC1vdXRsaW5lLWNvbnRyYXN0LWFjdGl2ZTogIzc4QUYzQztcXG5cXG4kbmV1dHJhbC1kaXZpZGVyLXJlc3Q6ICNDOEU0QTk7XFxuXFxuXFxuXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6IHJlbGF0aXZlO1xcbn1cXG5cXG46bm90KDpkZWZpbmVkKSB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///437\n')},645:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///645\n')},537:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHdlbmd1aW5vYmxvY2tseS1wYWNrYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///537\n')},230:module=>{eval("/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhL2xpYi9icm93c2VyLmpzPzVhMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWVudiBicm93c2VyICovXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnID8gc2VsZi5Gb3JtRGF0YSA6IHdpbmRvdy5Gb3JtRGF0YTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///230\n")},379:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUJBQXFCLDZCQUE2QjtBQUNsRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///379\n')},569:module=>{"use strict";eval('\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2R3ZW5ndWlub2Jsb2NrbHktcGFja2FnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///569\n')},216:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHdlbmd1aW5vYmxvY2tseS1wYWNrYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzP2RlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///216\n')},565:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxjQUFjLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///565\n')},795:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n\n  var needLayer = typeof obj.layer !== "undefined";\n\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += "}";\n  }\n\n  if (obj.media) {\n    css += "}";\n  }\n\n  if (obj.supports) {\n    css += "}";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRDs7QUFFQTtBQUNBLDBDQUEwQztBQUMxQzs7QUFFQTs7QUFFQTtBQUNBLGlGQUFpRjtBQUNqRjs7QUFFQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTs7QUFFQTtBQUNBLHlEQUF5RDtBQUN6RCxJQUFJOztBQUVKOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcz9lNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///795\n')},589:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kd2VuZ3Vpbm9ibG9ja2x5LXBhY2thZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///589\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={id:g,exports:{}};return __webpack_modules__[g](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(975)})();